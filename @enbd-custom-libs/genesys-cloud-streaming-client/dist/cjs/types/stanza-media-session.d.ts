import { MediaSession } from 'stanza/jingle';
import { JingleReasonCondition } from 'stanza/Constants';
import { ActionCallback } from 'stanza/jingle/Session';
import { JingleReason } from 'stanza/protocol';
import { IMediaSession, IStanzaMediaSessionParams } from './media-session';
import { SessionTypes } from './interfaces';
import { Jingle } from 'stanza/protocol/xep0166';
export declare class StanzaMediaSession extends MediaSession implements IMediaSession {
    private statsGatherer?;
    private iceCandidatesDiscovered;
    private iceCandidatesReceivedFromPeer;
    private interruptionStart?;
    private logger;
    off: any;
    removeAllListeners: any;
    on: any;
    once: any;
    setMaxListeners: any;
    getMaxListeners: any;
    listeners: any;
    rawListeners: any;
    listenerCount: any;
    prependListener: any;
    prependOnceListener: any;
    eventNames: any;
    addListener: any;
    removeListener: any;
    emit: any;
    conversationId: string;
    peerConnection: RTCPeerConnection;
    id: string;
    fromUserId: string;
    meetingId?: string;
    originalRoomJid?: string;
    sessionType: SessionTypes;
    ignoreHostCandidatesFromRemote: boolean;
    allowIPv6: boolean;
    allowTCP: boolean;
    dataChannel?: RTCDataChannel;
    reinvite: boolean;
    privAnswerMode?: 'Auto';
    constructor(params: IStanzaMediaSessionParams);
    private getLogDetails;
    onTransportInfo(changes: Jingle, cb: ActionCallback): Promise<void>;
    protected _log(level: string, message: string, ...data: any[]): void;
    end(reason?: JingleReasonCondition | JingleReason, silent?: boolean): Promise<void>;
    setupStatsGatherer(): void;
    onIceStateChange(): void;
    onConnectionStateChange(): void;
    onIceCandidateError(ev: Event): void;
    onIceCandidate(e: RTCPeerConnectionIceEvent): void;
    onIceEndOfCandidates(): void;
    addTrack(track: MediaStreamTrack, stream?: MediaStream): Promise<void>;
    _setupDataChannel(): void;
    _handleDataChannelMessage(event: MessageEvent): void;
}
