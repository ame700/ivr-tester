/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter$5(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  var f = n.default;
	if (typeof f == "function") {
		var a = function () {
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var global$1 = (typeof global !== "undefined" ? global :
  typeof self !== "undefined" ? self :
  typeof window !== "undefined" ? window : {});

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue$2 = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue$2 = currentQueue.concat(queue$2);
    } else {
        queueIndex = -1;
    }
    if (queue$2.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue$2.length;
    while(len) {
        currentQueue = queue$2;
        queue$2 = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue$2.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick$2(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue$2.push(new Item(fun, args));
    if (queue$2.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform$2 = 'browser';
var browser$1 = true;
var env = {};
var argv = [];
var version$1 = ''; // empty string to avoid regexp issues
var versions$2 = {};
var release = {};
var config = {};

function noop$1() {}

var on = noop$1;
var addListener = noop$1;
var once$1 = noop$1;
var off = noop$1;
var removeListener = noop$1;
var removeAllListeners = noop$1;
var emit = noop$1;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd () { return '/' }
function chdir (dir) {
    throw new Error('process.chdir is not supported');
}function umask() { return 0; }

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
var performanceNow =
  performance.now        ||
  performance.mozNow     ||
  performance.msNow      ||
  performance.oNow       ||
  performance.webkitNow  ||
  function(){ return (new Date()).getTime() };

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance)*1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor((clocktime%1)*1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds<0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds,nanoseconds]
}

var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}

var browser$1$1 = {
  nextTick: nextTick$2,
  title: title,
  browser: browser$1,
  env: env,
  argv: argv,
  version: version$1,
  versions: versions$2,
  on: on,
  addListener: addListener,
  once: once$1,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform$2,
  release: release,
  config: config,
  uptime: uptime
};

/**
 * A hierarchical token bucket for rate limiting. See
 * http://en.wikipedia.org/wiki/Token_bucket for more information.
 * @author John Hurliman <jhurliman@cull.tv>
 *
 * @param {Number} bucketSize Maximum number of tokens to hold in the bucket.
 *  Also known as the burst rate.
 * @param {Number} tokensPerInterval Number of tokens to drip into the bucket
 *  over the course of one interval.
 * @param {String|Number} interval The interval length in milliseconds, or as
 *  one of the following strings: 'second', 'minute', 'hour', day'.
 * @param {TokenBucket} parentBucket Optional. A token bucket that will act as
 *  the parent of this bucket.
 */
var TokenBucket$1 = function(bucketSize, tokensPerInterval, interval, parentBucket) {
  this.bucketSize = bucketSize;
  this.tokensPerInterval = tokensPerInterval;

  if (typeof interval === 'string') {
    switch (interval) {
      case 'sec': case 'second':
        this.interval = 1000; break;
      case 'min': case 'minute':
        this.interval = 1000 * 60; break;
      case 'hr': case 'hour':
        this.interval = 1000 * 60 * 60; break;
      case 'day':
        this.interval = 1000 * 60 * 60 * 24; break;
      default:
        throw new Error('Invaid interval ' + interval);
    }
  } else {
    this.interval = interval;
  }

  this.parentBucket = parentBucket;
  this.content = 0;
  this.lastDrip = +new Date();
};

TokenBucket$1.prototype = {
  bucketSize: 1,
  tokensPerInterval: 1,
  interval: 1000,
  parentBucket: null,
  content: 0,
  lastDrip: 0,

  /**
   * Remove the requested number of tokens and fire the given callback. If the
   * bucket (and any parent buckets) contains enough tokens this will happen
   * immediately. Otherwise, the removal and callback will happen when enough
   * tokens become available.
   * @param {Number} count The number of tokens to remove.
   * @param {Function} callback(err, remainingTokens)
   * @returns {Boolean} True if the callback was fired immediately, otherwise
   *  false.
   */
  removeTokens: function(count, callback) {
    var self = this;

    // Is this an infinite size bucket?
    if (!this.bucketSize) {
      browser$1$1.nextTick(callback.bind(null, null, count, Number.POSITIVE_INFINITY));
      return true;
    }

    // Make sure the bucket can hold the requested number of tokens
    if (count > this.bucketSize) {
      browser$1$1.nextTick(callback.bind(null, 'Requested tokens ' + count + ' exceeds bucket size ' +
        this.bucketSize, null));
      return false;
    }

    // Drip new tokens into this bucket
    this.drip();

    // If we don't have enough tokens in this bucket, come back later
    if (count > this.content)
      return comeBackLater();

    if (this.parentBucket) {
      // Remove the requested from the parent bucket first
      return this.parentBucket.removeTokens(count, function(err, remainingTokens) {
        if (err) return callback(err, null);

        // Check that we still have enough tokens in this bucket
        if (count > self.content)
          return comeBackLater();

        // Tokens were removed from the parent bucket, now remove them from
        // this bucket and fire the callback. Note that we look at the current
        // bucket and parent bucket's remaining tokens and return the smaller
        // of the two values
        self.content -= count;
        callback(null, Math.min(remainingTokens, self.content));
      });
    } else {
      // Remove the requested tokens from this bucket and fire the callback
      this.content -= count;
      browser$1$1.nextTick(callback.bind(null, null, this.content));
      return true;
    }

    function comeBackLater() {
      // How long do we need to wait to make up the difference in tokens?
      var waitInterval = Math.ceil(
        (count - self.content) * (self.interval / self.tokensPerInterval));
      setTimeout(function() { self.removeTokens(count, callback); }, waitInterval);
      return false;
    }
  },

  /**
   * Attempt to remove the requested number of tokens and return immediately.
   * If the bucket (and any parent buckets) contains enough tokens this will
   * return true, otherwise false is returned.
   * @param {Number} count The number of tokens to remove.
   * @param {Boolean} True if the tokens were successfully removed, otherwise
   *  false.
   */
  tryRemoveTokens: function(count) {
    // Is this an infinite size bucket?
    if (!this.bucketSize)
      return true;

    // Make sure the bucket can hold the requested number of tokens
    if (count > this.bucketSize)
      return false;

    // Drip new tokens into this bucket
    this.drip();

    // If we don't have enough tokens in this bucket, return false
    if (count > this.content)
      return false;

    // Try to remove the requested tokens from the parent bucket
    if (this.parentBucket && !this.parentBucket.tryRemoveTokens(count))
      return false;

    // Remove the requested tokens from this bucket and return
    this.content -= count;
    return true;
  },

  /**
   * Add any new tokens to the bucket since the last drip.
   * @returns {Boolean} True if new tokens were added, otherwise false.
   */
  drip: function() {
    if (!this.tokensPerInterval) {
      this.content = this.bucketSize;
      return;
    }

    var now = +new Date();
    var deltaMS = Math.max(now - this.lastDrip, 0);
    this.lastDrip = now;

    var dripAmount = deltaMS * (this.tokensPerInterval / this.interval);
    this.content = Math.min(this.content + dripAmount, this.bucketSize);
  }
};

var tokenBucket = TokenBucket$1;

var TokenBucket = tokenBucket;

var domain;

// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers() {}
EventHandlers.prototype = Object.create(null);

function EventEmitter() {
  EventEmitter.init.call(this);
}

// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.usingDomains = false;

EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

EventEmitter.init = function() {
  this.domain = null;
  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active ) ;
  }

  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  domain = this.domain;

  // If there is no 'error' event listener then throw.
  if (doError) {
    er = arguments[1];
    if (domain) {
      if (!er)
        er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] :
                                          [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + type + ' listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }

  return target;
}
function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function _onceWrap(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || (list.listener && list.listener === listener)) {
        if (--this._eventsCount === 0)
          this._events = new EventHandlers();
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length; i-- > 0;) {
          if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (list.length === 1) {
          list[0] = undefined;
          if (--this._eventsCount === 0) {
            this._events = new EventHandlers();
            return this;
          } else {
            delete events[type];
          }
        } else {
          spliceOne(list, position);
        }

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };
    
// Alias for removeListener added in NodeJS 10.0
// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
EventEmitter.prototype.off = function(type, listener){
    return this.removeListener(type, listener);
};

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        for (var i = 0, key; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = new EventHandlers();
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        do {
          this.removeListener(type, listeners[listeners.length - 1]);
        } while (listeners[0]);
      }

      return this;
    };

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;

  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === 'function')
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners(evlistener);
  }

  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, i) {
  var copy = new Array(i);
  while (i--)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

var _polyfillNode_events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': EventEmitter,
    EventEmitter: EventEmitter
});

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

var safeJsonStringify = {exports: {}};

var hasProp = Object.prototype.hasOwnProperty;

function throwsMessage(err) {
	return '[Throws: ' + (err ? err.message : '?') + ']';
}

function safeGetValueFromPropertyOnObject(obj, property) {
	if (hasProp.call(obj, property)) {
		try {
			return obj[property];
		}
		catch (err) {
			return throwsMessage(err);
		}
	}

	return obj[property];
}

function ensureProperties(obj) {
	var seen = [ ]; // store references to objects we have seen before

	function visit(obj) {
		if (obj === null || typeof obj !== 'object') {
			return obj;
		}

		if (seen.indexOf(obj) !== -1) {
			return '[Circular]';
		}
		seen.push(obj);

		if (typeof obj.toJSON === 'function') {
			try {
				var fResult = visit(obj.toJSON());
				seen.pop();
				return fResult;
			} catch(err) {
				return throwsMessage(err);
			}
		}

		if (Array.isArray(obj)) {
			var aResult = obj.map(visit);
			seen.pop();
			return aResult;
		}

		var result = Object.keys(obj).reduce(function(result, prop) {
			// prevent faulty defined getter properties
			result[prop] = visit(safeGetValueFromPropertyOnObject(obj, prop));
			return result;
		}, {});
		seen.pop();
		return result;
	}
	return visit(obj);
}

safeJsonStringify.exports = function(data, replacer, space) {
	return JSON.stringify(ensureProperties(data), replacer, space);
};

safeJsonStringify.exports.ensureProperties = ensureProperties;

const DEEP_CLONE_MAX_DEPTH = 10;
const calculateLogMessageSize = function (trace) {
    const str = JSON.stringify(trace);
    // http://stackoverflow.com/questions/5515869/string-length-in-bytes-in-javascript
    // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
    const m = encodeURIComponent(str).match(/%[89ABab]/g);
    return str.length + (m ? m.length : 0);
};
const getDeferred = () => {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return { promise, resolve, reject };
};
const deepClone = function deepClone(itemToBeCloned, depth = DEEP_CLONE_MAX_DEPTH) {
    if (depth === 0) {
        return null;
    }
    /* eslint-disable guard-for-in */
    if (itemToBeCloned) {
        if (Array.isArray(itemToBeCloned)) {
            const clonedArray = [];
            for (let i = 0; i < itemToBeCloned.length; i++) {
                clonedArray[i] = deepClone(itemToBeCloned[i], depth - 1);
            }
            return clonedArray;
        }
        if (typeof itemToBeCloned === 'object') {
            const clonedObject = Object.assign({}, itemToBeCloned);
            for (const key in itemToBeCloned) {
                try {
                    clonedObject[key] = deepClone(itemToBeCloned[key], depth - 1);
                }
                catch (e) {
                    /* istanbul ignore next */
                    console.debug('WARN: Failed cloning key on object, ignoring', { key, object: itemToBeCloned });
                }
            }
            return clonedObject;
        }
    }
    return itemToBeCloned;
    /* eslint-enable guard-for-in */
};

function bind$1(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {toString: toString$1} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString$1.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
};

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray: isArray$1} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer$1(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject$1 = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject$1(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim$1 = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray$1(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global$1)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray$1(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind$1(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray$1(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };

  isArray$1(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
};

const noop = () => {};

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};

const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0];
  }

  return str;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject$1(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray$1(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  };

  return visit(obj, 0);
};

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject$1(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({source, data}) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  isFunction(_global.postMessage)
);

const asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(_global) : ( typeof browser$1$1 !== 'undefined' && browser$1$1.nextTick || _setImmediate);

// *********************

var utils$1 = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer: isBuffer$1,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject: isObject$1,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim: trim$1,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};

var lookup$1 = [];
var revLookup$1 = [];
var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init () {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup$1[i] = code[i];
    revLookup$1[code.charCodeAt(i)] = i;
  }

  revLookup$1['-'.charCodeAt(0)] = 62;
  revLookup$1['_'.charCodeAt(0)] = 63;
}

function toByteArray$1 (b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr$1(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64$1 (num) {
  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
}

function encodeChunk$1 (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64$1(tmp));
  }
  return output.join('')
}

function fromByteArray$1 (uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup$1[tmp >> 2];
    output += lookup$1[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup$1[tmp >> 10];
    output += lookup$1[(tmp >> 4) & 0x3F];
    output += lookup$1[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}

function read (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

function write (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;

var isArray = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
  ? global$1.TYPED_ARRAY_SUPPORT
  : true;

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr
};

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
};

function allocUnsafe (that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
};

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength$1(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that
}

function fromObject (that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len);
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}
Buffer.isBuffer = isBuffer;
function internalIsBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength$1 (string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength$1;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length | 0;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.equals = function equals (b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>'
};

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray$1(buf)
  } else {
    return fromByteArray$1(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = (value & 0xff);
  return offset + 1
};

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}


function base64ToBytes (str) {
  return toByteArray$1(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}


// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
}

function isFastBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
}

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError$1(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils$1.inherits(AxiosError$1, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype$1 = AxiosError$1.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError$1, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError$1.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);

  utils$1.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError$1.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

// eslint-disable-next-line strict
var httpAdapter = null;

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData$1(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$1.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);

  if (!utils$1.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils$1.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
    }

    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils$1.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils$1.isArray(value) && isFlatArray(value)) ||
        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils$1.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils$1.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$2(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && toFormData$1(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$2);
  } : encode$2;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode$1(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode$1;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ?
      params.toString() :
      new AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

var InterceptorManager$1 = InterceptorManager;

var transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

var platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: Blob$1
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';

var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasBrowserEnv: hasBrowserEnv,
    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
    hasStandardBrowserEnv: hasStandardBrowserEnv,
    origin: origin
});

var platform = {
  ...utils,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData$1(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};

    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: transitionalDefaults,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$1.isObject(data);

    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils$1.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }

    if (utils$1.isArrayBuffer(data) ||
      utils$1.isBuffer(data) ||
      utils$1.isStream(data) ||
      utils$1.isFile(data) ||
      utils$1.isBlob(data) ||
      utils$1.isReadableStream(data)
    ) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return toFormData$1(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
      return data;
    }

    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

var defaults$1 = defaults;

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$1.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$1.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils$1.isString(value)) return;

  if (utils$1.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils$1.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders$1 {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils$1.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$1.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils$1.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$1.reduceDescriptors(AxiosHeaders$1.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils$1.freezeMethods(AxiosHeaders$1);

var AxiosHeaders$2 = AxiosHeaders$1;

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults$1;
  const context = response || config;
  const headers = AxiosHeaders$2.from(context.headers);
  let data = context.data;

  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

function isCancel$1(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError$1(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils$1.inherits(CanceledError$1, AxiosError$1, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError$1(
      'Request failed with status code ' + response.status,
      [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle$1(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);

  return throttle$1(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
};

const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};

const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));

var isURLSameOrigin = platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (utils$1.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })();

var cookies = platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils$1.isString(path) && cookie.push('path=' + path);

      utils$1.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  };

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

const headersToObject = (thing) => thing instanceof AxiosHeaders$2 ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig$1(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({caseless}, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

var resolveConfig = (config) => {
  const newConfig = mergeConfig$1({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = AxiosHeaders$2.from(headers);

  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (utils$1.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
};

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

var xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$2.from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders$2.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError$1(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$1.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(_config.url);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
};

const composeSignals = (signals, timeout) => {
  let controller = new AbortController();

  let aborted;

  const onabort = function (cancel) {
    if (!aborted) {
      aborted = true;
      unsubscribe();
      const err = cancel instanceof Error ? cancel : this.reason;
      controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
    }
  };

  let timer = timeout && setTimeout(() => {
    onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
  }, timeout);

  const unsubscribe = () => {
    if (signals) {
      timer && clearTimeout(timer);
      timer = null;
      signals.forEach(signal => {
        signal &&
        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));
      });
      signals = null;
    }
  };

  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));

  const {signal} = controller;

  signal.unsubscribe = unsubscribe;

  return [signal, () => {
    timer && clearTimeout(timer);
    timer = null;
  }];
};

var composeSignals$1 = composeSignals;

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};

const readBytes = async function* (iterable, chunkSize, encode) {
  for await (const chunk of iterable) {
    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);
  }
};

const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {
  const iterator = readBytes(stream, chunkSize, encode);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
};

const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
};

const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported &&
  test(() => utils$1.isReadableStream(new Response('').body));


const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
      });
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(utils$1.isBlob(body)) {
    return body.size;
  }

  if(utils$1.isSpecCompliantForm(body)) {
    return (await new Request(body).arrayBuffer()).byteLength;
  }

  if(utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(utils$1.isURLSearchParams(body)) {
    body = body + '';
  }

  if(utils$1.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};

const resolveBodyLength = async (headers, body) => {
  const length = utils$1.toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
};

var fetchAdapter = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let [composedSignal, stopTimeout] = (signal || cancelToken || timeout) ?
    composeSignals$1([signal, cancelToken], timeout) : [];

  let finished, request;

  const onFinish = () => {
    !finished && setTimeout(() => {
      composedSignal && composedSignal.unsubscribe();
    });

    finished = true;
  };

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader);
      }

      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );

        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush, encodeText);
      }
    }

    if (!utils$1.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: withCredentials
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = utils$1.toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];

      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          isStreamResponse && onFinish();
        }, encodeText),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && onFinish();

    stopTimeout && stopTimeout();

    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders$2.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    })
  } catch (err) {
    onFinish();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw AxiosError$1.from(err, err && err.code, config, request);
  }
});

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: fetchAdapter
};

utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;

var adapters = {
  getAdapter: (adapters) => {
    adapters = utils$1.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new AxiosError$1(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new AxiosError$1(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError$1(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = AxiosHeaders$2.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = AxiosHeaders$2.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel$1(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$2.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

const VERSION$1 = "1.7.4";

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError$1(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError$1.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
    }
  }
}

var validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios$1 {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager$1(),
      response: new InterceptorManager$1()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack;
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig$1(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils$1.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = AxiosHeaders$2.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios$1.prototype[method] = generateHTTPMethod();

  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
});

var Axios$2 = Axios$1;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken$1 {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new CanceledError$1(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken$1(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

var CancelToken$2 = CancelToken$1;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread$1(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError$1(payload) {
  return utils$1.isObject(payload) && (payload.isAxiosError === true);
}

const HttpStatusCode$1 = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
  HttpStatusCode$1[value] = key;
});

var HttpStatusCode$2 = HttpStatusCode$1;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios$2(defaultConfig);
  const instance = bind$1(Axios$2.prototype.request, context);

  // Copy axios.prototype to instance
  utils$1.extend(instance, Axios$2.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils$1.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults$1);

// Expose Axios class to allow class inheritance
axios.Axios = Axios$2;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError$1;
axios.CancelToken = CancelToken$2;
axios.isCancel = isCancel$1;
axios.VERSION = VERSION$1;
axios.toFormData = toFormData$1;

// Expose AxiosError class
axios.AxiosError = AxiosError$1;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread$1;

// Expose isAxiosError
axios.isAxiosError = isAxiosError$1;

// Expose mergeConfig
axios.mergeConfig = mergeConfig$1;

axios.AxiosHeaders = AxiosHeaders$2;

axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = HttpStatusCode$2;

axios.default = axios;

// this module should only have a default export
var axios$1 = axios;

// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const {
  Axios,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken,
  VERSION,
  all,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = axios$1;

var backoff = {};

var options = {};

var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
Object.defineProperty(options, "__esModule", { value: true });
var defaultOptions = {
    delayFirstAttempt: false,
    jitter: "none",
    maxDelay: Infinity,
    numOfAttempts: 10,
    retry: function () { return true; },
    startingDelay: 100,
    timeMultiple: 2
};
function getSanitizedOptions(options) {
    var sanitized = __assign$1(__assign$1({}, defaultOptions), options);
    if (sanitized.numOfAttempts < 1) {
        sanitized.numOfAttempts = 1;
    }
    return sanitized;
}
options.getSanitizedOptions = getSanitizedOptions;

var delay_factory = {};

var skipFirst_delay = {};

var delay_base = {};

var jitter_factory = {};

var full_jitter = {};

Object.defineProperty(full_jitter, "__esModule", { value: true });
function fullJitter(delay) {
    var jitteredDelay = Math.random() * delay;
    return Math.round(jitteredDelay);
}
full_jitter.fullJitter = fullJitter;

var no_jitter = {};

Object.defineProperty(no_jitter, "__esModule", { value: true });
function noJitter(delay) {
    return delay;
}
no_jitter.noJitter = noJitter;

Object.defineProperty(jitter_factory, "__esModule", { value: true });
var full_jitter_1 = full_jitter;
var no_jitter_1 = no_jitter;
function JitterFactory(options) {
    switch (options.jitter) {
        case "full":
            return full_jitter_1.fullJitter;
        case "none":
        default:
            return no_jitter_1.noJitter;
    }
}
jitter_factory.JitterFactory = JitterFactory;

Object.defineProperty(delay_base, "__esModule", { value: true });
var jitter_factory_1 = jitter_factory;
var Delay = /** @class */ (function () {
    function Delay(options) {
        this.options = options;
        this.attempt = 0;
    }
    Delay.prototype.apply = function () {
        var _this = this;
        return new Promise(function (resolve) { return setTimeout(resolve, _this.jitteredDelay); });
    };
    Delay.prototype.setAttemptNumber = function (attempt) {
        this.attempt = attempt;
    };
    Object.defineProperty(Delay.prototype, "jitteredDelay", {
        get: function () {
            var jitter = jitter_factory_1.JitterFactory(this.options);
            return jitter(this.delay);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delay.prototype, "delay", {
        get: function () {
            var constant = this.options.startingDelay;
            var base = this.options.timeMultiple;
            var power = this.numOfDelayedAttempts;
            var delay = constant * Math.pow(base, power);
            return Math.min(delay, this.options.maxDelay);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delay.prototype, "numOfDelayedAttempts", {
        get: function () {
            return this.attempt;
        },
        enumerable: true,
        configurable: true
    });
    return Delay;
}());
delay_base.Delay = Delay;

var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter$4 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator$2 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(skipFirst_delay, "__esModule", { value: true });
var delay_base_1$1 = delay_base;
var SkipFirstDelay = /** @class */ (function (_super) {
    __extends$2(SkipFirstDelay, _super);
    function SkipFirstDelay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SkipFirstDelay.prototype.apply = function () {
        return __awaiter$4(this, void 0, void 0, function () {
            return __generator$2(this, function (_a) {
                return [2 /*return*/, this.isFirstAttempt ? true : _super.prototype.apply.call(this)];
            });
        });
    };
    Object.defineProperty(SkipFirstDelay.prototype, "isFirstAttempt", {
        get: function () {
            return this.attempt === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkipFirstDelay.prototype, "numOfDelayedAttempts", {
        get: function () {
            return this.attempt - 1;
        },
        enumerable: true,
        configurable: true
    });
    return SkipFirstDelay;
}(delay_base_1$1.Delay));
skipFirst_delay.SkipFirstDelay = SkipFirstDelay;

var always_delay = {};

var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(always_delay, "__esModule", { value: true });
var delay_base_1 = delay_base;
var AlwaysDelay = /** @class */ (function (_super) {
    __extends$1(AlwaysDelay, _super);
    function AlwaysDelay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AlwaysDelay;
}(delay_base_1.Delay));
always_delay.AlwaysDelay = AlwaysDelay;

Object.defineProperty(delay_factory, "__esModule", { value: true });
var skip_first_delay_1 = skipFirst_delay;
var always_delay_1 = always_delay;
function DelayFactory(options, attempt) {
    var delay = initDelayClass(options);
    delay.setAttemptNumber(attempt);
    return delay;
}
delay_factory.DelayFactory = DelayFactory;
function initDelayClass(options) {
    if (!options.delayFirstAttempt) {
        return new skip_first_delay_1.SkipFirstDelay(options);
    }
    return new always_delay_1.AlwaysDelay(options);
}

var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator$1 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(backoff, "__esModule", { value: true });
var options_1 = options;
var delay_factory_1 = delay_factory;
function backOff(request, options) {
    if (options === void 0) { options = {}; }
    return __awaiter$3(this, void 0, void 0, function () {
        var sanitizedOptions, backOff;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sanitizedOptions = options_1.getSanitizedOptions(options);
                    backOff = new BackOff(request, sanitizedOptions);
                    return [4 /*yield*/, backOff.execute()];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
var backOff_1 = backoff.backOff = backOff;
var BackOff = /** @class */ (function () {
    function BackOff(request, options) {
        this.request = request;
        this.options = options;
        this.attemptNumber = 0;
    }
    BackOff.prototype.execute = function () {
        return __awaiter$3(this, void 0, void 0, function () {
            var e_1, shouldRetry;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.attemptLimitReached) return [3 /*break*/, 7];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 6]);
                        return [4 /*yield*/, this.applyDelay()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.request()];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_1 = _a.sent();
                        this.attemptNumber++;
                        return [4 /*yield*/, this.options.retry(e_1, this.attemptNumber)];
                    case 5:
                        shouldRetry = _a.sent();
                        if (!shouldRetry || this.attemptLimitReached) {
                            throw e_1;
                        }
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 0];
                    case 7: throw new Error("Something went wrong.");
                }
            });
        });
    };
    Object.defineProperty(BackOff.prototype, "attemptLimitReached", {
        get: function () {
            return this.attemptNumber >= this.options.numOfAttempts;
        },
        enumerable: true,
        configurable: true
    });
    BackOff.prototype.applyDelay = function () {
        return __awaiter$3(this, void 0, void 0, function () {
            var delay;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        delay = delay_factory_1.DelayFactory(this.options, this.attemptNumber);
                        return [4 /*yield*/, delay.apply()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return BackOff;
}());

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);

  // Clone the date
  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      // eslint-disable-next-line no-console
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return date;
  }
  var dayOfMonth = date.getDate();

  // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

/**
 * @name add
 * @category Common Helpers
 * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.
 *
 * @description
 * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 *
 * | Key            | Description                        |
 * |----------------|------------------------------------|
 * | years          | Amount of years to be added        |
 * | months         | Amount of months to be added       |
 * | weeks          | Amount of weeks to be added        |
 * | days           | Amount of days to be added         |
 * | hours          | Amount of hours to be added        |
 * | minutes        | Amount of minutes to be added      |
 * | seconds        | Amount of seconds to be added      |
 *
 * All values default to 0
 *
 * @returns {Date} the new date with the seconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add the following duration to 1 September 2014, 10:19:50
 * const result = add(new Date(2014, 8, 1, 10, 19, 50), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30,
 * })
 * //=> Thu Jun 15 2017 15:29:20
 */
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;

  // Add years and months
  var date = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;

  // Add weeks and days
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;

  // Add days, hours, minutes and seconds
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1000;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const SAVED_REQUESTS_KEY = 'gc_logger_requests';
const STATUS_CODES_TO_RETRY_IMMEDIATELY = [
    408,
    429,
    500,
    503,
    504
];
const STATUS_CODES_TO_RETRY_LATER = [
    401
];
const logUploaderMap = new Map();
const getOrCreateLogUploader = (url, debugMode = false, useUniqueLogUploader, customHeaders) => {
    if (useUniqueLogUploader) {
        return new LogUploader(url, debugMode, customHeaders);
    }
    let uploader = logUploaderMap.get(url);
    /* if we don't have an uploader for this url, create one */
    if (!uploader) {
        uploader = new LogUploader(url, debugMode, customHeaders);
        logUploaderMap.set(url, uploader);
    }
    return uploader;
};
class LogUploader {
    constructor(url, debugMode = false, customHeaders) {
        this.url = url;
        this.debugMode = debugMode;
        this.customHeaders = customHeaders;
        this.sendQueue = [];
    }
    postLogsToEndpoint(requestParams) {
        const deferred = getDeferred();
        this.sendQueue.push({ requestParams, deferred });
        this.sendNextQueuedLogToServer();
        this.debug('adding requestParams to sendQueue', {
            requestParams,
            updatedSendQueue: this.sendQueue.map(i => i.requestParams),
            hasPendingRequest: !!this.pendingRequest
        });
        return deferred.promise;
    }
    postLogsToEndpointInstantly(requestParams, opts) {
        return __awaiter$2(this, void 0, void 0, function* () {
            this.debug('sending request instantly', { requestParams, sendQueue: this.sendQueue.map(i => i.requestParams) });
            if (!navigator.onLine) {
                return this.saveRequestForLater(requestParams);
            }
            try {
                yield this.sendPostRequest(requestParams);
            }
            catch (e) {
                if (opts === null || opts === void 0 ? void 0 : opts.saveOnFailure) {
                    this.saveRequestForLater(requestParams);
                }
                throw e;
            }
        });
    }
    saveRequestForLater(request) {
        const savedRequests = this.getSavedRequests() || [];
        const sanitizedRequest = Object.assign({}, request);
        delete sanitizedRequest.accessToken;
        savedRequests.push(sanitizedRequest);
        window.localStorage.setItem(SAVED_REQUESTS_KEY, JSON.stringify(savedRequests));
    }
    getSavedRequests() {
        const jsonStr = window.localStorage.getItem(SAVED_REQUESTS_KEY);
        if (jsonStr) {
            try {
                return JSON.parse(jsonStr);
            }
            catch (e) {
                console.error('Failed to parse saved messages, ignoring', { savedMessagesStr: jsonStr });
            }
        }
    }
    sendEntireQueue() {
        this.debug('sending all queued requests instantly to clear out sendQueue', {
            sendQueue: this.sendQueue.map(i => i.requestParams)
        });
        const promises = [];
        let queueItem;
        /* eslint-disable-next-line no-cond-assign */
        while (queueItem = this.sendQueue.shift()) {
            promises.push(this.postLogsToEndpointInstantly(queueItem.requestParams, { saveOnFailure: true }));
        }
        /* don't want this to be async because this is called from the window 'unload' event */
        return promises;
    }
    resetSendQueue() {
        this.debug('reseting send queue without sending currently queued data', { queueLength: this.sendQueue.length });
        this.sendQueue = [];
    }
    sendNextQueuedLogToServer() {
        return __awaiter$2(this, void 0, void 0, function* () {
            if (this.pendingRequest || this.sendQueue.length === 0) {
                this.debug('sendNextQueuedLogToServer() but not sending request', {
                    hasPendingRequest: !!this.pendingRequest,
                    sendQueueLength: this.sendQueue.length
                });
                return;
            }
            /* don't remove the item from the queue until it is not longer being sent (this includes retries) */
            const queueItem = this.sendQueue.shift(); // `undefined` check happens above
            queueItem.deferred.promise.finally(() => {
                this.debug('queue item completed. removing from queue and resetting send queue', {
                    queueItemRequestParams: queueItem.requestParams, updatedSendQueue: this.sendQueue.map(i => i.requestParams)
                });
                /* reset state and send the next item in the queue */
                this.pendingRequest = undefined;
                this.sendNextQueuedLogToServer();
            });
            this.pendingRequest = queueItem;
            this.debug('sending logs to server', { queueItem: queueItem.requestParams, sendQueue: this.sendQueue.map(i => i.requestParams) });
            // return backOff(this.sendPostRequest.bind(this, queueItem.requestParams), {
            return backOff_1(() => this.backoffFn(queueItem.requestParams), {
                retry: (err) => {
                    var _a, _b, _c, _d, _e;
                    const status = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status;
                    const code = err === null || err === void 0 ? void 0 : err.code;
                    // This *should* be an axios error according to typings, but it appears this could be an AxiosError *or* and XmlHttpRequest
                    // we'll check both to be safe
                    const newRetryAfter = ((_c = (_b = err.response) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c['retry-after']) || ((_e = (_d = err.response) === null || _d === void 0 ? void 0 : _d.getResponseHeader) === null || _e === void 0 ? void 0 : _e.call(_d, 'retry-after'));
                    if (newRetryAfter) {
                        const newRetryAfterDate = add(new Date(), { seconds: parseInt(newRetryAfter, 10) });
                        if (!this.retryAfter || isAfter(newRetryAfterDate, this.retryAfter)) {
                            this.retryAfter = newRetryAfterDate;
                        }
                    }
                    // we get a "ERR_NETWORK" in the case of a network blip failure. if this happens, we will want to try again.
                    // this is akin to not getting a response at all
                    return navigator.onLine && ((status && STATUS_CODES_TO_RETRY_IMMEDIATELY.includes(status)) || code === "ERR_NETWORK");
                },
                numOfAttempts: 10,
                startingDelay: 0,
                delayFirstAttempt: false,
                maxDelay: 15000
            })
                .then((response) => {
                this.debug('successfully sent logs to server', { requestParams: queueItem.requestParams, response });
                queueItem.deferred.resolve(response);
            })
                .catch(this.handleBackoffError.bind(this, queueItem));
        });
    }
    handleBackoffError(queueItem, error) {
        var _a;
        // there are certain errors we know we don't want to try again, and certain errors/responses that *may* work in the future.
        const status = (_a = error.response) === null || _a === void 0 ? void 0 : _a.status;
        const isRetriableStatus = status && STATUS_CODES_TO_RETRY_IMMEDIATELY.includes(status) || STATUS_CODES_TO_RETRY_LATER.includes(status);
        if (isRetriableStatus || error.code === "ERR_NETWORK") {
            this.debug('Failed to sends logs to the server, moving request to the end of the queue', { requestParams: queueItem.requestParams, error });
            this.saveRequestForLater(queueItem.requestParams);
        }
        else {
            this.debug('ERROR sending logs to server', { requestParams: queueItem.requestParams, error });
        }
        queueItem.deferred.reject(Object.assign(Object.assign({}, error), { id: "rejectionSpot1" }));
    }
    retryAfterTimerCheck() {
        return __awaiter$2(this, void 0, void 0, function* () {
            if (!this.retryAfter) {
                return;
            }
            // if we are past the designated retryAfter date, we are good
            if (isAfter(Date.now(), this.retryAfter)) {
                this.retryAfter = undefined;
                return;
                // else we need to wait *at least* until the new time and check again
            }
            else {
                const timeToWait = differenceInMilliseconds(this.retryAfter, Date.now());
                this.debug('Respecting "retry-after" response header, waiting to send request', { millisecondsToWait: timeToWait });
                yield new Promise(resolve => {
                    setTimeout(() => {
                        resolve(null);
                    }, timeToWait);
                });
                return this.retryAfterTimerCheck();
            }
        });
    }
    backoffFn(requestParams) {
        return __awaiter$2(this, void 0, void 0, function* () {
            // if we get a response with a Retry-After header, we want to wait for the time to elapse before we try again.
            yield this.retryAfterTimerCheck();
            const accessToken = requestParams.accessToken;
            const response = yield this.sendPostRequest(requestParams);
            // add any saved queue items to the queue using the access token
            const savedRequests = this.getSavedRequests();
            if (savedRequests) {
                window.localStorage.removeItem(SAVED_REQUESTS_KEY);
                savedRequests.map(request => {
                    const reqWithToken = Object.assign({ accessToken }, request);
                    // this adds it to the send queue, it doesn't send it immediately
                    this.postLogsToEndpoint(reqWithToken);
                });
            }
            return response;
        });
    }
    sendPostRequest(requestParams) {
        this.debug('issuing POST request', { requestParams });
        const requestBody = Object.assign({}, requestParams);
        delete requestBody.accessToken;
        const headers = Object.assign({ 'authorization': `Bearer ${requestParams.accessToken}`, 'content-type': 'application/json; charset=UTF-8' }, (this.customHeaders || {}));
        return axios$1({
            method: 'post',
            url: this.url,
            responseType: 'text',
            data: requestBody,
            headers,
        });
    }
    debug(message, details) {
        if (this.debugMode) {
            /* tslint:disable-next-line:no-console */
            console.log(`%c [DEBUG:log-uploader] ${message}`, 'color: #32a0a8', deepClone(details));
        }
    }
}

var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const MAX_LOG_SIZE = 14500;
const DEFAULT_UPLOAD_DEBOUNCE = 4000;
class ServerLogger {
    constructor(logger) {
        this.isInitialized = false;
        this.logBuffer = [];
        this.debounceTimer = null;
        this.logger = logger;
        /* if we have all the needed config options, set this up */
        if (!logger.config.url ||
            !logger.config.appVersion) {
            const errMessage = 'Missing `url` and/or `appVersion` config options to set up server logging. ' +
                'Not sending logs to server for this logger instance';
            this.logger.error(errMessage, { providedConfig: logger.config }, { skipServer: true });
            throw new Error(errMessage);
        }
        this.isInitialized = true;
        this.debounceLogUploadTime = logger.config.uploadDebounceTime || DEFAULT_UPLOAD_DEBOUNCE;
        this.logUploader = getOrCreateLogUploader(logger.config.url, logger.config.debugMode, logger.config.useUniqueLogUploader, logger.config.customHeaders);
        window.addEventListener('unload', this.sendAllLogsInstantly.bind(this));
        /* when we stop server logging, we need to clear everything out */
        this.logger.on('onStop', (_reason) => {
            this.debug('`onStop` received. Clearing logBuffer and sendQueue', {
                logBuffer: this.logBuffer,
                sendQueue: this.logUploader.sendQueue
            });
            this.logBuffer = [];
            this.logUploader.resetSendQueue();
        });
    }
    addLogToSend(logLevel, message, details) {
        if (!this.isInitialized) {
            return;
        }
        const logMessage = this.convertToLogMessage(message, details);
        let trace = this.convertToTrace(logLevel, logMessage);
        let traceMessageSize = calculateLogMessageSize(trace);
        /* if the individual message exceeds the max allowed size, truncate it */
        if (traceMessageSize > MAX_LOG_SIZE) {
            const newTrace = this.truncateLog(logLevel, logMessage);
            /* newTrace will be `null` if the truncated trace was still too big */
            if (newTrace === null) {
                this.logger.error('truncated message is too large to send to server. not sending message', {
                    originalTrace: trace,
                    originalTraceSize: calculateLogMessageSize(trace),
                    truncatedTrace: newTrace,
                    truncatedTraceSize: calculateLogMessageSize(newTrace)
                }, { skipServer: true });
                return;
            }
            /* set the trace to our new trunctated trace item */
            traceMessageSize = calculateLogMessageSize(newTrace);
            trace = newTrace;
        }
        /* use the last item in the buffer if it exists, otherwise start with a blank buffer item */
        const useNewBufferItem = !this.logBuffer.length;
        let bufferItem;
        if (useNewBufferItem) {
            bufferItem = {
                size: 0,
                traces: []
            };
        }
        else {
            bufferItem = this.logBuffer[this.logBuffer.length - 1];
        }
        /* if pushing our trace onto the buffer item will be too large, we need a new buffer item */
        const exceedsMaxLogSize = bufferItem.size + traceMessageSize > MAX_LOG_SIZE;
        if (exceedsMaxLogSize) {
            this.debug('`exceedsMaxLogSize` was `true`', {
                logBuffer: this.logBuffer,
                bufferItem,
                incomingTrace: trace,
                incomingTraceSize: traceMessageSize,
                maxAllowedTraceSize: MAX_LOG_SIZE
            });
            this.logBuffer.push({
                size: traceMessageSize,
                traces: [trace]
            });
            /* since we pushed a new item, we need to send immediately */
            this.debug('calling sendLogsToServer(true)', { logBuffer: this.logBuffer });
            this.sendLogsToServer(true);
            return;
        }
        /* else just push onto the buffer */
        bufferItem.size += traceMessageSize;
        bufferItem.traces.push(trace);
        /* if we don't have anything in the buffer, that means we have to push this new item */
        if (useNewBufferItem) {
            this.debug('`this.logBuffer` was empty. pushing new buffer item', { logBuffer: this.logBuffer, bufferItem });
            this.logBuffer.push(bufferItem);
        }
        /* this will setup the debounce timer (if it is not already running) */
        this.debug('calling sendLogsToServer()', { logBuffer: this.logBuffer });
        this.sendLogsToServer();
    }
    sendAllLogsInstantly() {
        /* don't want this to be async because this is called from the window 'unload' event */
        /* this will send any queued up requests */
        return this.logUploader.sendEntireQueue()
            .concat(
        /* this will send any items in the buffer still */
        this.logBuffer.map((item) => this.logUploader.postLogsToEndpointInstantly(this.convertToRequestParams(item.traces.reverse()), { saveOnFailure: true })));
    }
    sendLogsToServer(immediate = false) {
        var _a;
        return __awaiter$1(this, void 0, void 0, function* () {
            if (!this.logBuffer.length) {
                /* clear timer */
                clearTimeout(this.debounceTimer);
                this.debounceTimer = null;
                this.debug('buffer empty, not sending http request');
                return;
            }
            /* if we aren't sending immediately, then setup the timer */
            if (!immediate) {
                if (!this.debounceTimer) {
                    this.debug(`sendLogsToServer() 'immediate' is false. setting up 'debounceTimer' to ${this.debounceLogUploadTime}ms`);
                    /* eslint-disable-next-line @typescript-eslint/no-misused-promises */
                    this.debounceTimer = setTimeout(() => this.sendLogsToServer(true), this.debounceLogUploadTime);
                }
                else {
                    this.debug(`sendLogsToServer() 'immediate' is false. 'debounceTimer' is already running`);
                }
                return;
            }
            /* clear timer */
            clearTimeout(this.debounceTimer);
            this.debounceTimer = null;
            /* grab the first item to send (remove it from the list) */
            const [bufferItem] = this.logBuffer.splice(0, 1);
            try {
                // this.pendingHttpRequest = true;
                this.debug('calling logUploader.postLogsToEndpoint() with', { bufferItem, newLogBuffer: this.logBuffer });
                yield this.logUploader.postLogsToEndpoint(this.convertToRequestParams(bufferItem.traces.reverse()));
            }
            catch (err) {
                this.logger.emit('onError', err);
                this.logger.error('Error sending logs to server', err, { skipServer: true });
                /* no-op: the uploader will attempt reties. if the uploader throws, it means this log isn't going to make to the server */
                /* TODO: figure out why the error structure changed and determine if this is necessary */
                const statusCode = (err === null || err === void 0 ? void 0 : err.status)
                    ? parseInt(err.status, 10)
                    : parseInt((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status, 10);
                if ([401, 403, 404].includes(statusCode)) {
                    this.logger.warn(`received a ${statusCode} from logUploader. stopping logging to server`);
                    this.logger.stopServerLogging();
                }
            }
            finally {
                /* setup the debounce again */
                this.sendLogsToServer();
            }
        });
    }
    truncateLog(logLevel, log) {
        let trace;
        let truncatedTraceSize;
        const originalTraceSize = calculateLogMessageSize(this.convertToTrace(logLevel, log));
        const logCopy = deepClone(log);
        const truncText = '[[TRUNCATED]]';
        if (!logCopy) {
            return null;
        }
        /* first truncate the details */
        logCopy.details = truncText;
        trace = this.convertToTrace(logLevel, logCopy);
        truncatedTraceSize = calculateLogMessageSize(trace);
        if (truncatedTraceSize <= MAX_LOG_SIZE) {
            this.logger.warn('message too large to send to server. truncated log details', {
                originalLog: log,
                truncatedLog: logCopy,
                originalTraceSize,
                truncatedTraceSize,
                maxAllowedTraceSize: MAX_LOG_SIZE
            }, { skipServer: true });
            return trace;
        }
        /* second truncate the message */
        logCopy.message = `${logCopy.message.substr(0, 150)}... ${truncText}`;
        trace = this.convertToTrace(logLevel, logCopy);
        truncatedTraceSize = calculateLogMessageSize(trace);
        if (truncatedTraceSize <= MAX_LOG_SIZE) {
            this.logger.warn('message too large to send to server. truncated log details & log message', {
                originalLog: log,
                truncatedLog: logCopy,
                originalTraceSize,
                truncatedTraceSize,
                maxAllowedTraceSize: MAX_LOG_SIZE
            }, { skipServer: true });
            return trace;
        }
        /* if the truncated trace is _still_ too large, return null because we aren't going to send this to the server */
        return null;
    }
    convertToLogMessage(message, details) {
        const log = {
            clientTime: new Date().toISOString(),
            clientId: this.logger.clientId,
            message,
            details
        };
        const { originAppName, originAppVersion, originAppId } = this.logger.config;
        /* only add these if they are configured */
        if (originAppName) {
            log.originAppName = originAppName;
            log.originAppVersion = originAppVersion;
            log.originAppId = originAppId;
        }
        return log;
    }
    convertToTrace(level, log) {
        return {
            topic: this.logger.config.appName,
            level: level.toUpperCase(),
            message: safeJsonStringify.exports(log)
        };
    }
    convertToRequestParams(traces) {
        return {
            accessToken: this.logger.config.accessToken,
            app: {
                appId: this.logger.config.appName,
                appVersion: this.logger.config.appVersion
            },
            traces
        };
    }
    debug(message, details) {
        if (!this.logger.config.debugMode) {
            return;
        }
        /* tslint:disable-next-line:no-console */
        console.log(`%c [DEBUG:${this.logger.config.appName}] ${message}`, 'color: #32a852', deepClone(details));
    }
}

class Logger extends EventEmitter {
    /* eslint-enable @typescript-eslint/naming-convention */
    constructor(config) {
        super();
        this.defaultFormatter = (logLevel, message, details, messageOptions, next) => {
            if (messageOptions.skipDefaultFormatter) {
                return next();
            }
            if (message instanceof Error) {
                details = details || message;
                message = message.message;
            }
            const prefix = this.config.appName ? `[${this.config.appName}] ` : '';
            message = `${prefix}${message}`;
            next(logLevel, message, details, messageOptions);
        };
        this.logMessage = (logLevel, message, details, messageOptions) => {
            if (!messageOptions.skipSecondaryLogger) {
                try {
                    /* log to secondary logger (default is console) */
                    const params = [message];
                    if (typeof details !== 'undefined') {
                        params.push(this.config.stringify ? safeJsonStringify.exports(details) : details);
                    }
                    /* eslint-disable-next-line prefer-spread */
                    this.secondaryLogger[logLevel].apply(this.secondaryLogger, params);
                }
                catch (error) {
                    /* don't let custom logger errors stop our logger */
                    console.error('Error logging using custom logger passed into `genesys-cloud-client-logger`', { error, secondaryLogger: this.secondaryLogger, message, details, messageOptions });
                }
            }
            /* log to the server */
            if (!messageOptions.skipServer &&
                !this.stopReason &&
                this.serverLogger &&
                this.logRank(logLevel) >= this.logRank(this.config.logLevel)) {
                this.serverLogger.addLogToSend(logLevel, message, details);
            }
        };
        Object.defineProperty(this, 'clientId', {
            value: v4(),
            writable: false
        });
        this.config = Object.assign({}, config);
        this.secondaryLogger = this.config.logger || console;
        delete this.config.logger;
        if (this.logRank(this.config.logLevel) === -1) {
            if (config.logLevel) {
                this.warn(`Invalid log level: "${config.logLevel}". Default "info" will be used instead.`, null, { skipServer: true });
            }
            this.config.logLevel = 'info';
        }
        /* do this for (unofficial) backwards compat */
        if (!config.appName && config.logTopic) {
            this.warn('`logTopic` has been renamed to `appName`. Please use `appName`', null, { skipServer: true });
            this.config.appName = config.logTopic;
        }
        /* default to always set up server logging */
        if (this.config.initializeServerLogging !== false) {
            this.serverLogger = new ServerLogger(this);
        }
        if (this.config.startServerLoggingPaused) {
            this.stopServerLogging();
        }
    }
    get VERSION() {
        return Logger.VERSION;
    }
    setAccessToken(token) {
        this.config.accessToken = token;
        /* if we stopped because of a 401, we will try to start again */
        /* eslint-disable eqeqeq */
        if (this.stopReason == 401) {
            this.startServerLogging();
        }
        /* eslint-enable eqeqeq */
    }
    log(message, details, opts) {
        this.formatMessage('log', message, details, opts);
    }
    debug(message, details, opts) {
        this.formatMessage('debug', message, details, opts);
    }
    info(message, details, opts) {
        this.formatMessage('info', message, details, opts);
    }
    warn(message, details, opts) {
        this.formatMessage('warn', message, details, opts);
    }
    error(message, details, opts) {
        this.formatMessage('error', message, details, opts);
    }
    /**
     * Start sending logs to the server. Only applies if
     * the logger instance was configured with server logging.
     *
     * @returns void
     */
    startServerLogging() {
        this.stopReason = undefined;
        if (!this.serverLogger) {
            return this.warn('`startServerLogging` called but the logger instance is not configured to ' +
                'send logs to the server. Ignoring call to start sending logs to server.', undefined, { skipServer: true });
        }
        this.emit('onStart');
    }
    /**
     * Stop sending logs to the server. Note; this will clear
     * any items that are currently in the buffer. If you wish
     * to send any currently pending log items, use
     * `sendAllLogsInstantly()` before stopping the server loggin.
     *
     * @param reason optional; default `'force'`
     * @returns void
     */
    stopServerLogging(reason = 'force') {
        /* we never want to override a force stop */
        if (this.stopReason === 'force' && reason !== 'force') {
            return;
        }
        this.stopReason = reason;
        this.emit('onStop', reason);
    }
    /**
     * Force send all pending log items to the server.
     *
     * @returns an array of HTTP request promises
     */
    sendAllLogsInstantly() {
        var _a;
        return ((_a = this.serverLogger) === null || _a === void 0 ? void 0 : _a.sendAllLogsInstantly()) || [];
    }
    formatMessage(level, message, details, opts) {
        let formatters = [this.defaultFormatter.bind(this)];
        if (this.config.formatters) {
            formatters = [...this.config.formatters, this.defaultFormatter.bind(this)];
        }
        this.callNextFormatter(formatters, level, message, details, opts);
    }
    callNextFormatter(formatters, level, message, details, opts = {}) {
        const [formatter, ...remainingFormatters] = formatters;
        if (!formatter) {
            return this.logMessage(level, message, details, opts);
        }
        const next = (newLevel, newMessage, newDetails, newOpts) => {
            // next was called with params
            if (typeof newLevel !== 'undefined') {
                this.callNextFormatter(remainingFormatters, newLevel, newMessage, newDetails, newOpts);
            }
            else {
                this.callNextFormatter(remainingFormatters, level, message, details, opts);
            }
        };
        formatter(level, message, details, opts, next);
    }
    logRank(level) {
        switch (level) {
            case 'log':
                return 0;
            case 'debug':
                return 1;
            case 'info':
                return 2;
            case 'warn':
                return 3;
            case 'error':
                return 4;
            default:
                return -1; // for invalid logLevel
        }
    }
}
/* eslint-disable @typescript-eslint/naming-convention */
Logger.VERSION = '4.2.13';

/* istanbul ignore file */
if (!commonjsGlobal) {
    // @ts-ignore
    Object.defineProperty(window, 'crypto', { value: window.crypto || window.msCrypto, writable: false, configurable: false });
}

/* global setTimeout, clearTimeout */

var dist$1 = function debounce(fn) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var lastCallAt = void 0;
  var deferred = void 0;
  var timer = void 0;
  var pendingArgs = [];
  return function debounced() {
    var currentWait = getWait(wait);
    var currentTime = new Date().getTime();

    var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;

    lastCallAt = currentTime;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isCold && options.leading) {
      return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {
        return result[0];
      }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));
    }

    if (deferred) {
      clearTimeout(timer);
    } else {
      deferred = defer();
    }

    pendingArgs.push(args);
    timer = setTimeout(flush.bind(this), currentWait);

    if (options.accumulate) {
      var argsIndex = pendingArgs.length - 1;
      return deferred.promise.then(function (results) {
        return results[argsIndex];
      });
    }

    return deferred.promise;
  };

  function flush() {
    var thisDeferred = deferred;
    clearTimeout(timer);

    Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);

    pendingArgs = [];
    deferred = null;
  }
};

function getWait(wait) {
  return typeof wait === 'function' ? wait() : wait;
}

function defer() {
  var deferred = {};
  deferred.promise = new Promise(function (resolve, reject) {
    deferred.resolve = resolve;
    deferred.reject = reject;
  });
  return deferred;
}

class TimeoutError extends Error {
    constructor(message) {
        super(message);
    }
}

/* istanbul ignore next */
function timeoutPromise$1(fn, timeoutMs, msg, details) {
    return new Promise(function (resolve, reject) {
        const timeout = setTimeout(function () {
            const err = new TimeoutError(`Timeout: ${msg}`);
            err.details = details;
            reject(err);
        }, timeoutMs);
        const done = function (resolvedValue) {
            clearTimeout(timeout);
            resolve(resolvedValue);
        };
        fn(done, reject);
    });
}
function delay(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
function splitIntoIndividualTopics(topicString) {
    const topics = [];
    if (topicString.includes('?')) {
        const split = topicString.split('?');
        const prefix = split[0];
        const postfixes = split[1] && split[1].split('&');
        if (postfixes && postfixes.length) {
            postfixes.forEach(postfix => {
                topics.push(`${prefix}.${postfix}`);
            });
        }
    }
    else {
        topics.push(topicString);
    }
    return topics;
}
const isAcdJid = function (jid) {
    return jid.startsWith('acd-') && !isSoftphoneJid(jid);
};
const isScreenRecordingJid = function (jid) {
    return jid.startsWith('screenrecording-') && !isSoftphoneJid(jid);
};
const isSoftphoneJid = function (jid) {
    if (!jid) {
        return false;
    }
    return !!jid.match(/.*@.*gjoll.*/i);
};
const isVideoJid = function (jid) {
    return !!(jid && jid.match(/@conference/) && !isAcdJid(jid));
};
function retryPromise(promiseFn, 
// if a number is returned, that's how long we will wait before retrying (in milliseconds)
retryFn, retryInterval = 15000, logger = console) {
    let timeout;
    let cancel;
    let complete;
    let tryPromiseFn;
    let _hasCompleted = false;
    const promise = new Promise((resolve, reject) => {
        tryPromiseFn = () => __awaiter$5(this, void 0, void 0, function* () {
            try {
                const val = yield promiseFn();
                complete(val);
            }
            catch (error) {
                let timeToWait = retryInterval;
                const retryValue = retryFn(error);
                if (Number.isInteger(retryValue)) {
                    timeToWait = retryValue;
                }
                if (retryValue !== false) {
                    logger.debug('Retrying promise', error);
                    timeout = setTimeout(tryPromiseFn, timeToWait);
                }
                else {
                    cancel(error);
                }
            }
        });
        complete = (value) => {
            clearTimeout(timeout);
            _hasCompleted = true;
            resolve(value);
        };
        cancel = (reason) => {
            clearTimeout(timeout);
            _hasCompleted = true;
            reject(reason);
        };
        tryPromiseFn();
    });
    return {
        promise,
        cancel,
        complete,
        _id: v4(),
        hasCompleted: () => _hasCompleted
    };
}
// from https://stackoverflow.com/questions/38552003/how-to-decode-jwt-token-in-javascript
const parseJwt = (token) => {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
    return JSON.parse(jsonPayload);
};
function calculatePayloadSize(trace) {
    const str = JSON.stringify(trace);
    // http://stackoverflow.com/questions/5515869/string-length-in-bytes-in-javascript
    // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
    const m = encodeURIComponent(str).match(/%[89ABab]/g);
    return str.length + (m ? m.length : 0);
}
function getUfragFromSdp(sdp) {
    if (!sdp) {
        return null;
    }
    const regex = /a=ice-ufrag:(\S+)/;
    const match = sdp.match(regex);
    return match ? match[1] : null;
}
function getIcePwdFromSdp(sdp) {
    if (!sdp) {
        return null;
    }
    const regex = /a=ice-pwd:(\S+)/;
    const match = sdp.match(regex);
    return match ? match[1] : null;
}
function iceIsDifferent(sdp1, sdp2) {
    return getUfragFromSdp(sdp1) !== getUfragFromSdp(sdp2) || getIcePwdFromSdp(sdp1) !== getIcePwdFromSdp(sdp2);
}
// unsed, but handy. no test coverage until used
// function mergeOptions (destination, provided) {
//   for (var key in provided) {
//     let value = provided[key];
//     if (value instanceof Object) {
//       if (!destination[key]) {
//         destination[key] = {};
//       }
//       mergeOptions(destination[key], value);
//     } else {
//       destination[key] = provided[key];
//     }
//   }
//
//   return destination;
// }

const debounce$1 = dist$1;
const PUBSUB_HOST_DEFAULT = 'notifications.mypurecloud.com';
const MAX_SUBSCRIBABLE_TOPICS = 1000;
const DROPPED_TOPICS_DISPLAY_COUNT = 20;
const DEFAULT_PRIORITY = 0;
function mergeAndDedup(arr1, arr2) {
    return [...arr1, ...arr2].filter((t, i, arr) => arr.indexOf(t) === i);
}
class Notifications {
    constructor(client) {
        this.subscriptions = {};
        this.bulkSubscriptions = {};
        this.topicPriorities = {};
        this.client = client;
        client.on('pubsub:event', this.pubsubEvent.bind(this));
        client.on('connected', this.subscriptionsKeepAlive.bind(this));
        this.debouncedResubscribe = debounce$1(this.resubscribe.bind(this), 100);
    }
    get pubsubHost() {
        try {
            const host = this.client.config.apiHost.replace(/http(s?):\/\//, '');
            return `notifications.${host}`;
        }
        catch (e) {
            return PUBSUB_HOST_DEFAULT;
        }
    }
    handleStanzaInstanceChange(stanza) {
        // we need to resub if we go through a hard reconnect
        const needsToResub = this.stanzaInstance &&
            this.stanzaInstance.id !== stanza.id &&
            this.stanzaInstance.channelId !== stanza.channelId;
        this.stanzaInstance = stanza;
        if (needsToResub) {
            this.client.logger.info('resubscribing due to hard reconnect');
            this.debouncedResubscribe();
        }
    }
    topicHandlers(topic) {
        if (!this.subscriptions[topic]) {
            this.subscriptions[topic] = [];
        }
        return this.subscriptions[topic];
    }
    pubsubEvent({ pubsub }) {
        let topic = pubsub.items.node;
        if (topic.includes('no_longer_subscribed')) {
            topic = 'no_longer_subscribed';
        }
        else if (topic.includes('duplicate_id')) {
            topic = 'duplicate_id';
        }
        const payload = pubsub.items.published[0].content.json;
        const handlers = this.topicHandlers(topic);
        this.client.emit('notify', { topic: topic, data: payload });
        this.client.emit(`notify:${topic}`, payload);
        handlers.forEach((handler) => {
            handler(payload);
        });
    }
    xmppSubscribe(topic) {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (this.topicHandlers(topic).length !== 0 || this.bulkSubscriptions[topic]) {
                return Promise.resolve();
            }
            const subscribe = () => this.stanzaInstance.subscribeToNode(this.pubsubHost, topic);
            if (this.client.connected) {
                return subscribe();
            }
            else {
                return new Promise((resolve, reject) => {
                    this.client.once('connected', () => {
                        return subscribe().then(resolve, reject);
                    });
                });
            }
        });
    }
    xmppUnsubscribe(topic) {
        if (this.topicHandlers(topic).length !== 0 || this.bulkSubscriptions[topic]) {
            return Promise.resolve();
        }
        const unsubscribe = () => this.stanzaInstance.unsubscribeFromNode(this.pubsubHost, topic);
        if (this.client.connected) {
            return unsubscribe();
        }
        else {
            return new Promise((resolve, reject) => {
                this.client.once('connected', () => {
                    return unsubscribe().then(resolve, reject);
                });
            });
        }
    }
    mapCombineTopics(topics) {
        const prefixes = {};
        const precombinedTopics = [];
        const uncombinedTopics = [];
        topics.forEach(t => {
            if (t.includes('?')) {
                precombinedTopics.push({ id: t });
            }
            else {
                uncombinedTopics.push(t);
            }
        });
        uncombinedTopics.map(t => {
            const split = t.split('.');
            const postfix = split.splice(split.length - 1);
            const prefix = split.join('.');
            return { prefix, postfix };
        }).forEach(t => {
            if (prefixes[t.prefix]) {
                prefixes[t.prefix].push(t.postfix);
            }
            else {
                prefixes[t.prefix] = [t.postfix];
            }
        });
        let combinedTopics = [];
        // Max length of 200 in topic names
        // so recursively break them up if the combined length exceeds 200
        const combineTopics = (prefix, postFixes) => {
            const delimiter = postFixes.length === 1 ? '.' : '?';
            const id = `${prefix}${delimiter}${postFixes.join('&')}`;
            if (id.length < 200) {
                combinedTopics.push({ id });
            }
            else if (postFixes.length === 1) {
                this.client.logger.error('Refusing to attempt topic with length > 200', id);
            }
            else {
                combineTopics(prefix, postFixes.slice(0, postFixes.length / 2));
                combineTopics(prefix, postFixes.slice(postFixes.length / 2));
            }
        };
        Object.keys(prefixes).forEach(prefix => {
            const postFixes = prefixes[prefix];
            combineTopics(prefix, postFixes);
        });
        const allTopics = combinedTopics.concat(precombinedTopics);
        return this.truncateTopicList(this.prioritizeTopicList(allTopics));
    }
    prioritizeTopicList(topics) {
        topics.sort((topicA, topicB) => {
            return (this.getTopicPriority(topicB.id) - this.getTopicPriority(topicA.id));
        });
        return topics;
    }
    getTopicPriority(topic, returnDefault = true) {
        const { prefix, postfixes } = this.getTopicParts(topic);
        const oldPriorities = this.topicPriorities[prefix];
        const matches = oldPriorities && Object.keys(oldPriorities).filter(p => postfixes.includes(p)).map(p => oldPriorities[p]);
        const priority = matches && matches.length && matches.reduce((max, current) => current > max ? current : max);
        return returnDefault ? priority || DEFAULT_PRIORITY : priority;
    }
    truncateTopicList(topics) {
        const keptTopics = topics.slice(0, MAX_SUBSCRIBABLE_TOPICS);
        if (topics.length > MAX_SUBSCRIBABLE_TOPICS) {
            let droppedTopics = topics.slice(MAX_SUBSCRIBABLE_TOPICS);
            if (droppedTopics.length > DROPPED_TOPICS_DISPLAY_COUNT) {
                const length = droppedTopics.length - DROPPED_TOPICS_DISPLAY_COUNT;
                droppedTopics = droppedTopics.slice(DROPPED_TOPICS_DISPLAY_COUNT);
                droppedTopics.push(`...and ${length} more`);
            }
            this.client.logger.warn('Too many topics to subscribe to; truncating extra topics', { droppedTopics });
        }
        return keptTopics;
    }
    makeBulkSubscribeRequest(topics, options) {
        const requestOptions = {
            method: options.replace ? 'put' : 'post',
            host: this.client.config.apiHost,
            authToken: this.client.config.authToken,
            data: JSON.stringify(this.mapCombineTopics(topics)),
            logger: this.client.logger
        };
        const channelId = this.stanzaInstance.channelId;
        return this.client.http.requestApi(`notifications/channels/${channelId}/subscriptions`, requestOptions);
    }
    createSubscription(topic, handler) {
        const topics = splitIntoIndividualTopics(topic);
        topics.forEach(t => {
            let handlers = this.topicHandlers(t);
            if (!handlers.includes(handler)) {
                handlers.push(handler);
            }
        });
    }
    removeSubscription(topic, handler) {
        const topics = splitIntoIndividualTopics(topic);
        topics.forEach(t => {
            let handlers = this.topicHandlers(t);
            let handlerIndex = handlers.indexOf(handler);
            if (handlerIndex > -1) {
                handlers.splice(handlerIndex, 1);
            }
            /* if we have removed all our individual handlers, we don't need the topic anymore
              (note: we aren't removing any bulkSubs if they exist for this topic) */
            if (!handlers.length) {
                delete this.subscriptions[t];
            }
        });
    }
    removeTopicPriority(topic) {
        if (this.getTopicPriority(topic, false)) {
            const { prefix, postfixes } = this.getTopicParts(topic);
            postfixes.forEach(postfix => {
                delete this.topicPriorities[prefix][postfix];
            });
            if (!Object.keys(this.topicPriorities[prefix]).length) {
                delete this.topicPriorities[prefix];
            }
        }
    }
    getActiveIndividualTopics() {
        const activeTopics = [];
        const topics = Object.keys(this.subscriptions);
        topics.forEach(topic => {
            if (topic === 'streaming-subscriptions-expiring') {
                return; // this doesn't need subscribed
            }
            const handlers = this.topicHandlers(topic);
            if (handlers.length > 0) {
                activeTopics.push(topic);
            }
        });
        return activeTopics;
    }
    resubscribe() {
        const bulkSubs = Object.keys(this.bulkSubscriptions);
        /* if we don't have bulk or individual subs, we don't need to resubscribe */
        const noTopics = bulkSubs.length + this.getActiveIndividualTopics().length === 0;
        if (noTopics) {
            return Promise.resolve();
        }
        /* only pass in bulk subs with the replace flag – bulkSubscribe() will handle merging our individual topics (see PCM-1846) */
        return this.bulkSubscribe(bulkSubs, { replace: true });
    }
    subscriptionsKeepAlive() {
        const topic = 'streaming-subscriptions-expiring';
        if (this.topicHandlers(topic).length === 0) {
            this.createSubscription(topic, () => {
                this.client.logger.info(`${topic} - Triggering resubscribe.`, { channelId: this.client.config.channelId });
                this.debouncedResubscribe().catch((err) => {
                    const msg = 'Error resubscribing to topics';
                    this.client.logger.error(msg, err);
                    this.client.emit('pubsub:error', { msg, err });
                });
            });
        }
    }
    getTopicParts(topic) {
        const isCombined = topic.includes('?');
        const separator = isCombined ? '?' : '.';
        const split = topic.split(separator);
        const postfix = isCombined ? split[1] : split.splice(split.length - 1);
        const prefix = isCombined ? split[0] : split.join('.');
        let postfixes = [];
        if (isCombined) {
            postfixes = postfix.split('&');
        }
        else {
            postfixes = postfix;
        }
        return { prefix, postfixes };
    }
    setTopicPriorities(priorities = {}) {
        Object.keys(priorities).forEach(priority => {
            const topicParts = this.getTopicParts(priority);
            const oldPriorities = this.topicPriorities[topicParts.prefix];
            const newPriority = priorities[priority];
            if (oldPriorities) {
                topicParts.postfixes.forEach(postfix => {
                    const oldPriority = oldPriorities[postfix];
                    if ((oldPriority && oldPriority < newPriority) || !oldPriority) {
                        oldPriorities[postfix] = newPriority;
                    }
                });
            }
            else {
                const newTopics = topicParts.postfixes.reduce((newTopics, p) => {
                    newTopics[p] = newPriority;
                    return newTopics;
                }, {});
                this.topicPriorities[topicParts.prefix] = newTopics;
            }
        });
    }
    subscribe(topic, handler, immediate, priority) {
        if (priority) {
            this.setTopicPriorities({ [topic]: priority });
        }
        let promise;
        if (!immediate) {
            // let this and any other subscribe/unsubscribe calls roll in, then trigger a whole resubscribe
            promise = this.debouncedResubscribe();
        }
        else {
            promise = this.xmppSubscribe(topic);
        }
        if (handler) {
            this.createSubscription(topic, handler);
        }
        else {
            this.bulkSubscriptions[topic] = true;
        }
        return promise;
    }
    unsubscribe(topic, handler, immediate) {
        if (handler) {
            this.removeSubscription(topic, handler);
        }
        else {
            delete this.bulkSubscriptions[topic];
            delete this.subscriptions[topic];
        }
        this.removeTopicPriority(topic);
        if (!immediate) {
            // let this and any other subscribe/unsubscribe calls roll in, then trigger a whole resubscribe
            return this.debouncedResubscribe();
        }
        return this.xmppUnsubscribe(topic);
    }
    bulkSubscribe(topics, options = { replace: false, force: false }, priorities = {}) {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.setTopicPriorities(priorities);
            let toSubscribe = mergeAndDedup(topics, []);
            if (options.replace && !options.force) {
                // if this is a bulk subscription, but not a forcible one, keep all individual subscriptions
                toSubscribe = mergeAndDedup(toSubscribe, this.getActiveIndividualTopics());
            }
            else if (options.force) {
                // if it's a forcible bulk subscribe, wipe out individual subscriptions
                this.subscriptions = {};
            }
            yield this.makeBulkSubscribeRequest(toSubscribe, options);
            if (options.replace) {
                this.bulkSubscriptions = {};
            }
            topics.forEach(topic => {
                this.bulkSubscriptions[topic] = true;
            });
        });
    }
    get expose() {
        return {
            subscribe: this.subscribe.bind(this),
            unsubscribe: this.unsubscribe.bind(this),
            bulkSubscribe: this.bulkSubscribe.bind(this)
        };
    }
}

var JID$8 = {};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}
var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    function next() {
        while (env.stack.length) {
            var rec = env.stack.pop();
            try {
                var result = rec.dispose && rec.dispose.call(rec.value);
                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
            }
            catch (e) {
                fail(e);
            }
        }
        if (env.hasError) throw env.error;
    }
    return next();
}

var tslib_es6 = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources,
};

var tslib_es6$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __extends: __extends,
    get __assign () { return __assign; },
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __esDecorate: __esDecorate,
    __runInitializers: __runInitializers,
    __propKey: __propKey,
    __setFunctionName: __setFunctionName,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources,
    'default': tslib_es6
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$1);

/*! https://mths.be/punycode v1.4.1 by @mathias */


/** Highest positive signed 32-bit float value */
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'

/** Regular expressions */
var regexPunycode = /^xn--/;
var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
var errors = {
  'overflow': 'Overflow: input needs wider integers to process',
  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error(type) {
  throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map$2(array, fn) {
  var length = array.length;
  var result = [];
  while (length--) {
    result[length] = fn(array[length]);
  }
  return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */
function mapDomain(string, fn) {
  var parts = string.split('@');
  var result = '';
  if (parts.length > 1) {
    // In email addresses, only the domain name should be punycoded. Leave
    // the local part (i.e. everything up to `@`) intact.
    result = parts[0] + '@';
    string = parts[1];
  }
  // Avoid `split(regex)` for IE8 compatibility. See #17.
  string = string.replace(regexSeparators, '\x2E');
  var labels = string.split('.');
  var encoded = map$2(labels, fn).join('.');
  return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
  var output = [],
    counter = 0,
    length = string.length,
    value,
    extra;
  while (counter < length) {
    value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // high surrogate, and there is a next character
      extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // low surrogate
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // unmatched surrogate; only append this code unit, in case the next
        // code unit is the high surrogate of a surrogate pair
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
function ucs2encode(array) {
  return map$2(array, function(value) {
    var output = '';
    if (value > 0xFFFF) {
      value -= 0x10000;
      output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
      value = 0xDC00 | value & 0x3FF;
    }
    output += stringFromCharCode(value);
    return output;
  }).join('');
}

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
function basicToDigit(codePoint) {
  if (codePoint - 48 < 10) {
    return codePoint - 22;
  }
  if (codePoint - 65 < 26) {
    return codePoint - 65;
  }
  if (codePoint - 97 < 26) {
    return codePoint - 97;
  }
  return base;
}

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
function digitToBasic(digit, flag) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
function decode(input) {
  // Don't use UCS-2
  var output = [],
    inputLength = input.length,
    out,
    i = 0,
    n = initialN,
    bias = initialBias,
    basic,
    j,
    index,
    oldi,
    w,
    k,
    digit,
    t,
    /** Cached calculation results */
    baseMinusT;

  // Handle the basic code points: let `basic` be the number of input code
  // points before the last delimiter, or `0` if there is none, then copy
  // the first basic code points to the output.

  basic = input.lastIndexOf(delimiter);
  if (basic < 0) {
    basic = 0;
  }

  for (j = 0; j < basic; ++j) {
    // if it's not a basic code point
    if (input.charCodeAt(j) >= 0x80) {
      error('not-basic');
    }
    output.push(input.charCodeAt(j));
  }

  // Main decoding loop: start just after the last delimiter if any basic code
  // points were copied; start at the beginning otherwise.

  for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */ ) {

    // `index` is the index of the next character to be consumed.
    // Decode a generalized variable-length integer into `delta`,
    // which gets added to `i`. The overflow checking is easier
    // if we increase `i` as we go, then subtract off its starting
    // value at the end to obtain `delta`.
    for (oldi = i, w = 1, k = base; /* no condition */ ; k += base) {

      if (index >= inputLength) {
        error('invalid-input');
      }

      digit = basicToDigit(input.charCodeAt(index++));

      if (digit >= base || digit > floor((maxInt - i) / w)) {
        error('overflow');
      }

      i += digit * w;
      t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

      if (digit < t) {
        break;
      }

      baseMinusT = base - t;
      if (w > floor(maxInt / baseMinusT)) {
        error('overflow');
      }

      w *= baseMinusT;

    }

    out = output.length + 1;
    bias = adapt(i - oldi, out, oldi == 0);

    // `i` was supposed to wrap around from `out` to `0`,
    // incrementing `n` each time, so we'll fix that now:
    if (floor(i / out) > maxInt - n) {
      error('overflow');
    }

    n += floor(i / out);
    i %= out;

    // Insert `n` at position `i` of the output
    output.splice(i++, 0, n);

  }

  return ucs2encode(output);
}

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
function encode(input) {
  var n,
    delta,
    handledCPCount,
    basicLength,
    bias,
    j,
    m,
    q,
    k,
    t,
    currentValue,
    output = [],
    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,
    /** Cached calculation results */
    handledCPCountPlusOne,
    baseMinusT,
    qMinusT;

  // Convert the input in UCS-2 to Unicode
  input = ucs2decode(input);

  // Cache the length
  inputLength = input.length;

  // Initialize the state
  n = initialN;
  delta = 0;
  bias = initialBias;

  // Handle the basic code points
  for (j = 0; j < inputLength; ++j) {
    currentValue = input[j];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  handledCPCount = basicLength = output.length;

  // `handledCPCount` is the number of code points that have been handled;
  // `basicLength` is the number of basic code points.

  // Finish the basic string - if it is not empty - with a delimiter
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {

    // All non-basic code points < n have been handled already. Find the next
    // larger one:
    for (m = maxInt, j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    // but guard against overflow
    handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error('overflow');
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < n && ++delta > maxInt) {
        error('overflow');
      }

      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer
        for (q = delta, k = base; /* no condition */ ; k += base) {
          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) {
            break;
          }
          qMinusT = q - t;
          baseMinusT = base - t;
          output.push(
            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
          );
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;

  }
  return output.join('');
}

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
function toUnicode(input) {
  return mapDomain(input, function(string) {
    return regexPunycode.test(string) ?
      decode(string.slice(4).toLowerCase()) :
      string;
  });
}

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
function toASCII(input) {
  return mapDomain(input, function(string) {
    return regexNonASCII.test(string) ?
      'xn--' + encode(string) :
      string;
  });
}
var version = '1.4.1';
/**
 * An object of methods to convert from JavaScript's internal character
 * representation (UCS-2) to Unicode code points, and back.
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode
 * @type Object
 */

var ucs2 = {
  decode: ucs2decode,
  encode: ucs2encode
};
var _polyfillNode_punycode = {
  version: version,
  ucs2: ucs2,
  toASCII: toASCII,
  toUnicode: toUnicode,
  encode: encode,
  decode: decode
};

var _polyfillNode_punycode$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    decode: decode,
    encode: encode,
    toUnicode: toUnicode,
    toASCII: toASCII,
    version: version,
    ucs2: ucs2,
    'default': _polyfillNode_punycode
});

var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_punycode$1);

var stringprep = {};

var Tables = {};

Object.defineProperty(Tables, "__esModule", { value: true });
Tables.TABLE_DATA = void 0;
Tables.TABLE_DATA = {
    'A.1': {
        r: 'hk:if|le:lf|nf:nv|qg:qv|rg:rj|rm:rp|rr:rt|rv:s3|vn:vv|17m:17n|17q:17v|18g:19g|1an:1ao|1cb:1cg|1e5:1ef|1fb:1ff|1fl:1gb|1gd:1gq|1gs:1gu|1hr:1hv|1im:1iv|1ne:1nf|1pd:1pf|1qb:1rv|1ti:280|29q:29r|2ae:2af|2al:2an|2bh:2c0|2cd:2ce|2ch:2ci|2dj:2dl|2dq:2dr|2e5:2e6|2e9:2ea|2ee:2em|2eo:2er|2f4:2f5|2fr:2g1|2g3:2g4|2gb:2ge|2gh:2gi|2hq:2hr|2i3:2i6|2i9:2ia|2ie:2io|2iv:2j5|2jl:2k0|2lq:2lr|2me:2mf|2mh:2mv|2n1:2n5|2ng:2o0|2od:2oe|2oh:2oi|2pk:2pl|2pq:2pr|2q4:2q6|2q9:2qa|2qe:2ql|2qo:2qr|2r2:2r5|2rh:2s1|2sb:2sd|2sm:2so|2t0:2t2|2t5:2t7|2tb:2td|2tq:2tt|2u3:2u5|2ue:2um|2uo:2v6|2vj:300|31q:31t|32e:32k|32n:32v|332:335|33g:341|35q:35t|36e:36k|36n:36t|372:375|37g:381|39q:39t|3a4:3a5|3ae:3am|3ao:3av|3b2:3b5|3bg:3c1|3cn:3cp|3du:3dv|3e7:3e9|3eb:3ee|3f0:3fh|3fl:3g0|3hr:3hu|3is:3k0|3k5:3k6|3kb:3kc|3ke:3kj|3l8:3l9|3lu:3lv|3me:3mf|3mq:3mr|3mu:3nv|3rb:3rg|3sc:3sf|3ud:3ue|3ug:3vv|41j:41l|41q:41v|42q:44v|466:46f|47p:47q|47s:47v|4aq:4au|4d3:4d7|4fq:4fv|4ie:4if|4iu:4iv|4ke:4kf|4lm:4ln|4m6:4m7|4om:4on|4qr:4r0|4rt:4sv|4vl:500|5jn:5jv|5kt:5kv|5nh:5nv|5ol:5ov|5pn:5pv|5qk:5qv|5rk:5rv|5ut:5uv|5va:5vv|60q:60v|63o:63v|65a:7fv|7ks:7kv|7nq:7nv|7om:7on|7ou:7ov|7q6:7q7|7qe:7qf|7ru:7rv|7uk:7ul|7vg:7vh|82j:82m|82o:82u|834:839|83i:83j|84f:84v|85i:86f|87b:87v|89r:89s|8ac:8ai|8c4:8cf|8uf:8vv|917:91v|92b:92v|9gk:9gl|9ju:9jv|9ka:9o0|9oa:9ob|9qj:9ql|9qv:9r0|9sl:9sn|9tv:9uf|9vc:9vf|ao0:bjv|bnk:bnv|bum:bvf|bvs:bvv|c4n:c4o|c80:c84|c9d:c9g|cdo:cff|cgt:cgv|ci4:cig|cjs:cju|cmc:cmf|crn:crq|cuu:cuv|jdm:jfv|17t6:17vv|194d:194f|1967:1avv|1lt4:1lvv|1uhe:1uhf|1ujb:1unv|1uo7:1uoi|1uoo:1uos|1uti:1uui|1va0:1vaf|1vcg:1vch|1ve8:1vef|1vft:1vfv|1vgg:1vgv|1vh4:1vhf|1vi7:1vi8|1vjc:1vjf|1vnt:1vnu|1vtv:1vu1|1vu8:1vu9|1vug:1vuh|1vuo:1vup|1vut:1vuv|1vvf:1vvo|2000:20nv|20p4:20pf|20qb:20vv|2116:2117|212e:3jvv|3k7m:3k7v|3k97:3k99|3keu:3kvv|3l50:3l51|3l53:3l54|3l57:3l58|3l8b:3l8c|3la7:3la9|3ll4:3ll7|3lua:3lud|3m00:3vvt|59mn:5tvv|5ugu:5vvt|6000:7vvt|8000:9vvt|a000:bvvt|c000:dvvt|e000:fvvt|g000:hvvt|i000:jvvt|k000:lvvt|m000:nvvt|o000:pvvt|q000:rvvt|s002:s00v|s040:tvvt',
        s: '9p8|9qc|9qe|9qn|9tg|147|bkq|3l2l|3l4t|3l5d|3l5q|3l5s|3l61|3l64|3l86|3l8l|3l8t|3l9q|3l9v|3la5|3lah|16f|c20|ccf|cnv|cvv|1b0|1c8|1d2|1dq|1h0|1nv|1oe|284|2c4|2d9|2dh|2dt|2eu|2h9|2hh|2hk|2hn|2ht|2it|2k4|2kc|2ke|2ki|2l9|2lh|2lk|2m6|2ma|2o4|2p9|2ph|2qu|2s4|2sh|2sr|2st|2tm|2u9|304|30d|30h|319|31k|325|329|344|34d|34h|359|35k|365|369|36v|384|38d|38h|399|3a9|3c4|3di|3ds|3el|3en|3k3|3k9|3ko|3l0|3l4|3l6|3lc|3lq|3m5|3m7|3q8|3so|3tt|412|418|41b|4g7|4i7|4i9|4in|4ip|4k7|4k9|4lf|4lh|4lv|4m1|4mf|4mn|4nf|4of|4oh|4ov|4q7|h1|5od|5rd|5rh|60f|1upn|1upt|1upv|1uq2|1uq5|1vij|1vj7|1vjl|1vo0|1vv7|20ov|7qo|7qq|7qs|7qu|7tl|7u5|7us|7vl|7vv|sb|sd|s000|t2|97v|uf|9go|9o5'
    },
    'B.1': {
        r: '60b:60d|80b:80d|1vg0:1vgf',
        s: '5d|606|1vnv|830|qf'
    },
    'B.2': {
        m: '5l:ts|6v:3j;3j|9g:39;o7|a9:ls;3e|bv:3j|fg:3a;oc|q5:tp|rq:10;tp|sg:tp;o8;o1|tg:u5;o8;o1|u2:u3|ug:ti|uh:to|ui:u5|uj:ud|uk:ub|ul:u6|um:u0|vg:tq|vh:u1|vi:u3|vl:tl|1c7:1b5;1c2|7km:38;ph|7kn:3k;o8|7ko:3n;oa|7kp:3p;oa|7kq:31;lu|7kr:7j1|7qg:u5;oj|7qi:u5;oj;o0|7qk:u5;oj;o1|7qm:u5;oj;q2|7s0:7o0;tp|7s1:7o1;tp|7s2:7o2;tp|7s3:7o3;tp|7s4:7o4;tp|7s5:7o5;tp|7s6:7o6;tp|7s7:7o7;tp|7s8:7o0;tp|7s9:7o1;tp|7sa:7o2;tp|7sb:7o3;tp|7sc:7o4;tp|7sd:7o5;tp|7se:7o6;tp|7sf:7o7;tp|7sg:7p0;tp|7sh:7p1;tp|7si:7p2;tp|7sj:7p3;tp|7sk:7p4;tp|7sl:7p5;tp|7sm:7p6;tp|7sn:7p7;tp|7so:7p0;tp|7sp:7p1;tp|7sq:7p2;tp|7sr:7p3;tp|7ss:7p4;tp|7st:7p5;tp|7su:7p6;tp|7sv:7p7;tp|7t0:7r0;tp|7t1:7r1;tp|7t2:7r2;tp|7t3:7r3;tp|7t4:7r4;tp|7t5:7r5;tp|7t6:7r6;tp|7t7:7r7;tp|7t8:7r0;tp|7t9:7r1;tp|7ta:7r2;tp|7tb:7r3;tp|7tc:7r4;tp|7td:7r5;tp|7te:7r6;tp|7tf:7r7;tp|7ti:7rg;tp|7tj:th;tp|7tk:tc;tp|7tm:th;q2|7tn:th;q2;tp|7ts:th;tp|7tu:tp|7u2:7rk;tp|7u3:tn;tp|7u4:te;tp|7u6:tn;q2|7u7:tn;q2;tp|7uc:tn;tp|7ui:tp;o8;o0|7uj:tp;o8;o1|7um:tp;q2|7un:tp;o8;q2|7v2:u5;o8;o0|7v3:u5;o8;o1|7v4:u1;oj|7v6:u5;q2|7v7:u5;o8;q2|7vi:7rs;tp|7vj:u9;tp|7vk:ue;tp|7vm:u9;q2|7vn:u9;q2;tp|7vs:u9;tp|858:3i;3j|882:33|883:5g;33|887:ir|889:5g;36|88b:38|88c:38|88d:38|88g:39|88h:39|88i:3c|88l:3e|88m:3e;3f|88p:3g|88q:3h|88r:3i|88s:3i|88t:3i|890:3j;3d|891:3k;35;3c|892:3k;3d|894:3q|898:3q|89c:32|89d:33|89g:35|89h:36|89j:3d|89u:tj|89v:u0|8a5:34|crh:38;3g;31|crj:31;3l|crl:3f;3m|cs0:3g;31|cs1:3e;31|cs2:ts;31|cs3:3d;31|cs4:3b;31|cs5:3b;32|cs6:3d;32|cs7:37;32|csa:3g;36|csb:3e;36|csc:ts;36|csg:38;3q|csh:3b;38;3q|csi:3d;38;3q|csj:37;38;3q|csk:3k;38;3q|ct9:3g;31|cta:3b;3g;31|ctb:3d;3g;31|ctc:37;3g;31|ctk:3g;3m|ctl:3e;3m|ctm:ts;3m|ctn:3d;3m|cto:3b;3m|ctp:3d;3m|ctq:3g;3n|ctr:3e;3n|cts:ts;3n|ctt:3d;3n|ctu:3b;3n|ctv:3d;3n|cu0:3b;u9|cu1:3d;u9|cu3:32;3h|cu6:33;8gl;3b;37|cu7:33;3f;1e|cu8:34;32|cu9:37;3p|cub:38;3g|cud:3b;3b|cue:3b;3d|cun:3g;38|cup:3g;3g;3d|cuq:3g;3i|cus:3j;3m|cut:3n;32|1uo0:36;36|1uo1:36;39|1uo2:36;3c|1uo3:36;36;39|1uo4:36;36;3c|1uo5:3j;3k|1uo6:3j;3k|1uoj:1bk;1bm|1uok:1bk;1b5|1uol:1bk;1bb|1uom:1bu;1bm|1uon:1bk;1bd|3l00:31|3l01:32|3l02:33|3l03:34|3l04:35|3l05:36|3l06:37|3l07:38|3l08:39|3l09:3a|3l0a:3b|3l0b:3c|3l0c:3d|3l0d:3e|3l0e:3f|3l0f:3g|3l0g:3h|3l0h:3i|3l0i:3j|3l0j:3k|3l0k:3l|3l0l:3m|3l0m:3n|3l0n:3o|3l0o:3p|3l0p:3q|3l1k:31|3l1l:32|3l1m:33|3l1n:34|3l1o:35|3l1p:36|3l1q:37|3l1r:38|3l1s:39|3l1t:3a|3l1u:3b|3l1v:3c|3l20:3d|3l21:3e|3l22:3f|3l23:3g|3l24:3h|3l25:3i|3l26:3j|3l27:3k|3l28:3l|3l29:3m|3l2a:3n|3l2b:3o|3l2c:3p|3l2d:3q|3l38:31|3l39:32|3l3a:33|3l3b:34|3l3c:35|3l3d:36|3l3e:37|3l3f:38|3l3g:39|3l3h:3a|3l3i:3b|3l3j:3c|3l3k:3d|3l3l:3e|3l3m:3f|3l3n:3g|3l3o:3h|3l3p:3i|3l3q:3j|3l3r:3k|3l3s:3l|3l3t:3m|3l3u:3n|3l3v:3o|3l40:3p|3l41:3q|3l4s:31|3l4u:33|3l4v:34|3l52:37|3l55:3a|3l56:3b|3l59:3e|3l5a:3f|3l5b:3g|3l5c:3h|3l5e:3j|3l5f:3k|3l5g:3l|3l5h:3m|3l5i:3n|3l5j:3o|3l5k:3p|3l5l:3q|3l6g:31|3l6h:32|3l6i:33|3l6j:34|3l6k:35|3l6l:36|3l6m:37|3l6n:38|3l6o:39|3l6p:3a|3l6q:3b|3l6r:3c|3l6s:3d|3l6t:3e|3l6u:3f|3l6v:3g|3l70:3h|3l71:3i|3l72:3j|3l73:3k|3l74:3l|3l75:3m|3l76:3n|3l77:3o|3l78:3p|3l79:3q|3l84:31|3l85:32|3l87:34|3l88:35|3l89:36|3l8a:37|3l8d:3a|3l8e:3b|3l8f:3c|3l8g:3d|3l8h:3e|3l8i:3f|3l8j:3g|3l8k:3h|3l8m:3j|3l8n:3k|3l8o:3l|3l8p:3m|3l8q:3n|3l8r:3o|3l8s:3p|3l9o:31|3l9p:32|3l9r:34|3l9s:35|3l9t:36|3l9u:37|3la0:39|3la1:3a|3la2:3b|3la3:3c|3la4:3d|3la6:3f|3laa:3j|3lab:3k|3lac:3l|3lad:3m|3lae:3n|3laf:3o|3lag:3p|3lbc:31|3lbd:32|3lbe:33|3lbf:34|3lbg:35|3lbh:36|3lbi:37|3lbj:38|3lbk:39|3lbl:3a|3lbm:3b|3lbn:3c|3lbo:3d|3lbp:3e|3lbq:3f|3lbr:3g|3lbs:3h|3lbt:3i|3lbu:3j|3lbv:3k|3lc0:3l|3lc1:3m|3lc2:3n|3lc3:3o|3lc4:3p|3lc5:3q|3ld0:31|3ld1:32|3ld2:33|3ld3:34|3ld4:35|3ld5:36|3ld6:37|3ld7:38|3ld8:39|3ld9:3a|3lda:3b|3ldb:3c|3ldc:3d|3ldd:3e|3lde:3f|3ldf:3g|3ldg:3h|3ldh:3i|3ldi:3j|3ldj:3k|3ldk:3l|3ldl:3m|3ldm:3n|3ldn:3o|3ldo:3p|3ldp:3q|3lek:31|3lel:32|3lem:33|3len:34|3leo:35|3lep:36|3leq:37|3ler:38|3les:39|3let:3a|3leu:3b|3lev:3c|3lf0:3d|3lf1:3e|3lf2:3f|3lf3:3g|3lf4:3h|3lf5:3i|3lf6:3j|3lf7:3k|3lf8:3l|3lf9:3m|3lfa:3n|3lfb:3o|3lfc:3p|3lfd:3q|3lg8:31|3lg9:32|3lga:33|3lgb:34|3lgc:35|3lgd:36|3lge:37|3lgf:38|3lgg:39|3lgh:3a|3lgi:3b|3lgj:3c|3lgk:3d|3lgl:3e|3lgm:3f|3lgn:3g|3lgo:3h|3lgp:3i|3lgq:3j|3lgr:3k|3lgs:3l|3lgt:3m|3lgu:3n|3lgv:3o|3lh0:3p|3lh1:3q|3lhs:31|3lht:32|3lhu:33|3lhv:34|3li0:35|3li1:36|3li2:37|3li3:38|3li4:39|3li5:3a|3li6:3b|3li7:3c|3li8:3d|3li9:3e|3lia:3f|3lib:3g|3lic:3h|3lid:3i|3lie:3j|3lif:3k|3lig:3l|3lih:3m|3lii:3n|3lij:3o|3lik:3p|3lil:3q|3ljg:31|3ljh:32|3lji:33|3ljj:34|3ljk:35|3ljl:36|3ljm:37|3ljn:38|3ljo:39|3ljp:3a|3ljq:3b|3ljr:3c|3ljs:3d|3ljt:3e|3lju:3f|3ljv:3g|3lk0:3h|3lk1:3i|3lk2:3j|3lk3:3k|3lk4:3l|3lk5:3m|3lk6:3n|3lk7:3o|3lk8:3p|3lk9:3q|3ll8:th|3ll9:ti|3lla:tj|3llb:tk|3llc:tl|3lld:tm|3lle:tn|3llf:to|3llg:tp|3llh:tq|3lli:tr|3llj:ts|3llk:tt|3lll:tu|3llm:tv|3lln:u0|3llo:u1|3llp:to|3llq:u3|3llr:u4|3lls:u5|3llt:u6|3llu:u7|3llv:u8|3lm0:u9|3lmj:u3|3ln2:th|3ln3:ti|3ln4:tj|3ln5:tk|3ln6:tl|3ln7:tm|3ln8:tn|3ln9:to|3lna:tp|3lnb:tq|3lnc:tr|3lnd:ts|3lne:tt|3lnf:tu|3lng:tv|3lnh:u0|3lni:u1|3lnj:to|3lnk:u3|3lnl:u4|3lnm:u5|3lnn:u6|3lno:u7|3lnp:u8|3lnq:u9|3lod:u3|3los:th|3lot:ti|3lou:tj|3lov:tk|3lp0:tl|3lp1:tm|3lp2:tn|3lp3:to|3lp4:tp|3lp5:tq|3lp6:tr|3lp7:ts|3lp8:tt|3lp9:tu|3lpa:tv|3lpb:u0|3lpc:u1|3lpd:to|3lpe:u3|3lpf:u4|3lpg:u5|3lph:u6|3lpi:u7|3lpj:u8|3lpk:u9|3lq7:u3|3lqm:th|3lqn:ti|3lqo:tj|3lqp:tk|3lqq:tl|3lqr:tm|3lqs:tn|3lqt:to|3lqu:tp|3lqv:tq|3lr0:tr|3lr1:ts|3lr2:tt|3lr3:tu|3lr4:tv|3lr5:u0|3lr6:u1|3lr7:to|3lr8:u3|3lr9:u4|3lra:u5|3lrb:u6|3lrc:u7|3lrd:u8|3lre:u9|3ls1:u3|3lsg:th|3lsh:ti|3lsi:tj|3lsj:tk|3lsk:tl|3lsl:tm|3lsm:tn|3lsn:to|3lso:tp|3lsp:tq|3lsq:tr|3lsr:ts|3lss:tt|3lst:tu|3lsu:tv|3lsv:u0|3lt0:u1|3lt1:to|3lt2:u3|3lt3:u4|3lt4:u5|3lt5:u6|3lt6:u7|3lt7:u8|3lt8:u9|3ltr:u3',
        r: '23:2c|2i:2k|2m:2q|60:6m|6o:6u|bo:bp|c1:c2|c6:c7|c9:cb|ce:ch|cj:ck|cm:co|cs:ct|cv:d0|d6:d7|de:df|dh:dj|dn:do|e4:e5|e7:e8|ea:eb|fh:fi|fm:fo|s8:sa|se:sf|sh:t1|t3:tb|100:11f|19h:1am|7o8:7of|7oo:7ot|7p8:7pf|7po:7pv|7q8:7qd|7r8:7rf|7to:7tr|7u8:7ub|7uo:7ur|7v8:7vc|7vo:7vr|89a:89b|8b0:8bf|95m:96f|1vp1:1vpq|2100:2115',
        s: 'v8|va|vc|ve|vk|130|132|134|136|138|13a|13c|13e|13g|13i|13k|13m|13o|13q|13s|13u|140|14a|14c|14e|14g|14i|14k|14m|14o|14q|14s|14u|150|152|154|156|158|15a|15c|15e|15g|15i|15k|15m|15o|15q|15s|15u|161|163|165|167|169|16b|16d|16g|16i|16k|16m|16o|16q|16s|16u|170|172|174|176|178|17a|17c|17e|17g|17i|17k|17o|180|182|184|186|188|18a|18c|18e|80|82|84|86|88|8a|8c|8e|8g|8i|8k|8m|8o|8q|8s|8u|90|92|94|96|98|9a|9c|9e|9i|9k|9m|9p|9r|9t|9v|a1|a3|a5|a7|aa|ac|ae|ag|ai|ak|am|ao|aq|as|au|b0|b2|b4|b6|b8|ba|bc|be|bg|bi|bk|bm|br|bt|c4|d2|d4|d9|dc|dl|ds|ed|ef|eh|ej|el|en|ep|er|eu|f0|f2|f4|f6|f8|fa|fc|fe|fk|fq|fs|fu|g0|g2|g4|g6|g8|ga|gc|ge|gg|gi|gk|gm|go|gq|gs|gu|h0|h2|h4|h6|h8|ha|hc|he|hg|hi|21|22|7g0|7g2|7g4|7g6|7g8|7ga|7gc|7ge|7gg|7gi|2d|7gk|7gm|7go|7gq|7gs|7gu|7h0|7h2|7h4|7h6|7h8|7ha|7hc|7he|7hg|7hi|7hk|7hm|7ho|7hq|7hs|7hu|7i0|7i2|7i4|7i6|7i8|7ia|7ic|7ie|7ig|7ii|7ik|7im|7io|7iq|7is|7iu|7j0|7j2|7j4|7j6|7j8|7ja|7jc|7je|7jg|7ji|7jk|7jm|2e|7jo|7jq|7js|7ju|7k0|7k2|7k4|7k6|7k8|7ka|7kc|7ke|7kg|7ki|7kk|7l0|7l2|7l4|7l6|7l8|7la|7lc|7le|7lg|7li|7lk|7lm|7lo|7lq|7ls|7lu|7m0|7m2|7m4|7m6|7m8|7ma|7mc|7me|7mg|7mi|7mk|7mm|7mo|7mq|2f|7ms|7mu|7n0|7n2|7n4|7n6|7n8|7na|7nc|7ne|7ng|7ni|7nk|7nm|7no|2g|7qp|7qr|7qt|7qv|2h|896|2l|s6|sc|uo|uq|us|uu|v0|v2|v4|v6'
    },
    'B.3': {
        m: '5l:ts|6v:3j;3j|9g:39;o7|a9:ls;3e|bv:3j|fg:3a;oc|q5:tp|sg:tp;o8;o1|tg:u5;o8;o1|u2:u3|ug:ti|uh:to|ul:u6|um:u0|vg:tq|vh:u1|vi:u3|vl:tl|1c7:1b5;1c2|7km:38;ph|7kn:3k;o8|7ko:3n;oa|7kp:3p;oa|7kq:31;lu|7kr:7j1|7qg:u5;oj|7qi:u5;oj;o0|7qk:u5;oj;o1|7qm:u5;oj;q2|7s0:7o0;tp|7s1:7o1;tp|7s2:7o2;tp|7s3:7o3;tp|7s4:7o4;tp|7s5:7o5;tp|7s6:7o6;tp|7s7:7o7;tp|7s8:7o0;tp|7s9:7o1;tp|7sa:7o2;tp|7sb:7o3;tp|7sc:7o4;tp|7sd:7o5;tp|7se:7o6;tp|7sf:7o7;tp|7sg:7p0;tp|7sh:7p1;tp|7si:7p2;tp|7sj:7p3;tp|7sk:7p4;tp|7sl:7p5;tp|7sm:7p6;tp|7sn:7p7;tp|7so:7p0;tp|7sp:7p1;tp|7sq:7p2;tp|7sr:7p3;tp|7ss:7p4;tp|7st:7p5;tp|7su:7p6;tp|7sv:7p7;tp|7t0:7r0;tp|7t1:7r1;tp|7t2:7r2;tp|7t3:7r3;tp|7t4:7r4;tp|7t5:7r5;tp|7t6:7r6;tp|7t7:7r7;tp|7t8:7r0;tp|7t9:7r1;tp|7ta:7r2;tp|7tb:7r3;tp|7tc:7r4;tp|7td:7r5;tp|7te:7r6;tp|7tf:7r7;tp|7ti:7rg;tp|7tj:th;tp|7tk:tc;tp|7tm:th;q2|7tn:th;q2;tp|7ts:th;tp|7tu:tp|7u2:7rk;tp|7u3:tn;tp|7u4:te;tp|7u6:tn;q2|7u7:tn;q2;tp|7uc:tn;tp|7ui:tp;o8;o0|7uj:tp;o8;o1|7um:tp;q2|7un:tp;o8;q2|7v2:u5;o8;o0|7v3:u5;o8;o1|7v4:u1;oj|7v6:u5;q2|7v7:u5;o8;q2|7vi:7rs;tp|7vj:u9;tp|7vk:ue;tp|7vm:u9;q2|7vn:u9;q2;tp|7vs:u9;tp|1uo0:36;36|1uo1:36;39|1uo2:36;3c|1uo3:36;36;39|1uo4:36;36;3c|1uo5:3j;3k|1uo6:3j;3k|1uoj:1bk;1bm|1uok:1bk;1b5|1uol:1bk;1bb|1uom:1bu;1bm|1uon:1bk;1bd',
        r: '23:2c|2i:2k|2m:2q|60:6m|6o:6u|bo:bp|c1:c2|c6:c7|c9:cb|ce:ch|cj:ck|cm:co|cs:ct|cv:d0|d6:d7|de:df|dh:dj|dn:do|e4:e5|e7:e8|ea:eb|fh:fi|fm:fo|s8:sa|se:sf|sh:t1|t3:tb|100:11f|19h:1am|7o8:7of|7oo:7ot|7p8:7pf|7po:7pv|7q8:7qd|7r8:7rf|7to:7tr|7u8:7ub|7uo:7ur|7v8:7vc|7vo:7vr|89a:89b|8b0:8bf|95m:96f|1vp1:1vpq|2100:2115',
        s: 'v8|va|vc|ve|vk|130|132|134|136|138|13a|13c|13e|13g|13i|13k|13m|13o|13q|13s|13u|140|14a|14c|14e|14g|14i|14k|14m|14o|14q|14s|14u|150|152|154|156|158|15a|15c|15e|15g|15i|15k|15m|15o|15q|15s|15u|161|163|165|167|169|16b|16d|16g|16i|16k|16m|16o|16q|16s|16u|170|172|174|176|178|17a|17c|17e|17g|17i|17k|17o|180|182|184|186|188|18a|18c|18e|80|82|84|86|88|8a|8c|8e|8g|8i|8k|8m|8o|8q|8s|8u|90|92|94|96|98|9a|9c|9e|9i|9k|9m|9p|9r|9t|9v|a1|a3|a5|a7|aa|ac|ae|ag|ai|ak|am|ao|aq|as|au|b0|b2|b4|b6|b8|ba|bc|be|bg|bi|bk|bm|br|bt|c4|d2|d4|d9|dc|dl|ds|ed|ef|eh|ej|el|en|ep|er|eu|f0|f2|f4|f6|f8|fa|fc|fe|fk|fq|fs|fu|g0|g2|g4|g6|g8|ga|gc|ge|gg|gi|gk|gm|go|gq|gs|gu|h0|h2|h4|h6|h8|ha|hc|he|hg|hi|21|22|7g0|7g2|7g4|7g6|7g8|7ga|7gc|7ge|7gg|7gi|2d|7gk|7gm|7go|7gq|7gs|7gu|7h0|7h2|7h4|7h6|7h8|7ha|7hc|7he|7hg|7hi|7hk|7hm|7ho|7hq|7hs|7hu|7i0|7i2|7i4|7i6|7i8|7ia|7ic|7ie|7ig|7ii|7ik|7im|7io|7iq|7is|7iu|7j0|7j2|7j4|7j6|7j8|7ja|7jc|7je|7jg|7ji|7jk|7jm|2e|7jo|7jq|7js|7ju|7k0|7k2|7k4|7k6|7k8|7ka|7kc|7ke|7kg|7ki|7kk|7l0|7l2|7l4|7l6|7l8|7la|7lc|7le|7lg|7li|7lk|7lm|7lo|7lq|7ls|7lu|7m0|7m2|7m4|7m6|7m8|7ma|7mc|7me|7mg|7mi|7mk|7mm|7mo|7mq|2f|7ms|7mu|7n0|7n2|7n4|7n6|7n8|7na|7nc|7ne|7ng|7ni|7nk|7nm|7no|2g|7qp|7qr|7qt|7qv|2h|896|2l|s6|sc|uo|uq|us|uu|v0|v2|v4|v6'
    },
    'C.1.1': {
        s: '10'
    },
    'C.1.2': {
        r: '800:80b',
        s: 'c00|50|5k0|81f|82v'
    },
    'C.2.1': {
        r: '0:v',
        s: '3v'
    },
    'C.2.2': {
        r: '40:4v|80c:80d|818:819|830:833|83a:83f|1vvp:1vvs|3kbj:3kbq',
        s: '1mt|1of|60e|1vnv'
    },
    'C.3': {
        r: '1o00:1u7v|u000:vvvt|10000:11vvt'
    },
    'C.4': {
        r: '1veg:1vff|1vvu:1vvv|3vvu:3vvv|5vvu:5vvv|7vvu:7vvv|9vvu:9vvv|bvvu:bvvv|dvvu:dvvv|fvvu:fvvv|hvvu:hvvv|jvvu:jvvv|lvvu:lvvv|nvvu:nvvv|pvvu:pvvv|rvvu:rvvv|tvvu:tvvv|vvvu:vvvv|11vvu:11vvv'
    },
    'C.5': {
        r: '1m00:1nvv'
    },
    'C.6': {
        r: '1vvp:1vvt'
    },
    'C.7': {
        r: 'bvg:bvr'
    },
    'C.8': {
        r: 'q0:q1|80e:80f|81a:81e|83a:83f'
    },
    'C.9': {
        r: 's010:s03v',
        s: 's001'
    },
    'D.1': {
        r: '1eg:1fa|1fg:1fk|1h1:1hq|1i0:1ia|1jd:1jf|1jh:1ml|1n5:1n6|1nq:1nu|1o0:1od|1oi:1pc|1s0:1t5|1uov:1up8|1upa:1upm|1upo:1ups|1uq0:1uq1|1uq3:1uq4|1uq6:1uth|1uuj:1v9t|1vag:1vcf|1vci:1ve7|1vfg:1vfs|1vjg:1vjk|1vjm:1vns',
        s: '1du|1e0|1e3|1gr|1gv|1mt|1og|1th|1uot|1upu|80f'
    },
    'D.2': {
        r: '21:2q|31:3q|60:6m|6o:7m|7o:h0|h2:hj|ig:ld|lg:lo|lr:m1|mg:mh|n0:n4|s8:sa|se:t1|t3:ue|ug:vl|100:142|14a:16e|16g:17l|17o:17p|180:18f|19h:1am|1ap:1av|1b1:1c7|285:29p|29t:2a0|2a9:2ac|2ao:2b1|2b4:2bg|2c2:2c3|2c5:2cc|2cf:2cg|2cj:2d8|2da:2dg|2dm:2dp|2du:2e0|2e7:2e8|2eb:2ec|2es:2et|2ev:2f1|2f6:2fh|2fk:2fq|2g5:2ga|2gf:2gg|2gj:2h8|2ha:2hg|2hi:2hj|2hl:2hm|2ho:2hp|2hu:2i0|2ip:2is|2j6:2jf|2ji:2jk|2k5:2kb|2kf:2kh|2kj:2l8|2la:2lg|2li:2lj|2ll:2lp|2lt:2m0|2mb:2mc|2n6:2nf|2o2:2o3|2o5:2oc|2of:2og|2oj:2p8|2pa:2pg|2pi:2pj|2pm:2pp|2pt:2pu|2q7:2q8|2qb:2qc|2qs:2qt|2qv:2r1|2r6:2rg|2s5:2sa|2se:2sg|2si:2sl|2sp:2sq|2su:2sv|2t3:2t4|2t8:2ta|2te:2tl|2tn:2tp|2tu:2tv|2u1:2u2|2u6:2u8|2ua:2uc|2v7:2vi|301:303|305:30c|30e:30g|30i:318|31a:31j|31l:31p|321:324|330:331|336:33f|342:343|345:34c|34e:34g|34i:358|35a:35j|35l:35p|360:364|367:368|36a:36b|36l:36m|370:371|376:37f|382:383|385:38c|38e:38g|38i:398|39a:39p|39u:3a0|3a6:3a8|3aa:3ac|3b0:3b1|3b6:3bf|3c2:3c3|3c5:3cm|3cq:3dh|3dj:3dr|3e0:3e6|3ef:3eh|3eo:3ev|3fi:3fk|3g1:3hg|3hi:3hj|3i0:3i6|3if:3ir|3k1:3k2|3k7:3k8|3kk:3kn|3kp:3kv|3l1:3l3|3la:3lb|3ld:3lg|3li:3lj|3m0:3m4|3mg:3mp|3ms:3mt|3o0:3on|3oq:3pk|3pu:3q7|3q9:3ra|3s8:3sb|3tu:3u5|3u7:3uc|400:411|413:417|419:41a|420:42n|450:465|46g:47o|480:4ap|4av:4d2|4d8:4fp|4g0:4g6|4g8:4i6|4ia:4id|4ig:4im|4iq:4it|4j0:4k6|4ka:4kd|4kg:4le|4li:4ll|4lo:4lu|4m2:4m5|4m8:4me|4mg:4mm|4mo:4ne|4ng:4oe|4oi:4ol|4oo:4ou|4p0:4q6|4q8:4qq|4r1:4rs|4t0:4vk|501:5jm|5k1:5kq|5l0:5ng|5o0:5oc|5oe:5oh|5p0:5ph|5pl:5pm|5q0:5qh|5r0:5rc|5re:5rg|5s0:5tm|5tu:5u5|5u7:5u8|5uk:5uq|5v0:5v9|60g:60p|610:63n|640:658|7g0:7kr|7l0:7np|7o0:7ol|7oo:7ot|7p0:7q5|7q8:7qd|7qg:7qn|7qv:7rt|7s0:7tk|7tm:7ts|7u2:7u4|7u6:7uc|7ug:7uj|7um:7ur|7v0:7vc|7vi:7vk|7vm:7vs|88a:88j|88p:88t|89a:89d|89f:89h|89j:89p|89t:89v|8a5:8a9|8b0:8c3|8pm:8rq|94s:979|c05:c07|c11:c19|c1h:c1l|c1o:c1s|c21:c4m|c4t:c4v|c51:c7q|c7s:c7v|c85:c9c|c9h:cce|ccg:cdn|cfg:cgs|ch0:ci3|cj0:cjr|cjv:clg|cm0:cmb|cmg:cnu|co0:crm|crr:cut|cv0:cvu|d00:jdl|jg0:17t5|1800:194c|1b00:1lt3|1m00:1uhd|1uhg:1uja|1uo0:1uo6|1uoj:1uon|1vp1:1vpq|1vq1:1vqq|1vr6:1vtu|1vu2:1vu7|1vua:1vuf|1vui:1vun|1vuq:1vus|20o0:20ou|20p0:20p3|20pg:20qa|2100:2115|2118:212d|3k00:3k7l|3k80:3k96|3k9a:3kb6|3kba:3kbi|3kc3:3kc4|3kcc:3kd9|3kde:3ket|3l00:3l2k|3l2m:3l4s|3l4u:3l4v|3l55:3l56|3l59:3l5c|3l5e:3l5p|3l5t:3l60|3l62:3l63|3l65:3l85|3l87:3l8a|3l8d:3l8k|3l8m:3l8s|3l8u:3l9p|3l9r:3l9u|3la0:3la4|3laa:3lag|3lai:3ll3|3ll8:3lu9|4000:59mm|5u00:5ugt|u000:vvvt|10000:11vvt',
        s: '3l52|3l5r|3la6|1c9|5a|5l|5q|283|2ag|2di|2en|2iu|2k3|2kd|2m9|2mg|2n0|2q0|2qn|2s3|2ss|2un|35u|36u|3an|3dt|3k4|3ka|3kd|3l5|3l7|3lt|3m6|3pm|3po|3rv|3s5|3uf|41c|41h|41o|47r|4i8|4io|4k8|4lg|4m0|4og|5us|ne|7qp|7qr|7qt|7tu|80e|83h|83v|882|887|88l|894|896|898|rq|s6|sc|8sl'
    }
};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.saslprep = exports.resourceprep = exports.nodeprep = exports.NodePrepProhibited = exports.nameprep = exports.prepare = exports.D2 = exports.D1 = exports.C9 = exports.C8 = exports.C7 = exports.C6 = exports.C5 = exports.C4 = exports.C3 = exports.C22 = exports.C21 = exports.C12 = exports.C11 = exports.B3 = exports.B2 = exports.B1 = exports.A1 = exports.Table = void 0;
	const tslib_1 = require$$0;
	const punycode_1 = (0, tslib_1.__importDefault)(require$$2$1);
	const Tables_1 = Tables;
	class Table {
	    constructor(name, points) {
	        this.singles = new Set();
	        this.ranges = [];
	        this.mappings = new Map();
	        const data = Tables_1.TABLE_DATA[name];
	        this.name = name;
	        if (data) {
	            if (data.s) {
	                this.singles = new Set(data.s.split('|').map(s => parseInt(s, 32)));
	            }
	            if (data.r) {
	                this.ranges = data.r.split('|').map(r => {
	                    const [start, end] = r.split(':');
	                    return [parseInt(start, 32), parseInt(end, 32)];
	                });
	            }
	            if (data.m) {
	                this.mappings = new Map(data.m.split('|').map(m => {
	                    const [point, mapping] = m.split(':');
	                    const mappedPoints = mapping.split(';').map(p => parseInt(p, 32));
	                    return [parseInt(point, 32), mappedPoints];
	                }));
	            }
	        }
	        else if (points) {
	            this.singles = new Set(points);
	        }
	    }
	    contains(codePoint) {
	        if (this.singles.has(codePoint)) {
	            return true;
	        }
	        let left = 0;
	        let right = this.ranges.length - 1;
	        while (left <= right) {
	            const pivot = Math.floor((left + right) / 2);
	            const range = this.ranges[pivot];
	            if (codePoint < range[0]) {
	                right = pivot - 1;
	                continue;
	            }
	            if (codePoint > range[1]) {
	                left = pivot + 1;
	                continue;
	            }
	            return true;
	        }
	        return false;
	    }
	    hasMapping(codePoint) {
	        return this.mappings.has(codePoint) || this.contains(codePoint);
	    }
	    map(codePoint) {
	        if (this.contains(codePoint) && !this.mappings.has(codePoint)) {
	            return String.fromCodePoint(codePoint).toLowerCase().codePointAt(0);
	        }
	        return this.mappings.get(codePoint) || null;
	    }
	}
	exports.Table = Table;
	exports.A1 = new Table('A.1');
	exports.B1 = new Table('B.1');
	exports.B2 = new Table('B.2');
	exports.B3 = new Table('B.3');
	exports.C11 = new Table('C.1.1');
	exports.C12 = new Table('C.1.2');
	exports.C21 = new Table('C.2.1');
	exports.C22 = new Table('C.2.2');
	exports.C3 = new Table('C.3');
	exports.C4 = new Table('C.4');
	exports.C5 = new Table('C.5');
	exports.C6 = new Table('C.6');
	exports.C7 = new Table('C.7');
	exports.C8 = new Table('C.8');
	exports.C9 = new Table('C.9');
	exports.D1 = new Table('D.1');
	exports.D2 = new Table('D.2');
	// Shortcut some of the simpler table operations
	exports.B1.map = () => {
	    return null;
	};
	exports.C11.contains = (codePoint) => codePoint === 32;
	exports.C12.map = (codePoint) => {
	    return exports.C12.contains(codePoint) ? 32 : null;
	};
	function prepare(profile, allowUnassigned, input = '') {
	    const inputCodePoints = punycode_1.default.ucs2.decode(input);
	    let mappedCodePoints = [];
	    for (const codePoint of inputCodePoints) {
	        if (!allowUnassigned && profile.unassigned.contains(codePoint)) {
	            throw new Error('Unassigned code point: x' + codePoint.toString(16));
	        }
	        let hasMapping = false;
	        for (const mappingTable of profile.mappings) {
	            if (!mappingTable.hasMapping(codePoint)) {
	                continue;
	            }
	            hasMapping = true;
	            const mappedPoint = mappingTable.map(codePoint);
	            if (!mappedPoint) {
	                continue;
	            }
	            if (Array.isArray(mappedPoint)) {
	                mappedCodePoints = mappedCodePoints.concat(mappedPoint);
	            }
	            else {
	                mappedCodePoints.push(mappedPoint);
	            }
	        }
	        if (!hasMapping) {
	            mappedCodePoints.push(codePoint);
	        }
	    }
	    let normalizedCodePoints = mappedCodePoints;
	    if (profile.normalize) {
	        const mappedString = punycode_1.default.ucs2.encode(mappedCodePoints);
	        const normalizedString = mappedString.normalize('NFKC');
	        normalizedCodePoints = punycode_1.default.ucs2.decode(normalizedString);
	    }
	    let hasRandALCat = false;
	    let hasLCat = false;
	    for (const codePoint of normalizedCodePoints) {
	        for (const prohibited of profile.prohibited) {
	            if (prohibited.contains(codePoint)) {
	                throw new Error('Prohibited code point: x' + codePoint.toString(16));
	            }
	        }
	        if (!allowUnassigned && profile.unassigned.contains(codePoint)) {
	            // istanbul ignore next
	            throw new Error('Prohibited code point: x' + codePoint.toString(16));
	        }
	        if (profile.bidirectional) {
	            hasRandALCat = hasRandALCat || exports.D1.contains(codePoint);
	            hasLCat = hasLCat || exports.D2.contains(codePoint);
	        }
	    }
	    if (profile.bidirectional) {
	        if (hasRandALCat && hasLCat) {
	            throw new Error('String contained both LCat and RandALCat code points');
	        }
	        if (hasRandALCat &&
	            (!exports.D1.contains(normalizedCodePoints[0]) ||
	                !exports.D1.contains(normalizedCodePoints[normalizedCodePoints.length - 1]))) {
	            throw new Error('String containing RandALCat code points must start and end with RandALCat code points');
	        }
	    }
	    return punycode_1.default.ucs2.encode(normalizedCodePoints);
	}
	exports.prepare = prepare;
	const NamePrepProfile = {
	    bidirectional: true,
	    mappings: [exports.B1, exports.B2],
	    normalize: true,
	    prohibited: [exports.C12, exports.C22, exports.C3, exports.C4, exports.C5, exports.C6, exports.C7, exports.C8, exports.C9],
	    unassigned: exports.A1
	};
	function nameprep(str, allowUnassigned = true) {
	    return prepare(NamePrepProfile, allowUnassigned, str);
	}
	exports.nameprep = nameprep;
	exports.NodePrepProhibited = new Table('NodePrepProhibited', [
	    0x22,
	    0x26,
	    0x27,
	    0x2f,
	    0x3a,
	    0x3c,
	    0x3e,
	    0x40
	]);
	const NodePrepProfile = {
	    bidirectional: true,
	    mappings: [exports.B1, exports.B2],
	    normalize: true,
	    prohibited: [exports.C11, exports.C12, exports.C21, exports.C22, exports.C3, exports.C4, exports.C5, exports.C6, exports.C7, exports.C8, exports.C9, exports.NodePrepProhibited],
	    unassigned: exports.A1
	};
	function nodeprep(str, allowUnassigned = true) {
	    return prepare(NodePrepProfile, allowUnassigned, str);
	}
	exports.nodeprep = nodeprep;
	const ResourcePrepProfile = {
	    bidirectional: true,
	    mappings: [exports.B1],
	    normalize: true,
	    prohibited: [exports.C12, exports.C21, exports.C22, exports.C3, exports.C4, exports.C5, exports.C6, exports.C7, exports.C8, exports.C9],
	    unassigned: exports.A1
	};
	function resourceprep(str, allowUnassigned = true) {
	    return prepare(ResourcePrepProfile, allowUnassigned, str);
	}
	exports.resourceprep = resourceprep;
	const SASLPrepProfile = {
	    bidirectional: true,
	    mappings: [exports.C12, exports.B1],
	    normalize: true,
	    prohibited: [exports.C12, exports.C21, exports.C22, exports.C3, exports.C4, exports.C5, exports.C6, exports.C7, exports.C8, exports.C9],
	    unassigned: exports.A1
	};
	function saslprep(str, allowUnassigned = false) {
	    return prepare(SASLPrepProfile, allowUnassigned, str);
	}
	exports.saslprep = saslprep;
} (stringprep));

Object.defineProperty(JID$8, "__esModule", { value: true });
JID$8.toURI = JID$8.parseURI = toBare_1 = JID$8.toBare = JID$8.getResource = JID$8.getDomain = JID$8.getLocal = JID$8.isBare = JID$8.isFull = JID$8.equalBare = JID$8.equal = JID$8.allowedResponders = JID$8.parse = JID$8.createFull = JID$8.create = JID$8.prepare = JID$8.unescapeLocal = JID$8.escapeLocal = void 0;
const tslib_1$s = require$$0;
const punycode_1$1 = (0, tslib_1$s.__importDefault)(require$$2$1);
const stringprep_1$1 = stringprep;
function escapeLocal(val = '') {
    return val
        .replace(/^\s+|\s+$/g, '')
        .replace(/\\5c/g, '\\5c5c')
        .replace(/\\20/g, '\\5c20')
        .replace(/\\22/g, '\\5c22')
        .replace(/\\26/g, '\\5c26')
        .replace(/\\27/g, '\\5c27')
        .replace(/\\2f/g, '\\5c2f')
        .replace(/\\3a/g, '\\5c3a')
        .replace(/\\3c/g, '\\5c3c')
        .replace(/\\3e/g, '\\5c3e')
        .replace(/\\40/g, '\\5c40')
        .replace(/ /g, '\\20')
        .replace(/"/g, '\\22')
        .replace(/&/g, '\\26')
        .replace(/'/g, '\\27')
        .replace(/\//g, '\\2f')
        .replace(/:/g, '\\3a')
        .replace(/</g, '\\3c')
        .replace(/>/g, '\\3e')
        .replace(/@/g, '\\40');
}
JID$8.escapeLocal = escapeLocal;
function unescapeLocal(val) {
    return val
        .replace(/\\20/g, ' ')
        .replace(/\\22/g, '"')
        .replace(/\\26/g, '&')
        .replace(/\\27/g, `'`)
        .replace(/\\2f/g, '/')
        .replace(/\\3a/g, ':')
        .replace(/\\3c/g, '<')
        .replace(/\\3e/g, '>')
        .replace(/\\40/g, '@')
        .replace(/\\5c/g, '\\');
}
JID$8.unescapeLocal = unescapeLocal;
function prepare(data) {
    let local = data.local || '';
    let domain = data.domain;
    let resource = data.resource || '';
    if (local) {
        local = (0, stringprep_1$1.nodeprep)(local);
    }
    if (resource) {
        resource = (0, stringprep_1$1.resourceprep)(resource);
    }
    if (domain[domain.length - 1] === '.') {
        domain = domain.slice(0, domain.length - 1);
    }
    domain = (0, stringprep_1$1.nameprep)(domain.split('.').map(punycode_1$1.default.toUnicode).join('.'));
    return {
        domain,
        local,
        resource
    };
}
JID$8.prepare = prepare;
function create(data, opts = {}) {
    let localPart = data.local;
    if (!opts.escaped) {
        localPart = escapeLocal(data.local);
    }
    const prep = !opts.prepared
        ? prepare({ local: localPart, domain: data.domain, resource: data.resource })
        : data;
    const bareJID = localPart ? `${localPart}@${prep.domain}` : prep.domain;
    if (prep.resource) {
        return `${bareJID}/${prep.resource}`;
    }
    return bareJID;
}
JID$8.create = create;
function createFull(bare, resource) {
    if (resource) {
        return `${toBare(bare)}/${resource}`;
    }
    else {
        return toBare(bare);
    }
}
JID$8.createFull = createFull;
function parse$2(jid = '') {
    let local = '';
    let domain = '';
    let resource = '';
    const resourceStart = jid.indexOf('/');
    if (resourceStart > 0) {
        resource = jid.slice(resourceStart + 1);
        jid = jid.slice(0, resourceStart);
    }
    const localEnd = jid.indexOf('@');
    if (localEnd > 0) {
        local = jid.slice(0, localEnd);
        jid = jid.slice(localEnd + 1);
    }
    domain = jid;
    const prepped = prepare({
        domain,
        local,
        resource
    });
    return {
        bare: create({ local: prepped.local, domain: prepped.domain }, {
            escaped: true,
            prepared: true
        }),
        domain: prepped.domain,
        full: create(prepped, {
            escaped: true,
            prepared: true
        }),
        local: unescapeLocal(prepped.local),
        resource: prepped.resource
    };
}
JID$8.parse = parse$2;
function allowedResponders(jid1, jid2) {
    const allowed = new Set();
    allowed.add(undefined);
    allowed.add('');
    if (jid1) {
        const split1 = parse$2(jid1);
        allowed.add(split1.full);
        allowed.add(split1.bare);
        allowed.add(split1.domain);
    }
    if (jid2) {
        const split2 = parse$2(jid2);
        allowed.add(split2.domain);
        allowed.add(split2.bare);
        allowed.add(split2.full);
    }
    return allowed;
}
JID$8.allowedResponders = allowedResponders;
function equal(jid1, jid2) {
    if (!jid1 || !jid2) {
        return false;
    }
    const parsed1 = parse$2(jid1);
    const parsed2 = parse$2(jid2);
    return (parsed1.local === parsed2.local &&
        parsed1.domain === parsed2.domain &&
        parsed1.resource === parsed2.resource);
}
JID$8.equal = equal;
function equalBare(jid1, jid2) {
    if (!jid1 || !jid2) {
        return false;
    }
    const parsed1 = parse$2(jid1);
    const parsed2 = parse$2(jid2);
    return parsed1.local === parsed2.local && parsed1.domain === parsed2.domain;
}
JID$8.equalBare = equalBare;
function isFull(jid) {
    const parsed = parse$2(jid);
    return !!parsed.resource;
}
JID$8.isFull = isFull;
function isBare(jid) {
    return !isFull(jid);
}
JID$8.isBare = isBare;
function getLocal(jid = '') {
    return parse$2(jid).local;
}
JID$8.getLocal = getLocal;
function getDomain(jid = '') {
    return parse$2(jid).domain;
}
JID$8.getDomain = getDomain;
function getResource(jid = '') {
    return parse$2(jid).resource;
}
JID$8.getResource = getResource;
function toBare(jid = '') {
    return parse$2(jid).bare;
}
var toBare_1 = JID$8.toBare = toBare;
function parseURI(val) {
    const parsed = new URL(val);
    if (parsed.protocol !== 'xmpp:') {
        throw new Error('Invalid XMPP URI, wrong protocol: ' + parsed.protocol);
    }
    const identity = parsed.hostname
        ? parsed.username
            ? create({
                domain: decodeURIComponent(parsed.hostname),
                local: decodeURIComponent(parsed.username)
            }, {
                escaped: true
            })
            : decodeURIComponent(parsed.hostname)
        : undefined;
    const jid = parse$2(decodeURIComponent(identity ? parsed.pathname.substr(1) : parsed.pathname))
        .full;
    const hasParameters = parsed.search && parsed.search.indexOf(';') >= 1;
    const parameterString = hasParameters
        ? parsed.search.substr(parsed.search.indexOf(';') + 1)
        : '';
    const action = parsed.search
        ? decodeURIComponent(parsed.search.substr(1, hasParameters ? parsed.search.indexOf(';') - 1 : undefined))
        : undefined;
    const params = {};
    for (const token of parameterString.split(';')) {
        const [name, value] = token.split('=').map(decodeURIComponent);
        if (!params[name]) {
            params[name] = value;
        }
        else {
            const existing = params[name];
            if (Array.isArray(existing)) {
                existing.push(value);
            }
            else {
                params[name] = [existing, value];
            }
        }
    }
    return {
        action,
        identity,
        jid,
        parameters: params
    };
}
JID$8.parseURI = parseURI;
function toURI(data) {
    const parts = ['xmpp:'];
    const pushJID = (jid, allowResource) => {
        const res = parse$2(jid);
        if (res.local) {
            parts.push(encodeURIComponent(escapeLocal(res.local)));
            parts.push('@');
        }
        parts.push(encodeURIComponent(res.domain));
        if (allowResource && res.resource) {
            parts.push('/');
            parts.push(encodeURIComponent(res.resource));
        }
    };
    if (data.identity) {
        parts.push('//');
        pushJID(data.identity, false);
        if (data.jid) {
            parts.push('/');
        }
    }
    if (data.jid) {
        pushJID(data.jid, true);
    }
    if (data.action) {
        parts.push('?');
        parts.push(encodeURIComponent(data.action));
    }
    for (const [name, values] of Object.entries(data.parameters || {})) {
        for (const val of Array.isArray(values) ? values : [values]) {
            parts.push(';');
            parts.push(encodeURIComponent(name));
            if (val !== undefined) {
                parts.push('=');
                parts.push(encodeURIComponent(val));
            }
        }
    }
    return parts.join('');
}
JID$8.toURI = toURI;

var iterator;
var hasRequiredIterator;

function requireIterator () {
	if (hasRequiredIterator) return iterator;
	hasRequiredIterator = 1;
	iterator = function (Yallist) {
	  Yallist.prototype[Symbol.iterator] = function* () {
	    for (let walker = this.head; walker; walker = walker.next) {
	      yield walker.value;
	    }
	  };
	};
	return iterator;
}

var yallist = Yallist$1;

Yallist$1.Node = Node;
Yallist$1.create = Yallist$1;

function Yallist$1 (list) {
  var self = this;
  if (!(self instanceof Yallist$1)) {
    self = new Yallist$1();
  }

  self.tail = null;
  self.head = null;
  self.length = 0;

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item);
    });
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i]);
    }
  }

  return self
}

Yallist$1.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next;
  var prev = node.prev;

  if (next) {
    next.prev = prev;
  }

  if (prev) {
    prev.next = next;
  }

  if (node === this.head) {
    this.head = next;
  }
  if (node === this.tail) {
    this.tail = prev;
  }

  node.list.length--;
  node.next = null;
  node.prev = null;
  node.list = null;

  return next
};

Yallist$1.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var head = this.head;
  node.list = this;
  node.next = head;
  if (head) {
    head.prev = node;
  }

  this.head = node;
  if (!this.tail) {
    this.tail = node;
  }
  this.length++;
};

Yallist$1.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var tail = this.tail;
  node.list = this;
  node.prev = tail;
  if (tail) {
    tail.next = node;
  }

  this.tail = node;
  if (!this.head) {
    this.head = node;
  }
  this.length++;
};

Yallist$1.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i]);
  }
  return this.length
};

Yallist$1.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i]);
  }
  return this.length
};

Yallist$1.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value;
  this.tail = this.tail.prev;
  if (this.tail) {
    this.tail.next = null;
  } else {
    this.head = null;
  }
  this.length--;
  return res
};

Yallist$1.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value;
  this.head = this.head.next;
  if (this.head) {
    this.head.prev = null;
  } else {
    this.tail = null;
  }
  this.length--;
  return res
};

Yallist$1.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.next;
  }
};

Yallist$1.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.prev;
  }
};

Yallist$1.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next;
  }
  if (i === n && walker !== null) {
    return walker.value
  }
};

Yallist$1.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev;
  }
  if (i === n && walker !== null) {
    return walker.value
  }
};

Yallist$1.prototype.map = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.next;
  }
  return res
};

Yallist$1.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.prev;
  }
  return res
};

Yallist$1.prototype.reduce = function (fn, initial) {
  var acc;
  var walker = this.head;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.head) {
    walker = this.head.next;
    acc = this.head.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i);
    walker = walker.next;
  }

  return acc
};

Yallist$1.prototype.reduceReverse = function (fn, initial) {
  var acc;
  var walker = this.tail;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.tail) {
    walker = this.tail.prev;
    acc = this.tail.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i);
    walker = walker.prev;
  }

  return acc
};

Yallist$1.prototype.toArray = function () {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.next;
  }
  return arr
};

Yallist$1.prototype.toArrayReverse = function () {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.prev;
  }
  return arr
};

Yallist$1.prototype.slice = function (from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next;
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value);
  }
  return ret
};

Yallist$1.prototype.sliceReverse = function (from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev;
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value);
  }
  return ret
};

Yallist$1.prototype.splice = function (start, deleteCount, ...nodes) {
  if (start > this.length) {
    start = this.length - 1;
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next;
  }

  var ret = [];
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value);
    walker = this.removeNode(walker);
  }
  if (walker === null) {
    walker = this.tail;
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev;
  }

  for (var i = 0; i < nodes.length; i++) {
    walker = insert(this, walker, nodes[i]);
  }
  return ret;
};

Yallist$1.prototype.reverse = function () {
  var head = this.head;
  var tail = this.tail;
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev;
    walker.prev = walker.next;
    walker.next = p;
  }
  this.head = tail;
  this.tail = head;
  return this
};

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self);

  if (inserted.next === null) {
    self.tail = inserted;
  }
  if (inserted.prev === null) {
    self.head = inserted;
  }

  self.length++;

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self);
  if (!self.head) {
    self.head = self.tail;
  }
  self.length++;
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self);
  if (!self.tail) {
    self.tail = self.head;
  }
  self.length++;
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list;
  this.value = value;

  if (prev) {
    prev.next = this;
    this.prev = prev;
  } else {
    this.prev = null;
  }

  if (next) {
    next.prev = this;
    this.next = next;
  } else {
    this.next = null;
  }
}

try {
  // add if support for Symbol.iterator is present
  requireIterator()(Yallist$1);
} catch (er) {}

// A linked list to keep track of recently-used-ness
const Yallist = yallist;

const MAX = Symbol('max');
const LENGTH = Symbol('length');
const LENGTH_CALCULATOR = Symbol('lengthCalculator');
const ALLOW_STALE = Symbol('allowStale');
const MAX_AGE = Symbol('maxAge');
const DISPOSE = Symbol('dispose');
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
const LRU_LIST = Symbol('lruList');
const CACHE = Symbol('cache');
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

const naiveLength = () => 1;

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
  constructor (options) {
    if (typeof options === 'number')
      options = { max: options };

    if (!options)
      options = {};

    if (options.max && (typeof options.max !== 'number' || options.max < 0))
      throw new TypeError('max must be a non-negative number')
    // Kind of weird to have a default max of Infinity, but oh well.
    this[MAX] = options.max || Infinity;

    const lc = options.length || naiveLength;
    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
    this[ALLOW_STALE] = options.stale || false;
    if (options.maxAge && typeof options.maxAge !== 'number')
      throw new TypeError('maxAge must be a number')
    this[MAX_AGE] = options.maxAge || 0;
    this[DISPOSE] = options.dispose;
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    this.reset();
  }

  // resize the cache when the max changes.
  set max (mL) {
    if (typeof mL !== 'number' || mL < 0)
      throw new TypeError('max must be a non-negative number')

    this[MAX] = mL || Infinity;
    trim(this);
  }
  get max () {
    return this[MAX]
  }

  set allowStale (allowStale) {
    this[ALLOW_STALE] = !!allowStale;
  }
  get allowStale () {
    return this[ALLOW_STALE]
  }

  set maxAge (mA) {
    if (typeof mA !== 'number')
      throw new TypeError('maxAge must be a non-negative number')

    this[MAX_AGE] = mA;
    trim(this);
  }
  get maxAge () {
    return this[MAX_AGE]
  }

  // resize the cache when the lengthCalculator changes.
  set lengthCalculator (lC) {
    if (typeof lC !== 'function')
      lC = naiveLength;

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC;
      this[LENGTH] = 0;
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
        this[LENGTH] += hit.length;
      });
    }
    trim(this);
  }
  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

  get length () { return this[LENGTH] }
  get itemCount () { return this[LRU_LIST].length }

  rforEach (fn, thisp) {
    thisp = thisp || this;
    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev;
      forEachStep(this, fn, walker, thisp);
      walker = prev;
    }
  }

  forEach (fn, thisp) {
    thisp = thisp || this;
    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next;
      forEachStep(this, fn, walker, thisp);
      walker = next;
    }
  }

  keys () {
    return this[LRU_LIST].toArray().map(k => k.key)
  }

  values () {
    return this[LRU_LIST].toArray().map(k => k.value)
  }

  reset () {
    if (this[DISPOSE] &&
        this[LRU_LIST] &&
        this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
    }

    this[CACHE] = new Map(); // hash of items by key
    this[LRU_LIST] = new Yallist(); // list of items in order of use recency
    this[LENGTH] = 0; // length of items in the list
  }

  dump () {
    return this[LRU_LIST].map(hit =>
      isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h)
  }

  dumpLru () {
    return this[LRU_LIST]
  }

  set (key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE];

    if (maxAge && typeof maxAge !== 'number')
      throw new TypeError('maxAge must be a number')

    const now = maxAge ? Date.now() : 0;
    const len = this[LENGTH_CALCULATOR](value, key);

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key));
        return false
      }

      const node = this[CACHE].get(key);
      const item = node.value;

      // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key, item.value);
      }

      item.now = now;
      item.maxAge = maxAge;
      item.value = value;
      this[LENGTH] += len - item.length;
      item.length = len;
      this.get(key);
      trim(this);
      return true
    }

    const hit = new Entry(key, value, len, now, maxAge);

    // oversized objects fall out of cache automatically.
    if (hit.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key, value);

      return false
    }

    this[LENGTH] += hit.length;
    this[LRU_LIST].unshift(hit);
    this[CACHE].set(key, this[LRU_LIST].head);
    trim(this);
    return true
  }

  has (key) {
    if (!this[CACHE].has(key)) return false
    const hit = this[CACHE].get(key).value;
    return !isStale(this, hit)
  }

  get (key) {
    return get(this, key, true)
  }

  peek (key) {
    return get(this, key, false)
  }

  pop () {
    const node = this[LRU_LIST].tail;
    if (!node)
      return null

    del(this, node);
    return node.value
  }

  del (key) {
    del(this, this[CACHE].get(key));
  }

  load (arr) {
    // reset the cache
    this.reset();

    const now = Date.now();
    // A previous serialized cache has the most recent items first
    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l];
      const expiresAt = hit.e || 0;
      if (expiresAt === 0)
        // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v);
      else {
        const maxAge = expiresAt - now;
        // dont add already expired items
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge);
        }
      }
    }
  }

  prune () {
    this[CACHE].forEach((value, key) => get(this, key, false));
  }
}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key);
  if (node) {
    const hit = node.value;
    if (isStale(self, hit)) {
      del(self, node);
      if (!self[ALLOW_STALE])
        return undefined
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now();
        self[LRU_LIST].unshiftNode(node);
      }
    }
    return hit.value
  }
};

const isStale = (self, hit) => {
  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    return false

  const diff = Date.now() - hit.now;
  return hit.maxAge ? diff > hit.maxAge
    : self[MAX_AGE] && (diff > self[MAX_AGE])
};

const trim = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail;
      self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev;
      del(self, walker);
      walker = prev;
    }
  }
};

const del = (self, node) => {
  if (node) {
    const hit = node.value;
    if (self[DISPOSE])
      self[DISPOSE](hit.key, hit.value);

    self[LENGTH] -= hit.length;
    self[CACHE].delete(hit.key);
    self[LRU_LIST].removeNode(node);
  }
};

class Entry {
  constructor (key, value, length, now, maxAge) {
    this.key = key;
    this.value = value;
    this.length = length;
    this.now = now;
    this.maxAge = maxAge || 0;
  }
}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value;
  if (isStale(self, hit)) {
    del(self, node);
    if (!self[ALLOW_STALE])
      hit = undefined;
  }
  if (hit)
    fn.call(thisp, hit.value, hit.key, self);
};

var lruCache = LRUCache;

var Constants = {};

var Namespaces = {};

(function (exports) {
	// ================================================================
	// RFCS
	// ================================================================
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.NS_AVATAR_METADATA = exports.NS_AVATAR_DATA = exports.NS_ROSTER_DELIMITER = exports.NS_GEOLOC = exports.NS_AMP = exports.NS_INBAND_REGISTRATION = exports.NS_REGISTER = exports.NS_XHTML_IM = exports.NS_XHTML = exports.NS_HTTP_AUTH = exports.NS_OOB_TRANSFER = exports.NS_OOB = exports.NS_SOCKS5 = exports.NS_PUBSUB_OWNER = exports.NS_PUBSUB_EVENT = exports.NS_PUBSUB_ERRORS = exports.NS_PUBSUB = exports.NS_RSM = exports.NS_SEARCH = exports.NS_VCARD_TEMP = exports.NS_ADHOC_COMMANDS = exports.NS_PRIVATE = exports.NS_BOOKMARKS = exports.NS_IBB = exports.NS_MUC_USER = exports.NS_MUC_OWNER = exports.NS_MUC_ADMIN = exports.NS_MUC = exports.NS_ADDRESS = exports.NS_DISCO_ITEMS = exports.NS_DISCO_INFO = exports.NS_LEGACY_CHAT_EVENTS = exports.NS_PRIVACY = exports.NS_LAST_ACTIVITY = exports.NS_RPC = exports.NS_DATAFORM = exports.NS_FRAMING = exports.NS_SUBSCRIPTION_PREAPPROVAL = exports.NS_ROSTER_VERSIONING = exports.NS_ROSTER = exports.NS_STARTTLS = exports.NS_STREAMS = exports.NS_STREAM = exports.NS_STANZAS = exports.NS_SESSION = exports.NS_SERVER = exports.NS_SASL = exports.NS_CLIENT = exports.NS_BIND = exports.NS_ATOM = void 0;
	exports.NS_JINGLE_FILE_TRANSFER_4 = exports.NS_JINGLE_FILE_TRANSFER_3 = exports.NS_SOFTWARE_INFO = exports.NS_BOB = exports.NS_ATTENTION_0 = exports.NS_DATAFORM_MEDIA = exports.NS_DISCO_EXTERNAL_2 = exports.NS_DISCO_EXTERNAL_1 = exports.NS_BOSH_XMPP = exports.NS_DELAY = exports.NS_TIME = exports.NS_PING = exports.NS_SMACKS_3 = exports.NS_BLOCKING_ERRORS = exports.NS_BLOCKING = exports.NS_INVISIBLE_0 = exports.NS_RECEIPTS = exports.NS_JINGLE_RAW_UDP_1 = exports.NS_JINGLE_ICE_UDP_1 = exports.NS_NICK = exports.NS_LANG_TRANS_ITEMS = exports.NS_LANG_TRANS = exports.NS_JINGLE_RTP_VIDEO = exports.NS_JINGLE_RTP_AUDIO = exports.NS_JINGLE_RTP_INFO_1 = exports.NS_JINGLE_RTP_ERRORS_1 = exports.NS_JINGLE_RTP_1 = exports.NS_JINGLE_ERRORS_1 = exports.NS_JINGLE_1 = exports.NS_PEP_NOTIFY = exports.NS_CAPTCHA = exports.NS_ALT_CONNECTIONS_XBOSH = exports.NS_ALT_CONNECTIONS_WEBSOCKET = exports.NS_VCARD_TEMP_UPDATE = exports.NS_REACH_0 = exports.NS_ROSTER_NOTES = exports.NS_ROSTER_EXCHANGE = exports.NS_DATAFORM_LAYOUT = exports.NS_COMPRESSION = exports.NS_COMPRESSION_FEATURE = exports.NS_SHIM = exports.NS_BOSH = exports.NS_DATAFORM_VALIDATION = exports.NS_TUNE = exports.NS_DISCO_LEGACY_CAPS = exports.NS_COMPONENT = exports.NS_ACTIVITY = exports.NS_MOOD = exports.NS_VERSION = exports.NS_CHAT_STATES = void 0;
	exports.NS_OMEMO_AXOLOTL = exports.NS_SPOILER_0 = exports.NS_EME_0 = exports.NS_REFERENCE_0 = exports.NS_JINGLE_ICE_0 = exports.NS_JINGLE_HTTP_UPLOAD_0 = exports.NS_JINGLE_HTTP_0 = exports.NS_HTTP_UPLOAD_0 = exports.NS_SID_0 = exports.NS_JINGLE_PUB_1 = exports.NS_PUSH_0 = exports.NS_DELEGATION_1 = exports.NS_JINGLE_MSG_INITIATE_0 = exports.NS_CSI_0 = exports.NS_JINGLE_DTLS_SCTP_1 = exports.NS_JINGLE_RTP_SSMA_0 = exports.NS_JINGLE_GROUPING_0 = exports.NS_JSON_0 = exports.NS_HINTS = exports.NS_CHAT_MARKERS_0 = exports.NS_JINGLE_DTLS_0 = exports.NS_IDLE_1 = exports.NS_HATS_0 = exports.NS_MAM_2 = exports.NS_MAM_1 = exports.NS_MAM_0 = exports.NS_MAM_TMP = exports.NS_PSA = exports.NS_CORRECTION_0 = exports.NS_MUC_UNIQUE = exports.NS_RTT_0 = exports.NS_HASH_NAME = exports.NS_HASHES_2 = exports.NS_HASHES_1 = exports.NS_FORWARD_0 = exports.NS_JINGLE_RTP_HDREXT_0 = exports.NS_JINGLE_RTP_RTCP_FB_0 = exports.NS_CARBONS_2 = exports.NS_DECLOAKING_0 = exports.NS_THUMBS_1 = exports.NS_THUMBS_0 = exports.NS_JINGLE_RTP_ZRTP_1 = exports.NS_JINGLE_IBB_1 = exports.NS_JINGLE_SOCKS5_1 = exports.NS_SEC_LABEL_ESS_0 = exports.NS_SEC_LABEL_CATALOG_2 = exports.NS_SEC_LABEL_0 = exports.NS_MUC_DIRECT_INVITE = exports.NS_JINGLE_XML_0 = exports.NS_JINGLE_FILE_TRANSFER_5 = void 0;
	exports.NS_JINGLE_RTP_MSID_0 = exports.NS_XRD = exports.NS_JSON_MESSAGE_0 = exports.NS_OMEMO_AXOLOTL_BUNDLE = exports.NS_OMEMO_AXOLOTL_BUNDLES = exports.NS_OMEMO_AXOLOTL_DEVICELIST = void 0;
	// RFC 4287
	exports.NS_ATOM = 'http://www.w3.org/2005/Atom';
	// RFC 6120
	exports.NS_BIND = 'urn:ietf:params:xml:ns:xmpp-bind';
	exports.NS_CLIENT = 'jabber:client';
	exports.NS_SASL = 'urn:ietf:params:xml:ns:xmpp-sasl';
	exports.NS_SERVER = 'jabber:server';
	exports.NS_SESSION = 'urn:ietf:params:xml:ns:xmpp-session';
	exports.NS_STANZAS = 'urn:ietf:params:xml:ns:xmpp-stanzas';
	exports.NS_STREAM = 'http://etherx.jabber.org/streams';
	exports.NS_STREAMS = 'urn:ietf:params:xml:ns:xmpp-streams';
	exports.NS_STARTTLS = 'urn:ietf:params:xml:ns:xmpp-tls';
	// RFC 6121
	exports.NS_ROSTER = 'jabber:iq:roster';
	exports.NS_ROSTER_VERSIONING = 'urn:xmpp:features:rosterver';
	exports.NS_SUBSCRIPTION_PREAPPROVAL = 'urn:xmpp:features:pre-approval';
	// RFC 7395
	exports.NS_FRAMING = 'urn:ietf:params:xml:ns:xmpp-framing';
	// ================================================================
	// XEPS
	// ================================================================
	// XEP-0004
	exports.NS_DATAFORM = 'jabber:x:data';
	// XEP-0009
	exports.NS_RPC = 'jabber:iq:rpc';
	// XEP-0012
	exports.NS_LAST_ACTIVITY = 'jabber:iq:last';
	// XEP-0016
	exports.NS_PRIVACY = 'jabber:iq:privacy';
	// XEP-0022
	exports.NS_LEGACY_CHAT_EVENTS = 'jabber:x:event';
	// XEP-0030
	exports.NS_DISCO_INFO = 'http://jabber.org/protocol/disco#info';
	exports.NS_DISCO_ITEMS = 'http://jabber.org/protocol/disco#items';
	// XEP-0033
	exports.NS_ADDRESS = 'http://jabber.org/protocol/address';
	// XEP-0045
	exports.NS_MUC = 'http://jabber.org/protocol/muc';
	exports.NS_MUC_ADMIN = 'http://jabber.org/protocol/muc#admin';
	exports.NS_MUC_OWNER = 'http://jabber.org/protocol/muc#owner';
	exports.NS_MUC_USER = 'http://jabber.org/protocol/muc#user';
	// XEP-0047
	exports.NS_IBB = 'http://jabber.org/protocol/ibb';
	// XEP-0048
	exports.NS_BOOKMARKS = 'storage:bookmarks';
	// XEP-0049
	exports.NS_PRIVATE = 'jabber:iq:private';
	// XEP-0050
	exports.NS_ADHOC_COMMANDS = 'http://jabber.org/protocol/commands';
	// XEP-0054
	exports.NS_VCARD_TEMP = 'vcard-temp';
	// XEP-0055
	exports.NS_SEARCH = 'jabber:iq:search';
	// XEP-0059
	exports.NS_RSM = 'http://jabber.org/protocol/rsm';
	// XEP-0060
	exports.NS_PUBSUB = 'http://jabber.org/protocol/pubsub';
	exports.NS_PUBSUB_ERRORS = 'http://jabber.org/protocol/pubsub#errors';
	exports.NS_PUBSUB_EVENT = 'http://jabber.org/protocol/pubsub#event';
	exports.NS_PUBSUB_OWNER = 'http://jabber.org/protocol/pubsub#owner';
	// XEP-0065
	exports.NS_SOCKS5 = 'http://jabber.org/protocol/bytestreams';
	// XEP-0066
	exports.NS_OOB = 'jabber:x:oob';
	exports.NS_OOB_TRANSFER = 'jabber:iq:oob';
	// XEP-0070
	exports.NS_HTTP_AUTH = 'http://jabber.org/protocol/http-auth';
	// XEP-0071
	exports.NS_XHTML = 'http://www.w3.org/1999/xhtml';
	exports.NS_XHTML_IM = 'http://jabber.org/protocol/xhtml-im';
	// XEP-0077
	exports.NS_REGISTER = 'jabber:iq:register';
	exports.NS_INBAND_REGISTRATION = 'http://jabber.org/features/iq-register';
	// XEP-0079
	exports.NS_AMP = 'http://jabber.org/protocol/amp';
	// XEP-0080
	exports.NS_GEOLOC = 'http://jabber.org/protocol/geoloc';
	// XEP-0083
	exports.NS_ROSTER_DELIMITER = 'roster:delimiter';
	// XEP-0084
	exports.NS_AVATAR_DATA = 'urn:xmpp:avatar:data';
	exports.NS_AVATAR_METADATA = 'urn:xmpp:avatar:metadata';
	// XEP-0085
	exports.NS_CHAT_STATES = 'http://jabber.org/protocol/chatstates';
	// XEP-0092
	exports.NS_VERSION = 'jabber:iq:version';
	// XEP-0107
	exports.NS_MOOD = 'http://jabber.org/protocol/mood';
	// XEP-0108
	exports.NS_ACTIVITY = 'http://jabber.org/protocol/activity';
	// XEP-0114
	exports.NS_COMPONENT = 'jabber:component:accept';
	// XEP-0115
	exports.NS_DISCO_LEGACY_CAPS = 'http://jabber.org/protocol/caps';
	// XEP-0118
	exports.NS_TUNE = 'http://jabber.org/protocol/tune';
	// XEP-0122
	exports.NS_DATAFORM_VALIDATION = 'http://jabber.org/protocol/xdata-validate';
	// XEP-0124
	exports.NS_BOSH = 'http://jabber.org/protocol/httpbind';
	// XEP-0131
	exports.NS_SHIM = 'http://jabber.org/protocol/shim';
	// XEP-0138
	exports.NS_COMPRESSION_FEATURE = 'http://jabber.org/features/compress';
	exports.NS_COMPRESSION = 'http://jabber.org/protocol/compress';
	// XEP-0141
	exports.NS_DATAFORM_LAYOUT = 'http://jabber.org/protocol/xdata-layout';
	// XEP-0144
	exports.NS_ROSTER_EXCHANGE = 'http://jabber.org/protocol/rosterx';
	// XEP-0145
	exports.NS_ROSTER_NOTES = 'storage:rosternotes';
	// XEP-0152
	exports.NS_REACH_0 = 'urn:xmpp:reach:0';
	// XEP-0153
	exports.NS_VCARD_TEMP_UPDATE = 'vcard-temp:x:update';
	// XEP-0156
	exports.NS_ALT_CONNECTIONS_WEBSOCKET = 'urn:xmpp:alt-connections:websocket';
	exports.NS_ALT_CONNECTIONS_XBOSH = 'urn:xmpp:alt-connections:xbosh';
	// XEP-0158
	exports.NS_CAPTCHA = 'urn:xmpp:captcha';
	// XEP-0163
	const NS_PEP_NOTIFY = (ns) => `${ns}+notify`;
	exports.NS_PEP_NOTIFY = NS_PEP_NOTIFY;
	// XEP-0166
	exports.NS_JINGLE_1 = 'urn:xmpp:jingle:1';
	exports.NS_JINGLE_ERRORS_1 = 'urn:xmpp:jingle:errors:1';
	// XEP-0167
	exports.NS_JINGLE_RTP_1 = 'urn:xmpp:jingle:apps:rtp:1';
	exports.NS_JINGLE_RTP_ERRORS_1 = 'urn:xmpp:jingle:apps:rtp:errors:1';
	exports.NS_JINGLE_RTP_INFO_1 = 'urn:xmpp:jingle:apps:rtp:info:1';
	exports.NS_JINGLE_RTP_AUDIO = 'urn:xmpp:jingle:apps:rtp:audio';
	exports.NS_JINGLE_RTP_VIDEO = 'urn:xmpp:jingle:apps:rtp:video';
	// XEP-0171
	exports.NS_LANG_TRANS = 'urn:xmpp:langtrans';
	exports.NS_LANG_TRANS_ITEMS = 'urn:xmpp:langtrans:items';
	// XEP-0172
	exports.NS_NICK = 'http://jabber.org/protocol/nick';
	// XEP-0176
	exports.NS_JINGLE_ICE_UDP_1 = 'urn:xmpp:jingle:transports:ice-udp:1';
	// XEP-0177
	exports.NS_JINGLE_RAW_UDP_1 = 'urn:xmpp:jingle:transports:raw-udp:1';
	// XEP-0184
	exports.NS_RECEIPTS = 'urn:xmpp:receipts';
	// XEP-0186
	exports.NS_INVISIBLE_0 = 'urn:xmpp:invisible:0';
	// XEP-0191
	exports.NS_BLOCKING = 'urn:xmpp:blocking';
	exports.NS_BLOCKING_ERRORS = 'urn:xmpp:blocking:errors';
	// XEP-0198
	exports.NS_SMACKS_3 = 'urn:xmpp:sm:3';
	// XEP-0199
	exports.NS_PING = 'urn:xmpp:ping';
	// XEP-0202
	exports.NS_TIME = 'urn:xmpp:time';
	// XEP-0203
	exports.NS_DELAY = 'urn:xmpp:delay';
	// XEP-0206
	exports.NS_BOSH_XMPP = 'urn:xmpp:xbosh';
	// XEP-0215
	exports.NS_DISCO_EXTERNAL_1 = 'urn:xmpp:extdisco:1';
	exports.NS_DISCO_EXTERNAL_2 = 'urn:xmpp:extdisco:2';
	// XEP-0221
	exports.NS_DATAFORM_MEDIA = 'urn:xmpp:media-element';
	// XEP-0224
	exports.NS_ATTENTION_0 = 'urn:xmpp:attention:0';
	// XEP-0231
	exports.NS_BOB = 'urn:xmpp:bob';
	// XEP-0232
	exports.NS_SOFTWARE_INFO = 'urn:xmpp:dataforms:softwareinfo';
	// XEP-0234
	exports.NS_JINGLE_FILE_TRANSFER_3 = 'urn:xmpp:jingle:apps:file-transfer:3';
	exports.NS_JINGLE_FILE_TRANSFER_4 = 'urn:xmpp:jingle:apps:file-transfer:4';
	exports.NS_JINGLE_FILE_TRANSFER_5 = 'urn:xmpp:jingle:apps:file-transfer:5';
	// XEP-0247
	exports.NS_JINGLE_XML_0 = 'urn:xmpp:jingle:apps:xmlstream:0';
	// XEP-0249
	exports.NS_MUC_DIRECT_INVITE = 'jabber:x:conference';
	// XEP-0258
	exports.NS_SEC_LABEL_0 = 'urn:xmpp:sec-label:0';
	exports.NS_SEC_LABEL_CATALOG_2 = 'urn:xmpp:sec-label:catalog:2';
	exports.NS_SEC_LABEL_ESS_0 = 'urn:xmpp:sec-label:ess:0';
	// XEP-0260
	exports.NS_JINGLE_SOCKS5_1 = 'urn:xmpp:jingle:transports:s5b:1';
	// XEP-0261
	exports.NS_JINGLE_IBB_1 = 'urn:xmpp:jingle:transports:ibb:1';
	// XEP-0262
	exports.NS_JINGLE_RTP_ZRTP_1 = 'urn:xmpp:jingle:apps:rtp:zrtp:1';
	// XEP-0264
	exports.NS_THUMBS_0 = 'urn:xmpp:thumbs:0';
	exports.NS_THUMBS_1 = 'urn:xmpp:thumbs:1';
	// XEP-0276
	exports.NS_DECLOAKING_0 = 'urn:xmpp:decloaking:0';
	// XEP-0280
	exports.NS_CARBONS_2 = 'urn:xmpp:carbons:2';
	// XEP-0293
	exports.NS_JINGLE_RTP_RTCP_FB_0 = 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0';
	// XEP-0294
	exports.NS_JINGLE_RTP_HDREXT_0 = 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0';
	// XEP-0297
	exports.NS_FORWARD_0 = 'urn:xmpp:forward:0';
	// XEP-0300
	exports.NS_HASHES_1 = 'urn:xmpp:hashes:1';
	exports.NS_HASHES_2 = 'urn:xmpp:hashes:2';
	const NS_HASH_NAME = (name) => `urn:xmpp:hash-function-text-names:${name}`;
	exports.NS_HASH_NAME = NS_HASH_NAME;
	// XEP-0301
	exports.NS_RTT_0 = 'urn:xmpp:rtt:0';
	// XEP-0307
	exports.NS_MUC_UNIQUE = 'http://jabber.org/protocol/muc#unique';
	// XEP-308
	exports.NS_CORRECTION_0 = 'urn:xmpp:message-correct:0';
	// XEP-0310
	exports.NS_PSA = 'urn:xmpp:psa';
	// XEP-0313
	exports.NS_MAM_TMP = 'urn:xmpp:mam:tmp';
	exports.NS_MAM_0 = 'urn:xmpp:mam:0';
	exports.NS_MAM_1 = 'urn:xmpp:mam:1';
	exports.NS_MAM_2 = 'urn:xmpp:mam:2';
	// XEP-0317
	exports.NS_HATS_0 = 'urn:xmpp:hats:0';
	// XEP-0319
	exports.NS_IDLE_1 = 'urn:xmpp:idle:1';
	// XEP-0320
	exports.NS_JINGLE_DTLS_0 = 'urn:xmpp:jingle:apps:dtls:0';
	// XEP-0333
	exports.NS_CHAT_MARKERS_0 = 'urn:xmpp:chat-markers:0';
	// XEP-0334
	exports.NS_HINTS = 'urn:xmpp:hints';
	// XEP-0335
	exports.NS_JSON_0 = 'urn:xmpp:json:0';
	// XEP-0338
	exports.NS_JINGLE_GROUPING_0 = 'urn:xmpp:jingle:apps:grouping:0';
	// XEP-0339
	exports.NS_JINGLE_RTP_SSMA_0 = 'urn:xmpp:jingle:apps:rtp:ssma:0';
	// XEP-0343
	exports.NS_JINGLE_DTLS_SCTP_1 = 'urn:xmpp:jingle:transports:dtls-sctp:1';
	// XEP-0352
	exports.NS_CSI_0 = 'urn:xmpp:csi:0';
	// XEP-0353
	exports.NS_JINGLE_MSG_INITIATE_0 = 'urn:xmpp:jingle:jingle-message:0';
	// XEP-0355
	exports.NS_DELEGATION_1 = 'urn:xmpp:delegation:1';
	// XEP-0357
	exports.NS_PUSH_0 = 'urn:xmpp:push:0';
	// XEP-0358
	exports.NS_JINGLE_PUB_1 = 'urn:xmpp:jinglepub:1';
	// XEP-0359
	exports.NS_SID_0 = 'urn:xmpp:sid:0';
	// XEP-0363
	exports.NS_HTTP_UPLOAD_0 = 'urn:xmpp:http:upload:0';
	// XEP-0370
	exports.NS_JINGLE_HTTP_0 = 'urn:xmpp:jingle:transports:http:0';
	exports.NS_JINGLE_HTTP_UPLOAD_0 = 'urn:xmpp:jingle:transports:http:upload:0';
	// XEP-0371
	exports.NS_JINGLE_ICE_0 = 'urn:xmpp:jingle:transports:ice:0';
	// XEP-0372
	exports.NS_REFERENCE_0 = 'urn:xmpp:reference:0';
	// XEP-0380
	exports.NS_EME_0 = 'urn:xmpp:eme:0';
	// XEP-0382
	exports.NS_SPOILER_0 = 'urn:xmpp:spoiler:0';
	// XEP-0384
	exports.NS_OMEMO_AXOLOTL = 'eu.siacs.conversations.axolotl';
	exports.NS_OMEMO_AXOLOTL_DEVICELIST = 'eu.siacs.conversations.axolotl.devicelist';
	exports.NS_OMEMO_AXOLOTL_BUNDLES = 'eu.siacs.conversations.axolotl.bundles';
	// istanbul ignore next
	const NS_OMEMO_AXOLOTL_BUNDLE = (deviceId) => `${exports.NS_OMEMO_AXOLOTL_BUNDLES}:${deviceId}`;
	exports.NS_OMEMO_AXOLOTL_BUNDLE = NS_OMEMO_AXOLOTL_BUNDLE;
	// XEP-0432
	exports.NS_JSON_MESSAGE_0 = 'urn:xmpp:json-msg:0';
	// ================================================================
	// Other Standards
	// ================================================================
	// Extensible Resource Descriptor (XRD) Version 1.0
	// http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html
	exports.NS_XRD = 'http://docs.oasis-open.org/ns/xri/xrd-1.0';
	// ====================================================================
	// Not yet standardized
	// ====================================================================
	exports.NS_JINGLE_RTP_MSID_0 = 'urn:xmpp:jingle:apps:rtp:msid:0';
} (Namespaces));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.directionToSenders = exports.sendersToDirection = exports.JINGLE_INFO_RECEIVED_5 = exports.JINGLE_INFO_CHECKSUM_5 = exports.JINGLE_INFO_RINGING = exports.JINGLE_INFO_ACTIVE = exports.JINGLE_INFO_UNHOLD = exports.JINGLE_INFO_HOLD = exports.JINGLE_INFO_UNMUTE = exports.JINGLE_INFO_MUTE = exports.JINGLE_INFO = exports.USER_ACTIVITY_SPECIFIC = exports.USER_ACTIVITY_GENERAL = exports.USER_MOODS = exports.JingleReasonCondition = exports.JingleErrorCondition = exports.JingleAction = exports.JingleContentSenders = exports.JingleApplicationDirection = exports.JingleSessionRole = exports.ChatState = exports.PubsubErrorCondition = exports.MUCStatusCode = exports.MUCRole = exports.MUCAffiliation = exports.DataFormFieldType = exports.DataFormType = exports.RosterSubscription = exports.PresenceShow = exports.IQType = exports.PresenceType = exports.MessageType = exports.StanzaErrorCondition = exports.StreamErrorCondition = exports.SASLFailureCondition = exports.StreamType = exports.VERSION = void 0;
	const Namespaces_1 = Namespaces;
	exports.VERSION = '12.20.0';
	// ====================================================================
	// Frequently Used Values
	// ====================================================================
	const NotAuthorized = 'not-authorized';
	// ====================================================================
	// Named Enum Constants
	// ====================================================================
	exports.StreamType = {
	    Bosh: Namespaces_1.NS_BOSH,
	    Client: Namespaces_1.NS_CLIENT,
	    Component: Namespaces_1.NS_COMPONENT,
	    Server: Namespaces_1.NS_SERVER
	};
	exports.SASLFailureCondition = {
	    AccountDisabled: 'account-disabled',
	    CredentialsExpired: 'credentials-expired',
	    EncryptionRequired: 'encryption-required',
	    IncorrectEncoding: 'incorrect-encoding',
	    InvalidAuthzid: 'invalid-authzid',
	    InvalidMechanism: 'invalid-mechanism',
	    MalformedRequest: 'malformed-request',
	    MechanismTooWeak: 'mechanism-too-weak',
	    NotAuthorized,
	    TemporaryAuthFailure: 'temporary-auth-failure'
	};
	exports.StreamErrorCondition = {
	    BadFormat: 'bad-format',
	    BadNamespacePrefix: 'bad-namespace-prefix',
	    Conflict: 'conflict',
	    ConnectionTimeout: 'connection-timeout',
	    HostGone: 'host-gone',
	    HostUnknown: 'host-unknown',
	    ImproperAddressing: 'improper-addressing',
	    InternalServerError: 'internal-server-error',
	    InvalidFrom: 'invalid-from',
	    InvalidId: 'invalid-id',
	    InvalidNamespace: 'invalid-namespace',
	    InvalidXML: 'invalid-xml',
	    NotAuthorized,
	    NotWellFormed: 'not-well-formed',
	    PolicyViolation: 'policy-violation',
	    RemoteConnectionFailed: 'remote-connection-failed',
	    Reset: 'reset',
	    ResourceConstraint: 'resource-constraint',
	    RestrictedXML: 'restricted-xml',
	    SeeOtherHost: 'see-other-host',
	    SystemShutdown: 'system-shutdown',
	    UndefinedCondition: 'undefined-condition',
	    UnsupportedEncoding: 'unsupported-encoding',
	    UnsupportedStanzaType: 'unsupported-stanza-type',
	    UnsupportedVersion: 'unsupported-version'
	};
	exports.StanzaErrorCondition = {
	    BadRequest: 'bad-request',
	    Conflict: 'conflict',
	    FeatureNotImplemented: 'feature-not-implemented',
	    Forbidden: 'forbidden',
	    Gone: 'gone',
	    InternalServerError: 'internal-server-error',
	    ItemNotFound: 'item-not-found',
	    JIDMalformed: 'jid-malformed',
	    NotAcceptable: 'not-acceptable',
	    NotAllowed: 'not-allowed',
	    NotAuthorized,
	    PolicyViolation: 'policy-violation',
	    RecipientUnavailable: 'recipient-unavailable',
	    Redirect: 'redirect',
	    RegistrationRequired: 'registration-required',
	    RemoteServerNotFound: 'remote-server-not-found',
	    RemoteServerTimeout: 'remote-server-timeout',
	    ResourceConstraint: 'resource-constraint',
	    ServiceUnavailable: 'service-unavailable',
	    SubscriptionRequired: 'subscription-required',
	    UndefinedCondition: 'undefined-condition',
	    UnexpectedRequest: 'unexpected-request'
	};
	exports.MessageType = {
	    Chat: 'chat',
	    Error: 'error',
	    GroupChat: 'groupchat',
	    Headline: 'headline',
	    Normal: 'normal'
	};
	exports.PresenceType = {
	    Available: undefined,
	    Error: 'error',
	    Probe: 'probe',
	    Subscribe: 'subscribe',
	    Subscribed: 'subscribed',
	    Unavailable: 'unavailable',
	    Unsubscribe: 'unsubscribe',
	    Unsubscribed: 'unsubscribed'
	};
	exports.IQType = {
	    Error: 'error',
	    Get: 'get',
	    Result: 'result',
	    Set: 'set'
	};
	exports.PresenceShow = {
	    Away: 'away',
	    Chat: 'chat',
	    DoNotDisturb: 'dnd',
	    ExtendedAway: 'xa'
	};
	exports.RosterSubscription = {
	    Both: 'both',
	    From: 'from',
	    None: 'none',
	    ReceivePresenceOnly: 'to',
	    Remove: 'remove',
	    SendAndReceivePresence: 'both',
	    SendPresenceOnly: 'from',
	    To: 'to'
	};
	exports.DataFormType = {
	    Cancel: 'cancel',
	    Form: 'form',
	    Result: 'result',
	    Submit: 'submit'
	};
	exports.DataFormFieldType = {
	    Boolean: 'boolean',
	    Fixed: 'fixed',
	    Hidden: 'hidden',
	    JID: 'jid-single',
	    JIDMultiple: 'jid-multi',
	    List: 'list-single',
	    ListMultiple: 'list-multi',
	    Password: 'text-private',
	    Text: 'text-single',
	    TextMultiple: 'text-multi',
	    TextPrivate: 'text-private'
	};
	exports.MUCAffiliation = {
	    Admin: 'admin',
	    Banned: 'outcast',
	    Member: 'member',
	    None: 'none',
	    Outcast: 'outcast',
	    Owner: 'owner'
	};
	exports.MUCRole = {
	    Moderator: 'moderator',
	    None: 'none',
	    Participant: 'participant',
	    Visitor: 'visitor'
	};
	exports.MUCStatusCode = {
	    AffiliationChanged: '101',
	    AffiliationLost: '321',
	    Banned: '301',
	    Error: '333',
	    Kicked: '307',
	    LoggingDisabled: '171',
	    LoggingEnabled: '170',
	    MembershipLost: '322',
	    NickChanged: '303',
	    NickChangedByService: '210',
	    NonAnonymous: '172',
	    NonAnonymousRoom: '100',
	    NonPrivacyConfigurationChange: '104',
	    RoomCreated: '201',
	    SelfPresence: '110',
	    SemiAnonymous: '173',
	    Shutdown: '332',
	    UnavailableMembersListed: '102',
	    UnavailableMembersNotListed: '103'
	};
	exports.PubsubErrorCondition = {
	    ClosedNode: 'closed-node',
	    ConfigurationRequired: 'configuration-required',
	    InvalidJID: 'invalid-jid',
	    InvalidOptions: 'invalid-options',
	    InvalidPayload: 'invalid-payload',
	    InvalidSubscriptionId: 'invalid-subid',
	    ItemForbidden: 'item-forbidden',
	    ItemRequired: 'item-required',
	    JIDRequired: 'jid-required',
	    MaxItemsExceeded: 'max-items-exceeded',
	    MaxNodesExceeded: 'max-nodes-exceeded',
	    NodeIdRequired: 'nodeid-required',
	    NotInRosterGroup: 'not-in-roster-group',
	    NotSubscribed: 'not-subscribed',
	    PayloadRequired: 'payload-required',
	    PayloadTooBig: 'payload-too-big',
	    PendingSubscription: 'pending-subscription',
	    PresenceSubscriptionRequired: 'presence-subscription-required',
	    SubscriptionIdRequired: 'subid-required',
	    TooManySubscriptions: 'too-many-subscriptions',
	    Unsupported: 'unsupported',
	    UnsupportedAccessModel: 'unsupported-access-model'
	};
	exports.ChatState = {
	    Active: 'active',
	    Composing: 'composing',
	    Gone: 'gone',
	    Inactive: 'inactive',
	    Paused: 'paused'
	};
	exports.JingleSessionRole = {
	    Initiator: 'initiator',
	    Responder: 'responder'
	};
	exports.JingleApplicationDirection = {
	    Inactive: 'inactive',
	    Receive: 'recvonly',
	    Send: 'sendonly',
	    SendReceive: 'sendrecv'
	};
	exports.JingleContentSenders = {
	    Both: 'both',
	    Initiator: 'initiator',
	    None: 'none',
	    Responder: 'responder'
	};
	exports.JingleAction = {
	    ContentAccept: 'content-accept',
	    ContentAdd: 'content-add',
	    ContentModify: 'content-modify',
	    ContentReject: 'content-reject',
	    ContentRemove: 'content-remove',
	    DescriptionInfo: 'description-info',
	    SecurityInfo: 'security-info',
	    SessionAccept: 'session-accept',
	    SessionInfo: 'session-info',
	    SessionInitiate: 'session-initiate',
	    SessionTerminate: 'session-terminate',
	    TransportAccept: 'transport-accept',
	    TransportInfo: 'transport-info',
	    TransportReject: 'transport-reject',
	    TransportReplace: 'transport-replace'
	};
	exports.JingleErrorCondition = {
	    OutOfOrder: 'out-of-order',
	    TieBreak: 'tie-break',
	    UnknownContent: 'unknown-content',
	    UnknownSession: 'unknown-session',
	    UnsupportedInfo: 'unsupported-info'
	};
	exports.JingleReasonCondition = {
	    AlternativeSession: 'alternative-session',
	    Busy: 'busy',
	    Cancel: 'cancel',
	    ConnectivityError: 'connectivity-error',
	    Decline: 'decline',
	    Expired: 'expired',
	    FailedApplication: 'failed-application',
	    FailedTransport: 'failed-transport',
	    GeneralError: 'general-error',
	    Gone: 'gone',
	    IncompatibleParameters: 'incompatible-parameters',
	    MediaError: 'media-error',
	    SecurityError: 'security-error',
	    Success: 'success',
	    Timeout: 'timeout',
	    UnsupportedApplications: 'unsupported-applications',
	    UnsupportedTransports: 'unsupported-transports'
	};
	// ====================================================================
	// Standalone Constants
	// ====================================================================
	exports.USER_MOODS = [
	    'afraid',
	    'amazed',
	    'amorous',
	    'angry',
	    'annoyed',
	    'anxious',
	    'aroused',
	    'ashamed',
	    'bored',
	    'brave',
	    'calm',
	    'cautious',
	    'cold',
	    'confident',
	    'confused',
	    'contemplative',
	    'contented',
	    'cranky',
	    'crazy',
	    'creative',
	    'curious',
	    'dejected',
	    'depressed',
	    'disappointed',
	    'disgusted',
	    'dismayed',
	    'distracted',
	    'embarrassed',
	    'envious',
	    'excited',
	    'flirtatious',
	    'frustrated',
	    'grateful',
	    'grieving',
	    'grumpy',
	    'guilty',
	    'happy',
	    'hopeful',
	    'hot',
	    'humbled',
	    'humiliated',
	    'hungry',
	    'hurt',
	    'impressed',
	    'in_awe',
	    'in_love',
	    'indignant',
	    'interested',
	    'intoxicated',
	    'invincible',
	    'jealous',
	    'lonely',
	    'lost',
	    'lucky',
	    'mean',
	    'moody',
	    'nervous',
	    'neutral',
	    'offended',
	    'outraged',
	    'playful',
	    'proud',
	    'relaxed',
	    'relieved',
	    'remorseful',
	    'restless',
	    'sad',
	    'sarcastic',
	    'satisfied',
	    'serious',
	    'shocked',
	    'shy',
	    'sick',
	    'sleepy',
	    'spontaneous',
	    'stressed',
	    'strong',
	    'surprised',
	    'thankful',
	    'thirsty',
	    'tired',
	    'undefined',
	    'weak',
	    'worried'
	];
	exports.USER_ACTIVITY_GENERAL = [
	    'doing_chores',
	    'drinking',
	    'eating',
	    'exercising',
	    'grooming',
	    'having_appointment',
	    'inactive',
	    'relaxing',
	    'talking',
	    'traveling',
	    'undefined',
	    'working'
	];
	exports.USER_ACTIVITY_SPECIFIC = [
	    'at_the_spa',
	    'brushing_teeth',
	    'buying_groceries',
	    'cleaning',
	    'coding',
	    'commuting',
	    'cooking',
	    'cycling',
	    'cycling',
	    'dancing',
	    'day_off',
	    'doing_maintenance',
	    'doing_the_dishes',
	    'doing_the_laundry',
	    'driving',
	    'fishing',
	    'gaming',
	    'gardening',
	    'getting_a_haircut',
	    'going_out',
	    'hanging_out',
	    'having_a_beer',
	    'having_a_snack',
	    'having_breakfast',
	    'having_coffee',
	    'having_dinner',
	    'having_lunch',
	    'having_tea',
	    'hiding',
	    'hiking',
	    'in_a_car',
	    'in_a_meeting',
	    'in_real_life',
	    'jogging',
	    'on_a_bus',
	    'on_a_plane',
	    'on_a_train',
	    'on_a_trip',
	    'on_the_phone',
	    'on_vacation',
	    'on_video_phone',
	    'other',
	    'partying',
	    'playing_sports',
	    'praying',
	    'reading',
	    'rehearsing',
	    'running',
	    'running_an_errand',
	    'scheduled_holiday',
	    'shaving',
	    'shopping',
	    'skiing',
	    'sleeping',
	    'smoking',
	    'socializing',
	    'studying',
	    'sunbathing',
	    'swimming',
	    'taking_a_bath',
	    'taking_a_shower',
	    'thinking',
	    'walking',
	    'walking_the_dog',
	    'watching_a_movie',
	    'watching_tv',
	    'working_out',
	    'writing'
	];
	const JINGLE_INFO = (namespace, name) => `{${namespace}}${name}`;
	exports.JINGLE_INFO = JINGLE_INFO;
	exports.JINGLE_INFO_MUTE = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_RTP_INFO_1, 'mute');
	exports.JINGLE_INFO_UNMUTE = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_RTP_INFO_1, 'unmute');
	exports.JINGLE_INFO_HOLD = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_RTP_INFO_1, 'hold');
	exports.JINGLE_INFO_UNHOLD = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_RTP_INFO_1, 'unhold');
	exports.JINGLE_INFO_ACTIVE = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_RTP_INFO_1, 'active');
	exports.JINGLE_INFO_RINGING = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_RTP_INFO_1, 'ringing');
	exports.JINGLE_INFO_CHECKSUM_5 = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_FILE_TRANSFER_5, 'checksum');
	exports.JINGLE_INFO_RECEIVED_5 = (0, exports.JINGLE_INFO)(Namespaces_1.NS_JINGLE_FILE_TRANSFER_5, 'received');
	// ====================================================================
	// Helper Functions
	// ====================================================================
	function sendersToDirection(role, senders = exports.JingleContentSenders.Both) {
	    const isInitiator = role === exports.JingleSessionRole.Initiator;
	    switch (senders) {
	        case exports.JingleContentSenders.Initiator:
	            return isInitiator
	                ? exports.JingleApplicationDirection.Send
	                : exports.JingleApplicationDirection.Receive;
	        case exports.JingleContentSenders.Responder:
	            return isInitiator
	                ? exports.JingleApplicationDirection.Receive
	                : exports.JingleApplicationDirection.Send;
	        case exports.JingleContentSenders.Both:
	            return exports.JingleApplicationDirection.SendReceive;
	    }
	    return exports.JingleApplicationDirection.Inactive;
	}
	exports.sendersToDirection = sendersToDirection;
	function directionToSenders(role, direction = exports.JingleApplicationDirection.SendReceive) {
	    const isInitiator = role === exports.JingleSessionRole.Initiator;
	    switch (direction) {
	        case exports.JingleApplicationDirection.Send:
	            return isInitiator ? exports.JingleContentSenders.Initiator : exports.JingleContentSenders.Responder;
	        case exports.JingleApplicationDirection.Receive:
	            return isInitiator ? exports.JingleContentSenders.Responder : exports.JingleContentSenders.Initiator;
	        case exports.JingleApplicationDirection.SendReceive:
	            return exports.JingleContentSenders.Both;
	    }
	    return exports.JingleContentSenders.None;
	}
	exports.directionToSenders = directionToSenders;
} (Constants));

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var lodash_throttle = throttle;

var browserama_min = {exports: {}};

(function (module, exports) {
	!function(e,n){module.exports=n();}(commonjsGlobal,function(){var e="undefined"==typeof window,n=!1,i=!1,o=!1,r=!1,t=!1,d=!1,w=!1,u=!1,a=!1,m=!1;return e||(n="undefined"!=typeof InstallTrigger,i=!!window.chrome,o=!(!window.chrome||!window.navigator||!window.navigator.plugins||!window.navigator.plugins.namedItem("Chrome PDF Plugin")&&!window.chrome.runtime),r=i&&!window.chrome.webstore&&!window.chrome.runtime,t=0<Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")||window.safari&&window.safari.pushNotification,d=!!window.opr&&!!window.opr.addons||!!window.opera,w=!!window.StyleMedia,u=i&&!!navigator.userAgent.match(/edg/i),a=(o||d)&&!!window.CSS,m=!(i||t||n||d||!document.documentMode)),{get isChrome(){return o},get isChromeOrChromium(){return i},get isChromium(){return r},get isFirefox(){return n},get isSafari(){return t},get isOpera(){return d},get isEdge(){return w},get isEdgeChromium(){return u},get isIE(){return m},get isBlink(){return a}}});
} (browserama_min));

var jxt = {};

var Element = {};

var Definitions = {};

var _Error = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JXTErrorCondition = void 0;
	var JXTErrorCondition;
	(function (JXTErrorCondition) {
	    JXTErrorCondition["NotWellFormed"] = "not-well-formed";
	    JXTErrorCondition["RestrictedXML"] = "restricted-xml";
	    JXTErrorCondition["AlreadyClosed"] = "already-closed";
	    JXTErrorCondition["UnknownRoot"] = "unknown-stream-root";
	})(JXTErrorCondition = exports.JXTErrorCondition || (exports.JXTErrorCondition = {}));
	class JXTError extends Error {
	    constructor(opts) {
	        super(opts.text);
	        this.isJXTError = true;
	        this.condition = opts.condition;
	        this.text = opts.text;
	    }
	    static notWellFormed(text) {
	        return new JXTError({
	            condition: JXTErrorCondition.NotWellFormed,
	            text
	        });
	    }
	    static restrictedXML(text) {
	        return new JXTError({
	            condition: JXTErrorCondition.RestrictedXML,
	            text
	        });
	    }
	    static alreadyClosed(text) {
	        return new JXTError({
	            condition: JXTErrorCondition.AlreadyClosed,
	            text
	        });
	    }
	    static unknownRoot(text) {
	        return new JXTError({
	            condition: JXTErrorCondition.UnknownRoot,
	            text
	        });
	    }
	}
	exports.default = JXTError;
} (_Error));

Object.defineProperty(Definitions, "__esModule", { value: true });
Definitions.basicLanguageResolver = Definitions.escapeXMLText = Definitions.unescapeXML = Definitions.escapeXML = void 0;
const tslib_1$r = require$$0;
const Error_1$2 = (0, tslib_1$r.__importDefault)(_Error);
const ESCAPE_XML_CHAR = {
    '"': '&quot;',
    '&': '&amp;',
    "'": '&apos;',
    '<': '&lt;',
    '>': '&gt;'
};
const UNESCAPE_XML_CHAR = {
    '&amp;': '&',
    '&apos;': "'",
    '&gt;': '>',
    '&lt;': '<',
    '&quot;': '"'
};
const ESCAPE_SEQUENCE = /&([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);/g;
const NEED_ESCAPING = /&|<|>|"|'/g;
const NEED_ESCAPING_TEXT = /&|<|>/g;
function escapeXMLReplaceChar(match) {
    return ESCAPE_XML_CHAR[match];
}
function unescapeXMLReplaceChar(match) {
    if (UNESCAPE_XML_CHAR[match]) {
        return UNESCAPE_XML_CHAR[match];
    }
    const hex = match.startsWith('&#x');
    const code = parseInt(match.substring(hex ? 3 : 2, match.length - 1), hex ? 16 : 10);
    if (code === 0x9 ||
        code === 0xa ||
        code === 0xd ||
        (0x20 <= code && code <= 0xd7ff) ||
        (0xe000 <= code && code <= 0xfffd) ||
        (0x10000 <= code && code <= 0x10ffff)) {
        return String.fromCodePoint(code);
    }
    throw Error_1$2.default.restrictedXML('Prohibited entity: ' + match);
}
function escapeXML(text) {
    return text.replace(NEED_ESCAPING, escapeXMLReplaceChar);
}
Definitions.escapeXML = escapeXML;
function unescapeXML(text) {
    return text.replace(ESCAPE_SEQUENCE, match => {
        return unescapeXMLReplaceChar(match);
    });
}
Definitions.unescapeXML = unescapeXML;
function escapeXMLText(text) {
    return text.replace(NEED_ESCAPING_TEXT, escapeXMLReplaceChar);
}
Definitions.escapeXMLText = escapeXMLText;
function basicLanguageResolver(available, accept = [], current = '') {
    const avail = new Set(available.map(a => a.toLowerCase()));
    for (let acceptLang of accept.map(a => a.toLowerCase())) {
        if (acceptLang === '*') {
            continue;
        }
        while (acceptLang.length > 0) {
            if (avail.has(acceptLang)) {
                return acceptLang;
            }
            // Remove ending tag
            acceptLang = acceptLang.substring(0, acceptLang.lastIndexOf('-')).toLowerCase();
            // Remove leftover single character tag
            if (acceptLang.lastIndexOf('-') === acceptLang.length - 2) {
                acceptLang = acceptLang.substring(0, acceptLang.lastIndexOf('-'));
            }
        }
    }
    return current;
}
Definitions.basicLanguageResolver = basicLanguageResolver;

Object.defineProperty(Element, "__esModule", { value: true });
const Definitions_1$2 = Definitions;
class XMLElement {
    constructor(name, attrs = {}, children = []) {
        this.name = name;
        this.attributes = attrs;
        this.children = [];
        this.optionalNamespaces = {};
        for (const child of children) {
            if (typeof child !== 'string') {
                const xmlChild = new XMLElement(child.name, child.attributes, child.children);
                xmlChild.parent = this;
                this.children.push(xmlChild);
            }
            else {
                this.children.push(child);
            }
        }
    }
    getName() {
        if (this.name.indexOf(':') >= 0) {
            return this.name.substr(this.name.indexOf(':') + 1);
        }
        else {
            return this.name;
        }
    }
    getNamespace() {
        if (this.name.indexOf(':') >= 0) {
            const prefix = this.name.substr(0, this.name.indexOf(':'));
            return this.findNamespaceForPrefix(prefix);
        }
        return this.findNamespaceForPrefix();
    }
    getNamespaceContext() {
        let namespaces = {};
        if (this.parent) {
            namespaces = this.parent.getNamespaceContext();
        }
        for (const [attr, value] of Object.entries(this.attributes)) {
            if (attr.startsWith('xmlns:')) {
                const prefix = attr.substr(6);
                namespaces[value] = prefix;
            }
        }
        return namespaces;
    }
    getDefaultNamespace() {
        if (this.attributes.xmlns) {
            return this.attributes.xmlns;
        }
        if (this.parent) {
            return this.parent.getDefaultNamespace();
        }
        return '';
    }
    getNamespaceRoot(namespace) {
        if (this.parent) {
            const parentRoot = this.parent.getNamespaceRoot(namespace);
            if (parentRoot) {
                return parentRoot;
            }
        }
        for (const [attr, value] of Object.entries(this.attributes)) {
            if (attr.startsWith('xmlns:') && value === namespace) {
                return this;
            }
        }
        if (this.optionalNamespaces[namespace]) {
            return this;
        }
        return undefined;
    }
    getAttribute(name, xmlns) {
        if (!xmlns) {
            return this.attributes[name];
        }
        const namespaces = this.getNamespaceContext();
        if (!namespaces[xmlns]) {
            return undefined;
        }
        return this.attributes[[namespaces[xmlns], name].join(':')];
    }
    getChild(name, xmlns) {
        return this.getChildren(name, xmlns)[0];
    }
    getChildren(name, xmlns) {
        const result = [];
        for (const child of this.children) {
            if (typeof child !== 'string' &&
                child.getName() === name &&
                (!xmlns || child.getNamespace() === xmlns)) {
                result.push(child);
            }
        }
        return result;
    }
    getText() {
        let text = '';
        for (const child of this.children) {
            if (typeof child === 'string') {
                text += child;
            }
        }
        return text;
    }
    appendChild(child) {
        this.children.push(child);
        if (typeof child !== 'string') {
            child.parent = this;
        }
        return child;
    }
    setAttribute(attr, val, force = false) {
        this.attributes[attr] = val || undefined;
        if (val === '' && force) {
            this.attributes[attr] = val;
        }
    }
    addOptionalNamespace(prefix, namespace) {
        this.optionalNamespaces[namespace] = prefix;
    }
    useNamespace(prefix, namespace) {
        if (this.optionalNamespaces[namespace]) {
            prefix = this.optionalNamespaces[namespace];
        }
        this.setAttribute(`xmlns:${prefix}`, namespace);
        return prefix;
    }
    toJSON() {
        const children = this.children
            .map(child => {
            if (typeof child === 'string') {
                return child;
            }
            if (child) {
                return child.toJSON();
            }
        })
            .filter(child => !!child);
        // Strip any undefined/null attributes
        const attrs = {};
        for (const [key, val] of Object.entries(this.attributes)) {
            if (val !== undefined && val !== null) {
                attrs[key] = val;
            }
        }
        return {
            attributes: attrs,
            children,
            name: this.name
        };
    }
    toString() {
        let output = this.openTag(true);
        if (this.children.length) {
            for (const child of this.children) {
                if (typeof child === 'string') {
                    output += (0, Definitions_1$2.escapeXMLText)(child);
                }
                else if (child) {
                    output += child.toString();
                }
            }
            output += this.closeTag();
        }
        return output;
    }
    openTag(allowSelfClose = false) {
        let output = '';
        output += `<${this.name}`;
        for (const [key, value] of Object.entries(this.attributes)) {
            if (value !== undefined) {
                output += ` ${key}="${(0, Definitions_1$2.escapeXML)(value.toString())}"`;
            }
        }
        if (allowSelfClose && this.children.length === 0) {
            output += '/>';
        }
        else {
            output += '>';
        }
        return output;
    }
    closeTag() {
        return `</${this.name}>`;
    }
    findNamespaceForPrefix(prefix) {
        if (!prefix) {
            if (this.attributes.xmlns) {
                return this.attributes.xmlns;
            }
            else if (this.parent) {
                return this.parent.findNamespaceForPrefix();
            }
        }
        else {
            const attr = 'xmlns:' + prefix;
            if (this.attributes[attr]) {
                return this.attributes[attr];
            }
            else if (this.parent) {
                return this.parent.findNamespaceForPrefix(prefix);
            }
        }
        return '';
    }
}
Element.default = XMLElement;

var Registry$1 = {};

var XHTMLIM = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from: xhtml-im.js, Copyright © 2013 Waqas Hussain
 */
Object.defineProperty(XHTMLIM, "__esModule", { value: true });
const ALLOWED_ELEMENTS = new Set([
    'a',
    'blockquote',
    'br',
    'cite',
    'em',
    'img',
    'li',
    'ol',
    'p',
    'span',
    'strong',
    'ul'
]);
const style = new Set(['style']);
const ALLOWED_ATTRIBUTES = new Map([
    ['a', new Set(['href', 'style'])],
    ['body', new Set(['style', 'xml:lang'])],
    ['blockquote', style],
    ['br', style],
    ['cite', style],
    ['em', style],
    ['img', new Set(['alt', 'height', 'src', 'style', 'width'])],
    ['li', style],
    ['ol', style],
    ['p', style],
    ['span', style],
    ['strong', style],
    ['ul', style]
]);
const CSS_RULES = new Map([
    ['font-style', /normal|italic|oblique|inherit/i],
    ['font-weight', /normal|bold|bolder|lighter|inherit|\d\d\d/i],
    ['text-decoration', /none|underline|overline|line-through|blink|inherit/i]
    // These properties are allowed by XHTML-IM, but really only cause UX issues:
    //  background-color
    //  color
    //  font-family
    //  font-size
    //  margin-left
    //  margin-right
    //  text-align
]);
const sanitizeCSS = (css) => {
    const declarations = `;${css}` // Declarations are ; delimited, not terminated
        .replace(/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, '') // Strip comments
        .replace(/\/\*.*/, '') // Strip unclosed comments
        .replace(/\\([a-fA-F0-9]{1,6})\s?/, (_, x) => String.fromCharCode(parseInt(x, 16))) // Decode escape sequences
        .match(/;\s*([a-z-]+)\s*:\s*([^;]*[^\s;])\s*/g); // Split into declarations
    const rules = [];
    if (!declarations) {
        return false;
    }
    for (const declaration of declarations) {
        const parts = declaration.match(/^;\s*([a-z-]+)\s*:\s*([^;]*[^\s])\s*$/);
        if (!parts) {
            continue;
        }
        const sanitizer = CSS_RULES.get(parts[1]);
        if (sanitizer) {
            const value = parts[2].match(sanitizer);
            if (value) {
                rules.push(`${parts[1]}:${value[0]}`);
            }
        }
    }
    if (rules.length) {
        return rules.join('');
    }
    return false;
};
const sanitizeURL = (url) => {
    return (!!url.match(/^(https?|xmpp|cid|mailto|ftps?|im|ircs?|sips?|tel|geo|bitcoin|magnet):/i) &&
        url);
};
const sanitizeNumber = (num) => {
    return !!num.match(/^[0-9]*$/) && num;
};
const ATTRIBUTE_SANITIZERS = {
    alt: text => text,
    height: sanitizeNumber,
    href: sanitizeURL,
    src: sanitizeURL,
    style: sanitizeCSS,
    width: sanitizeNumber
};
function stripElement(input) {
    let results = [];
    for (const child of input.children) {
        if (typeof child === 'string') {
            results.push(child);
        }
        else {
            const sanitized = sanitizeInterior(child);
            if (sanitized) {
                if (Array.isArray(sanitized)) {
                    results = results.concat(sanitized);
                }
                else {
                    results.push(sanitized);
                }
            }
        }
    }
    return results;
}
function sanitizeInterior(input) {
    if (typeof input === 'string') {
        return input;
    }
    if (!ALLOWED_ELEMENTS.has(input.name)) {
        if (input.name === 'script') {
            return;
        }
        return stripElement(input);
    }
    const children = input.children
        .map(sanitizeInterior)
        .filter(child => child !== undefined);
    const attributes = {};
    for (const [key, value] of Object.entries(input.attributes)) {
        const allowed = ALLOWED_ATTRIBUTES.get(input.name);
        if (!allowed || !allowed.has(key)) {
            continue;
        }
        if (!value) {
            continue;
        }
        const sanitized = ATTRIBUTE_SANITIZERS[key](value);
        if (!sanitized) {
            continue;
        }
        attributes[key] = sanitized;
    }
    return {
        attributes,
        children,
        name: input.name
    };
}
function sanitizeRoot(input) {
    if (typeof input === 'string') {
        return;
    }
    let children = [];
    for (const child of input.children) {
        if (!child) {
            continue;
        }
        if (typeof child === 'string') {
            children.push(child);
            continue;
        }
        const sanitized = sanitizeInterior(child);
        if (Array.isArray(sanitized)) {
            children = children.concat(sanitized);
        }
        else if (sanitized) {
            children.push(sanitized);
        }
    }
    const attributes = {};
    if (input.name !== 'body') {
        return;
    }
    if (input.attributes.xmlns !== undefined) {
        attributes.xmlns = input.attributes.xmlns;
    }
    if (input.attributes.style) {
        attributes.style = input.attributes.style;
    }
    if (input.attributes['xml:lang'] !== undefined) {
        attributes['xml:lang'] = input.attributes['xml:lang'];
    }
    return {
        attributes,
        children,
        name: 'body'
    };
}
XHTMLIM.default = sanitizeRoot;

var Translator$1 = {};

var Types = {};

var browser = {};

var buffer = {};

var base64Js = {};

base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1)
        validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);
    return [validLen, placeHoldersLen];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for (i = 0; i < len; i += 4) {
        tmp =
            (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xff;
        arr[curByte++] = (tmp >> 8) & 0xff;
        arr[curByte++] = tmp & 0xff;
    }
    if (placeHoldersLen === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xff;
    }
    if (placeHoldersLen === 1) {
        tmp =
            (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xff;
        arr[curByte++] = tmp & 0xff;
    }
    return arr;
}
function tripletToBase64(num) {
    return (lookup[(num >> 18) & 0x3f] +
        lookup[(num >> 12) & 0x3f] +
        lookup[(num >> 6) & 0x3f] +
        lookup[num & 0x3f]);
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
        tmp =
            ((uint8[i] << 16) & 0xff0000) + ((uint8[i + 1] << 8) & 0xff00) + (uint8[i + 2] & 0xff);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');
    }
    else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[(tmp >> 4) & 0x3f] + lookup[(tmp << 2) & 0x3f] + '=');
    }
    return parts.join('');
}

var ieee754 = {};

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & ((1 << -nBits) - 1);
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) { }
    m = e & ((1 << -nBits) - 1);
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) { }
    if (e === 0) {
        e = 1 - eBias;
    }
    else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
    }
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    }
    else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) {
            value += rt / c;
        }
        else {
            value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        }
        else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        }
        else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }
    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }
    buffer[offset + i - d] |= s * 128;
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

(function (exports) {
	const base64 = base64Js;
	const ieee754$1 = ieee754;
	const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
	    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
	    : null;
	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;
	const K_MAX_LENGTH = 0x7fffffff;
	exports.kMaxLength = K_MAX_LENGTH;
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
	if (!Buffer.TYPED_ARRAY_SUPPORT &&
	    typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	    console.error('This browser lacks typed array (Uint8Array) support which is required by ' +
	        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
	}
	function typedArraySupport() {
	    // Can typed array instances can be augmented?
	    try {
	        const arr = new Uint8Array(1);
	        const proto = {
	            foo: function () {
	                return 42;
	            }
	        };
	        Object.setPrototypeOf(proto, Uint8Array.prototype);
	        Object.setPrototypeOf(arr, proto);
	        return arr.foo() === 42;
	    }
	    catch (e) {
	        return false;
	    }
	}
	Object.defineProperty(Buffer.prototype, 'parent', {
	    enumerable: true,
	    get: function () {
	        if (!Buffer.isBuffer(this))
	            return undefined;
	        return this.buffer;
	    }
	});
	Object.defineProperty(Buffer.prototype, 'offset', {
	    enumerable: true,
	    get: function () {
	        if (!Buffer.isBuffer(this))
	            return undefined;
	        return this.byteOffset;
	    }
	});
	function createBuffer(length) {
	    if (length > K_MAX_LENGTH) {
	        throw new RangeError('The value "' + length + '" is invalid for option "size"');
	    }
	    // Return an augmented `Uint8Array` instance
	    const buf = new Uint8Array(length);
	    Object.setPrototypeOf(buf, Buffer.prototype);
	    return buf;
	}
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	function Buffer(arg, encodingOrOffset, length) {
	    // Common case.
	    if (typeof arg === 'number') {
	        if (typeof encodingOrOffset === 'string') {
	            throw new TypeError('The "string" argument must be of type string. Received type number');
	        }
	        return allocUnsafe(arg);
	    }
	    return from(arg, encodingOrOffset, length);
	}
	Buffer.poolSize = 8192; // not used by this implementation
	function from(value, encodingOrOffset, length) {
	    if (typeof value === 'string') {
	        return fromString(value, encodingOrOffset);
	    }
	    if (ArrayBuffer.isView(value)) {
	        return fromArrayView(value);
	    }
	    if (value == null) {
	        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	            'or Array-like Object. Received type ' +
	            typeof value);
	    }
	    if (isInstance(value, ArrayBuffer) || (value && isInstance(value.buffer, ArrayBuffer))) {
	        return fromArrayBuffer(value, encodingOrOffset, length);
	    }
	    if (typeof SharedArrayBuffer !== 'undefined' &&
	        (isInstance(value, SharedArrayBuffer) ||
	            (value && isInstance(value.buffer, SharedArrayBuffer)))) {
	        return fromArrayBuffer(value, encodingOrOffset, length);
	    }
	    if (typeof value === 'number') {
	        throw new TypeError('The "value" argument must not be of type number. Received type number');
	    }
	    const valueOf = value.valueOf && value.valueOf();
	    if (valueOf != null && valueOf !== value) {
	        return Buffer.from(valueOf, encodingOrOffset, length);
	    }
	    const b = fromObject(value);
	    if (b)
	        return b;
	    if (typeof Symbol !== 'undefined' &&
	        Symbol.toPrimitive != null &&
	        typeof value[Symbol.toPrimitive] === 'function') {
	        return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
	    }
	    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	        'or Array-like Object. Received type ' +
	        typeof value);
	}
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	    return from(value, encodingOrOffset, length);
	};
	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
	Object.setPrototypeOf(Buffer, Uint8Array);
	function assertSize(size) {
	    if (typeof size !== 'number') {
	        throw new TypeError('"size" argument must be of type number');
	    }
	    else if (size < 0) {
	        throw new RangeError('The value "' + size + '" is invalid for option "size"');
	    }
	}
	function alloc(size, fill, encoding) {
	    assertSize(size);
	    if (size <= 0) {
	        return createBuffer(size);
	    }
	    if (fill !== undefined) {
	        // Only pay attention to encoding if it's a string. This
	        // prevents accidentally sending in a number that would
	        // be interpreted as a start offset.
	        return typeof encoding === 'string'
	            ? createBuffer(size).fill(fill, encoding)
	            : createBuffer(size).fill(fill);
	    }
	    return createBuffer(size);
	}
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	    return alloc(size, fill, encoding);
	};
	function allocUnsafe(size) {
	    assertSize(size);
	    return createBuffer(size < 0 ? 0 : checked(size) | 0);
	}
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	    return allocUnsafe(size);
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	    return allocUnsafe(size);
	};
	function fromString(string, encoding) {
	    if (typeof encoding !== 'string' || encoding === '') {
	        encoding = 'utf8';
	    }
	    if (!Buffer.isEncoding(encoding)) {
	        throw new TypeError('Unknown encoding: ' + encoding);
	    }
	    const length = byteLength(string, encoding) | 0;
	    let buf = createBuffer(length);
	    const actual = buf.write(string, encoding);
	    if (actual !== length) {
	        // Writing a hex string, for example, that contains invalid characters will
	        // cause everything after the first invalid character to be ignored. (e.g.
	        // 'abxxcd' will be treated as 'ab')
	        buf = buf.slice(0, actual);
	    }
	    return buf;
	}
	function fromArrayLike(array) {
	    const length = array.length < 0 ? 0 : checked(array.length) | 0;
	    const buf = createBuffer(length);
	    for (let i = 0; i < length; i += 1) {
	        buf[i] = array[i] & 255;
	    }
	    return buf;
	}
	function fromArrayView(arrayView) {
	    if (isInstance(arrayView, Uint8Array)) {
	        const copy = new Uint8Array(arrayView);
	        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
	    }
	    return fromArrayLike(arrayView);
	}
	function fromArrayBuffer(array, byteOffset, length) {
	    if (byteOffset < 0 || array.byteLength < byteOffset) {
	        throw new RangeError('"offset" is outside of buffer bounds');
	    }
	    if (array.byteLength < byteOffset + (length || 0)) {
	        throw new RangeError('"length" is outside of buffer bounds');
	    }
	    let buf;
	    if (byteOffset === undefined && length === undefined) {
	        buf = new Uint8Array(array);
	    }
	    else if (length === undefined) {
	        buf = new Uint8Array(array, byteOffset);
	    }
	    else {
	        buf = new Uint8Array(array, byteOffset, length);
	    }
	    // Return an augmented `Uint8Array` instance
	    Object.setPrototypeOf(buf, Buffer.prototype);
	    return buf;
	}
	function fromObject(obj) {
	    if (Buffer.isBuffer(obj)) {
	        const len = checked(obj.length) | 0;
	        const buf = createBuffer(len);
	        if (buf.length === 0) {
	            return buf;
	        }
	        obj.copy(buf, 0, 0, len);
	        return buf;
	    }
	    if (obj.length !== undefined) {
	        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	            return createBuffer(0);
	        }
	        return fromArrayLike(obj);
	    }
	    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	        return fromArrayLike(obj.data);
	    }
	}
	function checked(length) {
	    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	    // length is NaN (which is otherwise coerced to zero.)
	    if (length >= K_MAX_LENGTH) {
	        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	            'size: 0x' +
	            K_MAX_LENGTH.toString(16) +
	            ' bytes');
	    }
	    return length | 0;
	}
	function SlowBuffer(length) {
	    if (+length != length) {
	        // eslint-disable-line eqeqeq
	        length = 0;
	    }
	    return Buffer.alloc(+length);
	}
	Buffer.isBuffer = function isBuffer(b) {
	    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
	};
	Buffer.compare = function compare(a, b) {
	    if (isInstance(a, Uint8Array))
	        a = Buffer.from(a, a.offset, a.byteLength);
	    if (isInstance(b, Uint8Array))
	        b = Buffer.from(b, b.offset, b.byteLength);
	    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
	    }
	    if (a === b)
	        return 0;
	    let x = a.length;
	    let y = b.length;
	    for (let i = 0, len = Math.min(x, y); i < len; ++i) {
	        if (a[i] !== b[i]) {
	            x = a[i];
	            y = b[i];
	            break;
	        }
	    }
	    if (x < y)
	        return -1;
	    if (y < x)
	        return 1;
	    return 0;
	};
	Buffer.isEncoding = function isEncoding(encoding) {
	    switch (String(encoding).toLowerCase()) {
	        case 'hex':
	        case 'utf8':
	        case 'utf-8':
	        case 'ascii':
	        case 'latin1':
	        case 'binary':
	        case 'base64':
	        case 'ucs2':
	        case 'ucs-2':
	        case 'utf16le':
	        case 'utf-16le':
	            return true;
	        default:
	            return false;
	    }
	};
	Buffer.concat = function concat(list, length) {
	    if (!Array.isArray(list)) {
	        throw new TypeError('"list" argument must be an Array of Buffers');
	    }
	    if (list.length === 0) {
	        return Buffer.alloc(0);
	    }
	    let i;
	    if (length === undefined) {
	        length = 0;
	        for (i = 0; i < list.length; ++i) {
	            length += list[i].length;
	        }
	    }
	    const buffer = Buffer.allocUnsafe(length);
	    let pos = 0;
	    for (i = 0; i < list.length; ++i) {
	        let buf = list[i];
	        if (isInstance(buf, Uint8Array)) {
	            if (pos + buf.length > buffer.length) {
	                if (!Buffer.isBuffer(buf))
	                    buf = Buffer.from(buf);
	                buf.copy(buffer, pos);
	            }
	            else {
	                Uint8Array.prototype.set.call(buffer, buf, pos);
	            }
	        }
	        else if (!Buffer.isBuffer(buf)) {
	            throw new TypeError('"list" argument must be an Array of Buffers');
	        }
	        else {
	            buf.copy(buffer, pos);
	        }
	        pos += buf.length;
	    }
	    return buffer;
	};
	function byteLength(string, encoding) {
	    if (Buffer.isBuffer(string)) {
	        return string.length;
	    }
	    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
	        return string.byteLength;
	    }
	    if (typeof string !== 'string') {
	        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
	            'Received type ' +
	            typeof string);
	    }
	    const len = string.length;
	    const mustMatch = arguments.length > 2 && arguments[2] === true;
	    if (!mustMatch && len === 0)
	        return 0;
	    // Use a for loop to avoid recursion
	    let loweredCase = false;
	    for (;;) {
	        switch (encoding) {
	            case 'ascii':
	            case 'latin1':
	            case 'binary':
	                return len;
	            case 'utf8':
	            case 'utf-8':
	                return utf8ToBytes(string).length;
	            case 'ucs2':
	            case 'ucs-2':
	            case 'utf16le':
	            case 'utf-16le':
	                return len * 2;
	            case 'hex':
	                return len >>> 1;
	            case 'base64':
	                return base64ToBytes(string).length;
	            default:
	                if (loweredCase) {
	                    return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
	                }
	                encoding = ('' + encoding).toLowerCase();
	                loweredCase = true;
	        }
	    }
	}
	Buffer.byteLength = byteLength;
	function slowToString(encoding, start, end) {
	    let loweredCase = false;
	    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	    // property of a typed array.
	    // This behaves neither like String nor Uint8Array in that we set start/end
	    // to their upper/lower bounds if the value passed is out of range.
	    // undefined is handled specially as per ECMA-262 6th Edition,
	    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	    if (start === undefined || start < 0) {
	        start = 0;
	    }
	    // Return early if start > this.length. Done here to prevent potential uint32
	    // coercion fail below.
	    if (start > this.length) {
	        return '';
	    }
	    if (end === undefined || end > this.length) {
	        end = this.length;
	    }
	    if (end <= 0) {
	        return '';
	    }
	    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
	    end >>>= 0;
	    start >>>= 0;
	    if (end <= start) {
	        return '';
	    }
	    if (!encoding)
	        encoding = 'utf8';
	    while (true) {
	        switch (encoding) {
	            case 'hex':
	                return hexSlice(this, start, end);
	            case 'utf8':
	            case 'utf-8':
	                return utf8Slice(this, start, end);
	            case 'ascii':
	                return asciiSlice(this, start, end);
	            case 'latin1':
	            case 'binary':
	                return latin1Slice(this, start, end);
	            case 'base64':
	                return base64Slice(this, start, end);
	            case 'ucs2':
	            case 'ucs-2':
	            case 'utf16le':
	            case 'utf-16le':
	                return utf16leSlice(this, start, end);
	            default:
	                if (loweredCase)
	                    throw new TypeError('Unknown encoding: ' + encoding);
	                encoding = (encoding + '').toLowerCase();
	                loweredCase = true;
	        }
	    }
	}
	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true;
	function swap(b, n, m) {
	    const i = b[n];
	    b[n] = b[m];
	    b[m] = i;
	}
	Buffer.prototype.swap16 = function swap16() {
	    const len = this.length;
	    if (len % 2 !== 0) {
	        throw new RangeError('Buffer size must be a multiple of 16-bits');
	    }
	    for (let i = 0; i < len; i += 2) {
	        swap(this, i, i + 1);
	    }
	    return this;
	};
	Buffer.prototype.swap32 = function swap32() {
	    const len = this.length;
	    if (len % 4 !== 0) {
	        throw new RangeError('Buffer size must be a multiple of 32-bits');
	    }
	    for (let i = 0; i < len; i += 4) {
	        swap(this, i, i + 3);
	        swap(this, i + 1, i + 2);
	    }
	    return this;
	};
	Buffer.prototype.swap64 = function swap64() {
	    const len = this.length;
	    if (len % 8 !== 0) {
	        throw new RangeError('Buffer size must be a multiple of 64-bits');
	    }
	    for (let i = 0; i < len; i += 8) {
	        swap(this, i, i + 7);
	        swap(this, i + 1, i + 6);
	        swap(this, i + 2, i + 5);
	        swap(this, i + 3, i + 4);
	    }
	    return this;
	};
	Buffer.prototype.toString = function toString() {
	    const length = this.length;
	    if (length === 0)
	        return '';
	    if (arguments.length === 0)
	        return utf8Slice(this, 0, length);
	    return slowToString.apply(this, arguments);
	};
	Buffer.prototype.toLocaleString = Buffer.prototype.toString;
	Buffer.prototype.equals = function equals(b) {
	    if (!Buffer.isBuffer(b))
	        throw new TypeError('Argument must be a Buffer');
	    if (this === b)
	        return true;
	    return Buffer.compare(this, b) === 0;
	};
	Buffer.prototype.inspect = function inspect() {
	    let str = '';
	    const max = exports.INSPECT_MAX_BYTES;
	    str = this.toString('hex', 0, max)
	        .replace(/(.{2})/g, '$1 ')
	        .trim();
	    if (this.length > max)
	        str += ' ... ';
	    return '<Buffer ' + str + '>';
	};
	if (customInspectSymbol) {
	    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
	}
	Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
	    if (isInstance(target, Uint8Array)) {
	        target = Buffer.from(target, target.offset, target.byteLength);
	    }
	    if (!Buffer.isBuffer(target)) {
	        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' +
	            'Received type ' +
	            typeof target);
	    }
	    if (start === undefined) {
	        start = 0;
	    }
	    if (end === undefined) {
	        end = target ? target.length : 0;
	    }
	    if (thisStart === undefined) {
	        thisStart = 0;
	    }
	    if (thisEnd === undefined) {
	        thisEnd = this.length;
	    }
	    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	        throw new RangeError('out of range index');
	    }
	    if (thisStart >= thisEnd && start >= end) {
	        return 0;
	    }
	    if (thisStart >= thisEnd) {
	        return -1;
	    }
	    if (start >= end) {
	        return 1;
	    }
	    start >>>= 0;
	    end >>>= 0;
	    thisStart >>>= 0;
	    thisEnd >>>= 0;
	    if (this === target)
	        return 0;
	    let x = thisEnd - thisStart;
	    let y = end - start;
	    const len = Math.min(x, y);
	    const thisCopy = this.slice(thisStart, thisEnd);
	    const targetCopy = target.slice(start, end);
	    for (let i = 0; i < len; ++i) {
	        if (thisCopy[i] !== targetCopy[i]) {
	            x = thisCopy[i];
	            y = targetCopy[i];
	            break;
	        }
	    }
	    if (x < y)
	        return -1;
	    if (y < x)
	        return 1;
	    return 0;
	};
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
	    // Empty buffer means no match
	    if (buffer.length === 0)
	        return -1;
	    // Normalize byteOffset
	    if (typeof byteOffset === 'string') {
	        encoding = byteOffset;
	        byteOffset = 0;
	    }
	    else if (byteOffset > 0x7fffffff) {
	        byteOffset = 0x7fffffff;
	    }
	    else if (byteOffset < -0x80000000) {
	        byteOffset = -0x80000000;
	    }
	    byteOffset = +byteOffset; // Coerce to Number.
	    if (numberIsNaN(byteOffset)) {
	        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	        byteOffset = dir ? 0 : buffer.length - 1;
	    }
	    // Normalize byteOffset: negative offsets start from the end of the buffer
	    if (byteOffset < 0)
	        byteOffset = buffer.length + byteOffset;
	    if (byteOffset >= buffer.length) {
	        if (dir)
	            return -1;
	        else
	            byteOffset = buffer.length - 1;
	    }
	    else if (byteOffset < 0) {
	        if (dir)
	            byteOffset = 0;
	        else
	            return -1;
	    }
	    // Normalize val
	    if (typeof val === 'string') {
	        val = Buffer.from(val, encoding);
	    }
	    // Finally, search either indexOf (if dir is true) or lastIndexOf
	    if (Buffer.isBuffer(val)) {
	        // Special case: looking for empty string/buffer always fails
	        if (val.length === 0) {
	            return -1;
	        }
	        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
	    }
	    else if (typeof val === 'number') {
	        val = val & 0xff; // Search for a byte value [0-255]
	        if (typeof Uint8Array.prototype.indexOf === 'function') {
	            if (dir) {
	                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
	            }
	            else {
	                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
	            }
	        }
	        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
	    }
	    throw new TypeError('val must be string, number or Buffer');
	}
	function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
	    let indexSize = 1;
	    let arrLength = arr.length;
	    let valLength = val.length;
	    if (encoding !== undefined) {
	        encoding = String(encoding).toLowerCase();
	        if (encoding === 'ucs2' ||
	            encoding === 'ucs-2' ||
	            encoding === 'utf16le' ||
	            encoding === 'utf-16le') {
	            if (arr.length < 2 || val.length < 2) {
	                return -1;
	            }
	            indexSize = 2;
	            arrLength /= 2;
	            valLength /= 2;
	            byteOffset /= 2;
	        }
	    }
	    function read(buf, i) {
	        if (indexSize === 1) {
	            return buf[i];
	        }
	        else {
	            return buf.readUInt16BE(i * indexSize);
	        }
	    }
	    let i;
	    if (dir) {
	        let foundIndex = -1;
	        for (i = byteOffset; i < arrLength; i++) {
	            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	                if (foundIndex === -1)
	                    foundIndex = i;
	                if (i - foundIndex + 1 === valLength)
	                    return foundIndex * indexSize;
	            }
	            else {
	                if (foundIndex !== -1)
	                    i -= i - foundIndex;
	                foundIndex = -1;
	            }
	        }
	    }
	    else {
	        if (byteOffset + valLength > arrLength)
	            byteOffset = arrLength - valLength;
	        for (i = byteOffset; i >= 0; i--) {
	            let found = true;
	            for (let j = 0; j < valLength; j++) {
	                if (read(arr, i + j) !== read(val, j)) {
	                    found = false;
	                    break;
	                }
	            }
	            if (found)
	                return i;
	        }
	    }
	    return -1;
	}
	Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
	    return this.indexOf(val, byteOffset, encoding) !== -1;
	};
	Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
	    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	};
	Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
	    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	};
	function hexWrite(buf, string, offset, length) {
	    offset = Number(offset) || 0;
	    const remaining = buf.length - offset;
	    if (!length) {
	        length = remaining;
	    }
	    else {
	        length = Number(length);
	        if (length > remaining) {
	            length = remaining;
	        }
	    }
	    const strLen = string.length;
	    if (length > strLen / 2) {
	        length = strLen / 2;
	    }
	    let i;
	    for (i = 0; i < length; ++i) {
	        const parsed = parseInt(string.substr(i * 2, 2), 16);
	        if (numberIsNaN(parsed))
	            return i;
	        buf[offset + i] = parsed;
	    }
	    return i;
	}
	function utf8Write(buf, string, offset, length) {
	    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}
	function asciiWrite(buf, string, offset, length) {
	    return blitBuffer(asciiToBytes(string), buf, offset, length);
	}
	function base64Write(buf, string, offset, length) {
	    return blitBuffer(base64ToBytes(string), buf, offset, length);
	}
	function ucs2Write(buf, string, offset, length) {
	    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}
	Buffer.prototype.write = function write(string, offset, length, encoding) {
	    // Buffer#write(string)
	    if (offset === undefined) {
	        encoding = 'utf8';
	        length = this.length;
	        offset = 0;
	        // Buffer#write(string, encoding)
	    }
	    else if (length === undefined && typeof offset === 'string') {
	        encoding = offset;
	        length = this.length;
	        offset = 0;
	        // Buffer#write(string, offset[, length][, encoding])
	    }
	    else if (isFinite(offset)) {
	        offset = offset >>> 0;
	        if (isFinite(length)) {
	            length = length >>> 0;
	            if (encoding === undefined)
	                encoding = 'utf8';
	        }
	        else {
	            encoding = length;
	            length = undefined;
	        }
	    }
	    else {
	        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
	    }
	    const remaining = this.length - offset;
	    if (length === undefined || length > remaining)
	        length = remaining;
	    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	        throw new RangeError('Attempt to write outside buffer bounds');
	    }
	    if (!encoding)
	        encoding = 'utf8';
	    let loweredCase = false;
	    for (;;) {
	        switch (encoding) {
	            case 'hex':
	                return hexWrite(this, string, offset, length);
	            case 'utf8':
	            case 'utf-8':
	                return utf8Write(this, string, offset, length);
	            case 'ascii':
	            case 'latin1':
	            case 'binary':
	                return asciiWrite(this, string, offset, length);
	            case 'base64':
	                // Warning: maxLength not taken into account in base64Write
	                return base64Write(this, string, offset, length);
	            case 'ucs2':
	            case 'ucs-2':
	            case 'utf16le':
	            case 'utf-16le':
	                return ucs2Write(this, string, offset, length);
	            default:
	                if (loweredCase)
	                    throw new TypeError('Unknown encoding: ' + encoding);
	                encoding = ('' + encoding).toLowerCase();
	                loweredCase = true;
	        }
	    }
	};
	Buffer.prototype.toJSON = function toJSON() {
	    return {
	        type: 'Buffer',
	        data: Array.prototype.slice.call(this._arr || this, 0)
	    };
	};
	function base64Slice(buf, start, end) {
	    if (start === 0 && end === buf.length) {
	        return base64.fromByteArray(buf);
	    }
	    else {
	        return base64.fromByteArray(buf.slice(start, end));
	    }
	}
	function utf8Slice(buf, start, end) {
	    end = Math.min(buf.length, end);
	    const res = [];
	    let i = start;
	    while (i < end) {
	        const firstByte = buf[i];
	        let codePoint = null;
	        let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;
	        if (i + bytesPerSequence <= end) {
	            let secondByte, thirdByte, fourthByte, tempCodePoint;
	            switch (bytesPerSequence) {
	                case 1:
	                    if (firstByte < 0x80) {
	                        codePoint = firstByte;
	                    }
	                    break;
	                case 2:
	                    secondByte = buf[i + 1];
	                    if ((secondByte & 0xc0) === 0x80) {
	                        tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
	                        if (tempCodePoint > 0x7f) {
	                            codePoint = tempCodePoint;
	                        }
	                    }
	                    break;
	                case 3:
	                    secondByte = buf[i + 1];
	                    thirdByte = buf[i + 2];
	                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
	                        tempCodePoint =
	                            ((firstByte & 0xf) << 0xc) |
	                                ((secondByte & 0x3f) << 0x6) |
	                                (thirdByte & 0x3f);
	                        if (tempCodePoint > 0x7ff &&
	                            (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {
	                            codePoint = tempCodePoint;
	                        }
	                    }
	                    break;
	                case 4:
	                    secondByte = buf[i + 1];
	                    thirdByte = buf[i + 2];
	                    fourthByte = buf[i + 3];
	                    if ((secondByte & 0xc0) === 0x80 &&
	                        (thirdByte & 0xc0) === 0x80 &&
	                        (fourthByte & 0xc0) === 0x80) {
	                        tempCodePoint =
	                            ((firstByte & 0xf) << 0x12) |
	                                ((secondByte & 0x3f) << 0xc) |
	                                ((thirdByte & 0x3f) << 0x6) |
	                                (fourthByte & 0x3f);
	                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
	                            codePoint = tempCodePoint;
	                        }
	                    }
	            }
	        }
	        if (codePoint === null) {
	            // we did not generate a valid codePoint so insert a
	            // replacement char (U+FFFD) and advance only 1 byte
	            codePoint = 0xfffd;
	            bytesPerSequence = 1;
	        }
	        else if (codePoint > 0xffff) {
	            // encode to utf16 (surrogate pair dance)
	            codePoint -= 0x10000;
	            res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
	            codePoint = 0xdc00 | (codePoint & 0x3ff);
	        }
	        res.push(codePoint);
	        i += bytesPerSequence;
	    }
	    return decodeCodePointsArray(res);
	}
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	const MAX_ARGUMENTS_LENGTH = 0x1000;
	function decodeCodePointsArray(codePoints) {
	    const len = codePoints.length;
	    if (len <= MAX_ARGUMENTS_LENGTH) {
	        return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
	    }
	    // Decode in chunks to avoid "call stack size exceeded".
	    let res = '';
	    let i = 0;
	    while (i < len) {
	        res += String.fromCharCode.apply(String, codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)));
	    }
	    return res;
	}
	function asciiSlice(buf, start, end) {
	    let ret = '';
	    end = Math.min(buf.length, end);
	    for (let i = start; i < end; ++i) {
	        ret += String.fromCharCode(buf[i] & 0x7f);
	    }
	    return ret;
	}
	function latin1Slice(buf, start, end) {
	    let ret = '';
	    end = Math.min(buf.length, end);
	    for (let i = start; i < end; ++i) {
	        ret += String.fromCharCode(buf[i]);
	    }
	    return ret;
	}
	function hexSlice(buf, start, end) {
	    const len = buf.length;
	    if (!start || start < 0)
	        start = 0;
	    if (!end || end < 0 || end > len)
	        end = len;
	    let out = '';
	    for (let i = start; i < end; ++i) {
	        out += hexSliceLookupTable[buf[i]];
	    }
	    return out;
	}
	function utf16leSlice(buf, start, end) {
	    const bytes = buf.slice(start, end);
	    let res = '';
	    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
	    for (let i = 0; i < bytes.length - 1; i += 2) {
	        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	    }
	    return res;
	}
	Buffer.prototype.slice = function slice(start, end) {
	    const len = this.length;
	    start = ~~start;
	    end = end === undefined ? len : ~~end;
	    if (start < 0) {
	        start += len;
	        if (start < 0)
	            start = 0;
	    }
	    else if (start > len) {
	        start = len;
	    }
	    if (end < 0) {
	        end += len;
	        if (end < 0)
	            end = 0;
	    }
	    else if (end > len) {
	        end = len;
	    }
	    if (end < start)
	        end = start;
	    const newBuf = this.subarray(start, end);
	    // Return an augmented `Uint8Array` instance
	    Object.setPrototypeOf(newBuf, Buffer.prototype);
	    return newBuf;
	};
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset(offset, ext, length) {
	    if (offset % 1 !== 0 || offset < 0)
	        throw new RangeError('offset is not uint');
	    if (offset + ext > length)
	        throw new RangeError('Trying to access beyond buffer length');
	}
	Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert)
	        checkOffset(offset, byteLength, this.length);
	    let val = this[offset];
	    let mul = 1;
	    let i = 0;
	    while (++i < byteLength && (mul *= 0x100)) {
	        val += this[offset + i] * mul;
	    }
	    return val;
	};
	Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) {
	        checkOffset(offset, byteLength, this.length);
	    }
	    let val = this[offset + --byteLength];
	    let mul = 1;
	    while (byteLength > 0 && (mul *= 0x100)) {
	        val += this[offset + --byteLength] * mul;
	    }
	    return val;
	};
	Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 1, this.length);
	    return this[offset];
	};
	Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 2, this.length);
	    return this[offset] | (this[offset + 1] << 8);
	};
	Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 2, this.length);
	    return (this[offset] << 8) | this[offset + 1];
	};
	Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 4, this.length);
	    return ((this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +
	        this[offset + 3] * 0x1000000);
	};
	Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 4, this.length);
	    return (this[offset] * 0x1000000 +
	        ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3]));
	};
	Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	        boundsError(offset, this.length - 8);
	    }
	    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
	    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
	    return BigInt(lo) + (BigInt(hi) << BigInt(32));
	});
	Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	        boundsError(offset, this.length - 8);
	    }
	    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
	    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
	    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
	});
	Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert)
	        checkOffset(offset, byteLength, this.length);
	    let val = this[offset];
	    let mul = 1;
	    let i = 0;
	    while (++i < byteLength && (mul *= 0x100)) {
	        val += this[offset + i] * mul;
	    }
	    mul *= 0x80;
	    if (val >= mul)
	        val -= Math.pow(2, 8 * byteLength);
	    return val;
	};
	Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert)
	        checkOffset(offset, byteLength, this.length);
	    let i = byteLength;
	    let mul = 1;
	    let val = this[offset + --i];
	    while (i > 0 && (mul *= 0x100)) {
	        val += this[offset + --i] * mul;
	    }
	    mul *= 0x80;
	    if (val >= mul)
	        val -= Math.pow(2, 8 * byteLength);
	    return val;
	};
	Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 1, this.length);
	    if (!(this[offset] & 0x80))
	        return this[offset];
	    return (0xff - this[offset] + 1) * -1;
	};
	Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 2, this.length);
	    const val = this[offset] | (this[offset + 1] << 8);
	    return val & 0x8000 ? val | 0xffff0000 : val;
	};
	Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 2, this.length);
	    const val = this[offset + 1] | (this[offset] << 8);
	    return val & 0x8000 ? val | 0xffff0000 : val;
	};
	Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 4, this.length);
	    return (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16) | (this[offset + 3] << 24));
	};
	Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 4, this.length);
	    return ((this[offset] << 24) | (this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3]);
	};
	Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	        boundsError(offset, this.length - 8);
	    }
	    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24); // Overflow
	    return ((BigInt(val) << BigInt(32)) +
	        BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24));
	});
	Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	        boundsError(offset, this.length - 8);
	    }
	    const val = (first << 24) + // Overflow
	        this[++offset] * 2 ** 16 +
	        this[++offset] * 2 ** 8 +
	        this[++offset];
	    return ((BigInt(val) << BigInt(32)) +
	        BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last));
	});
	Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 4, this.length);
	    return ieee754$1.read(this, offset, true, 23, 4);
	};
	Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 4, this.length);
	    return ieee754$1.read(this, offset, false, 23, 4);
	};
	Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 8, this.length);
	    return ieee754$1.read(this, offset, true, 52, 8);
	};
	Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkOffset(offset, 8, this.length);
	    return ieee754$1.read(this, offset, false, 52, 8);
	};
	function checkInt(buf, value, offset, ext, max, min) {
	    if (!Buffer.isBuffer(buf))
	        throw new TypeError('"buffer" argument must be a Buffer instance');
	    if (value > max || value < min)
	        throw new RangeError('"value" argument is out of bounds');
	    if (offset + ext > buf.length)
	        throw new RangeError('Index out of range');
	}
	Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) {
	        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	        checkInt(this, value, offset, byteLength, maxBytes, 0);
	    }
	    let mul = 1;
	    let i = 0;
	    this[offset] = value & 0xff;
	    while (++i < byteLength && (mul *= 0x100)) {
	        this[offset + i] = (value / mul) & 0xff;
	    }
	    return offset + byteLength;
	};
	Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) {
	        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	        checkInt(this, value, offset, byteLength, maxBytes, 0);
	    }
	    let i = byteLength - 1;
	    let mul = 1;
	    this[offset + i] = value & 0xff;
	    while (--i >= 0 && (mul *= 0x100)) {
	        this[offset + i] = (value / mul) & 0xff;
	    }
	    return offset + byteLength;
	};
	Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 1, 0xff, 0);
	    this[offset] = value & 0xff;
	    return offset + 1;
	};
	Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 2, 0xffff, 0);
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    return offset + 2;
	};
	Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 2, 0xffff, 0);
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	    return offset + 2;
	};
	Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 4, 0xffffffff, 0);
	    this[offset + 3] = value >>> 24;
	    this[offset + 2] = value >>> 16;
	    this[offset + 1] = value >>> 8;
	    this[offset] = value & 0xff;
	    return offset + 4;
	};
	Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 4, 0xffffffff, 0);
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	    return offset + 4;
	};
	function wrtBigUInt64LE(buf, value, offset, min, max) {
	    checkIntBI(value, min, max, buf, offset, 7);
	    let lo = Number(value & BigInt(0xffffffff));
	    buf[offset++] = lo;
	    lo = lo >> 8;
	    buf[offset++] = lo;
	    lo = lo >> 8;
	    buf[offset++] = lo;
	    lo = lo >> 8;
	    buf[offset++] = lo;
	    let hi = Number((value >> BigInt(32)) & BigInt(0xffffffff));
	    buf[offset++] = hi;
	    hi = hi >> 8;
	    buf[offset++] = hi;
	    hi = hi >> 8;
	    buf[offset++] = hi;
	    hi = hi >> 8;
	    buf[offset++] = hi;
	    return offset;
	}
	function wrtBigUInt64BE(buf, value, offset, min, max) {
	    checkIntBI(value, min, max, buf, offset, 7);
	    let lo = Number(value & BigInt(0xffffffff));
	    buf[offset + 7] = lo;
	    lo = lo >> 8;
	    buf[offset + 6] = lo;
	    lo = lo >> 8;
	    buf[offset + 5] = lo;
	    lo = lo >> 8;
	    buf[offset + 4] = lo;
	    let hi = Number((value >> BigInt(32)) & BigInt(0xffffffff));
	    buf[offset + 3] = hi;
	    hi = hi >> 8;
	    buf[offset + 2] = hi;
	    hi = hi >> 8;
	    buf[offset + 1] = hi;
	    hi = hi >> 8;
	    buf[offset] = hi;
	    return offset + 8;
	}
	Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
	    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
	});
	Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
	    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
	});
	Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	        const limit = Math.pow(2, 8 * byteLength - 1);
	        checkInt(this, value, offset, byteLength, limit - 1, -limit);
	    }
	    let i = 0;
	    let mul = 1;
	    let sub = 0;
	    this[offset] = value & 0xff;
	    while (++i < byteLength && (mul *= 0x100)) {
	        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	            sub = 1;
	        }
	        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
	    }
	    return offset + byteLength;
	};
	Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	        const limit = Math.pow(2, 8 * byteLength - 1);
	        checkInt(this, value, offset, byteLength, limit - 1, -limit);
	    }
	    let i = byteLength - 1;
	    let mul = 1;
	    let sub = 0;
	    this[offset + i] = value & 0xff;
	    while (--i >= 0 && (mul *= 0x100)) {
	        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	            sub = 1;
	        }
	        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
	    }
	    return offset + byteLength;
	};
	Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 1, 0x7f, -0x80);
	    if (value < 0)
	        value = 0xff + value + 1;
	    this[offset] = value & 0xff;
	    return offset + 1;
	};
	Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    return offset + 2;
	};
	Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	    return offset + 2;
	};
	Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    this[offset + 2] = value >>> 16;
	    this[offset + 3] = value >>> 24;
	    return offset + 4;
	};
	Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert)
	        checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	    if (value < 0)
	        value = 0xffffffff + value + 1;
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	    return offset + 4;
	};
	Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
	    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
	});
	Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
	    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
	});
	function checkIEEE754(buf, value, offset, ext, max, min) {
	    if (offset + ext > buf.length)
	        throw new RangeError('Index out of range');
	    if (offset < 0)
	        throw new RangeError('Index out of range');
	}
	function writeFloat(buf, value, offset, littleEndian, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	        checkIEEE754(buf, value, offset, 4);
	    }
	    ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
	    return offset + 4;
	}
	Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
	    return writeFloat(this, value, offset, true, noAssert);
	};
	Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
	    return writeFloat(this, value, offset, false, noAssert);
	};
	function writeDouble(buf, value, offset, littleEndian, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	        checkIEEE754(buf, value, offset, 8);
	    }
	    ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
	    return offset + 8;
	}
	Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
	    return writeDouble(this, value, offset, true, noAssert);
	};
	Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
	    return writeDouble(this, value, offset, false, noAssert);
	};
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy(target, targetStart, start, end) {
	    if (!Buffer.isBuffer(target))
	        throw new TypeError('argument should be a Buffer');
	    if (!start)
	        start = 0;
	    if (!end && end !== 0)
	        end = this.length;
	    if (targetStart >= target.length)
	        targetStart = target.length;
	    if (!targetStart)
	        targetStart = 0;
	    if (end > 0 && end < start)
	        end = start;
	    // Copy 0 bytes; we're done
	    if (end === start)
	        return 0;
	    if (target.length === 0 || this.length === 0)
	        return 0;
	    // Fatal error conditions
	    if (targetStart < 0) {
	        throw new RangeError('targetStart out of bounds');
	    }
	    if (start < 0 || start >= this.length)
	        throw new RangeError('Index out of range');
	    if (end < 0)
	        throw new RangeError('sourceEnd out of bounds');
	    // Are we oob?
	    if (end > this.length)
	        end = this.length;
	    if (target.length - targetStart < end - start) {
	        end = target.length - targetStart + start;
	    }
	    const len = end - start;
	    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
	        // Use built-in when available, missing from IE11
	        this.copyWithin(targetStart, start, end);
	    }
	    else {
	        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
	    }
	    return len;
	};
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill(val, start, end, encoding) {
	    // Handle string cases:
	    if (typeof val === 'string') {
	        if (typeof start === 'string') {
	            encoding = start;
	            start = 0;
	            end = this.length;
	        }
	        else if (typeof end === 'string') {
	            encoding = end;
	            end = this.length;
	        }
	        if (encoding !== undefined && typeof encoding !== 'string') {
	            throw new TypeError('encoding must be a string');
	        }
	        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	            throw new TypeError('Unknown encoding: ' + encoding);
	        }
	        if (val.length === 1) {
	            const code = val.charCodeAt(0);
	            if ((encoding === 'utf8' && code < 128) || encoding === 'latin1') {
	                // Fast path: If `val` fits into a single byte, use that numeric value.
	                val = code;
	            }
	        }
	    }
	    else if (typeof val === 'number') {
	        val = val & 255;
	    }
	    else if (typeof val === 'boolean') {
	        val = Number(val);
	    }
	    // Invalid ranges are not set to a default, so can range check early.
	    if (start < 0 || this.length < start || this.length < end) {
	        throw new RangeError('Out of range index');
	    }
	    if (end <= start) {
	        return this;
	    }
	    start = start >>> 0;
	    end = end === undefined ? this.length : end >>> 0;
	    if (!val)
	        val = 0;
	    let i;
	    if (typeof val === 'number') {
	        for (i = start; i < end; ++i) {
	            this[i] = val;
	        }
	    }
	    else {
	        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
	        const len = bytes.length;
	        if (len === 0) {
	            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
	        }
	        for (i = 0; i < end - start; ++i) {
	            this[i + start] = bytes[i % len];
	        }
	    }
	    return this;
	};
	// CUSTOM ERRORS
	// =============
	// Simplified versions from Node, changed for Buffer-only usage
	const errors = {};
	function E(sym, getMessage, Base) {
	    errors[sym] = class NodeError extends Base {
	        constructor() {
	            super();
	            Object.defineProperty(this, 'message', {
	                value: getMessage.apply(this, arguments),
	                writable: true,
	                configurable: true
	            });
	            // Add the error code to the name to include it in the stack trace.
	            this.name = `${this.name} [${sym}]`;
	            // Access the stack to generate the error message including the error code
	            // from the name.
	            this.stack; // eslint-disable-line no-unused-expressions
	            // Reset the name to the actual name.
	            delete this.name;
	        }
	        get code() {
	            return sym;
	        }
	        set code(value) {
	            Object.defineProperty(this, 'code', {
	                configurable: true,
	                enumerable: true,
	                value,
	                writable: true
	            });
	        }
	        toString() {
	            return `${this.name} [${sym}]: ${this.message}`;
	        }
	    };
	}
	E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
	    if (name) {
	        return `${name} is outside of buffer bounds`;
	    }
	    return 'Attempt to access memory outside buffer bounds';
	}, RangeError);
	E('ERR_INVALID_ARG_TYPE', function (name, actual) {
	    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
	}, TypeError);
	E('ERR_OUT_OF_RANGE', function (str, range, input) {
	    let msg = `The value of "${str}" is out of range.`;
	    let received = input;
	    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
	        received = addNumericalSeparator(String(input));
	    }
	    else if (typeof input === 'bigint') {
	        received = String(input);
	        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
	            received = addNumericalSeparator(received);
	        }
	        received += 'n';
	    }
	    msg += ` It must be ${range}. Received ${received}`;
	    return msg;
	}, RangeError);
	function addNumericalSeparator(val) {
	    let res = '';
	    let i = val.length;
	    const start = val[0] === '-' ? 1 : 0;
	    for (; i >= start + 4; i -= 3) {
	        res = `_${val.slice(i - 3, i)}${res}`;
	    }
	    return `${val.slice(0, i)}${res}`;
	}
	// CHECK FUNCTIONS
	// ===============
	function checkBounds(buf, offset, byteLength) {
	    validateNumber(offset, 'offset');
	    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
	        boundsError(offset, buf.length - (byteLength + 1));
	    }
	}
	function checkIntBI(value, min, max, buf, offset, byteLength) {
	    if (value > max || value < min) {
	        const n = typeof min === 'bigint' ? 'n' : '';
	        let range;
	        if (byteLength > 3) {
	            if (min === 0 || min === BigInt(0)) {
	                range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
	            }
	            else {
	                range =
	                    `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
	                        `${(byteLength + 1) * 8 - 1}${n}`;
	            }
	        }
	        else {
	            range = `>= ${min}${n} and <= ${max}${n}`;
	        }
	        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
	    }
	    checkBounds(buf, offset, byteLength);
	}
	function validateNumber(value, name) {
	    if (typeof value !== 'number') {
	        throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
	    }
	}
	function boundsError(value, length, type) {
	    if (Math.floor(value) !== value) {
	        validateNumber(value, type);
	        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
	    }
	    if (length < 0) {
	        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
	    }
	    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
	}
	// HELPER FUNCTIONS
	// ================
	const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
	function base64clean(str) {
	    // Node takes equal signs as end of the Base64 encoding
	    str = str.split('=')[0];
	    // Node strips out invalid characters like \n and \t from the string, base64-js does not
	    str = str.trim().replace(INVALID_BASE64_RE, '');
	    // Node converts strings with length < 2 to ''
	    if (str.length < 2)
	        return '';
	    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	    while (str.length % 4 !== 0) {
	        str = str + '=';
	    }
	    return str;
	}
	function utf8ToBytes(string, units) {
	    units = units || Infinity;
	    let codePoint;
	    const length = string.length;
	    let leadSurrogate = null;
	    const bytes = [];
	    for (let i = 0; i < length; ++i) {
	        codePoint = string.charCodeAt(i);
	        // is surrogate component
	        if (codePoint > 0xd7ff && codePoint < 0xe000) {
	            // last char was a lead
	            if (!leadSurrogate) {
	                // no lead yet
	                if (codePoint > 0xdbff) {
	                    // unexpected trail
	                    if ((units -= 3) > -1)
	                        bytes.push(0xef, 0xbf, 0xbd);
	                    continue;
	                }
	                else if (i + 1 === length) {
	                    // unpaired lead
	                    if ((units -= 3) > -1)
	                        bytes.push(0xef, 0xbf, 0xbd);
	                    continue;
	                }
	                // valid lead
	                leadSurrogate = codePoint;
	                continue;
	            }
	            // 2 leads in a row
	            if (codePoint < 0xdc00) {
	                if ((units -= 3) > -1)
	                    bytes.push(0xef, 0xbf, 0xbd);
	                leadSurrogate = codePoint;
	                continue;
	            }
	            // valid surrogate pair
	            codePoint = (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;
	        }
	        else if (leadSurrogate) {
	            // valid bmp char, but last char was a lead
	            if ((units -= 3) > -1)
	                bytes.push(0xef, 0xbf, 0xbd);
	        }
	        leadSurrogate = null;
	        // encode utf8
	        if (codePoint < 0x80) {
	            if ((units -= 1) < 0)
	                break;
	            bytes.push(codePoint);
	        }
	        else if (codePoint < 0x800) {
	            if ((units -= 2) < 0)
	                break;
	            bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint < 0x10000) {
	            if ((units -= 3) < 0)
	                break;
	            bytes.push((codePoint >> 0xc) | 0xe0, ((codePoint >> 0x6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint < 0x110000) {
	            if ((units -= 4) < 0)
	                break;
	            bytes.push((codePoint >> 0x12) | 0xf0, ((codePoint >> 0xc) & 0x3f) | 0x80, ((codePoint >> 0x6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	        else {
	            throw new Error('Invalid code point');
	        }
	    }
	    return bytes;
	}
	function asciiToBytes(str) {
	    const byteArray = [];
	    for (let i = 0; i < str.length; ++i) {
	        // Node's code seems to be doing this and not & 0x7F..
	        byteArray.push(str.charCodeAt(i) & 0xff);
	    }
	    return byteArray;
	}
	function utf16leToBytes(str, units) {
	    let c, hi, lo;
	    const byteArray = [];
	    for (let i = 0; i < str.length; ++i) {
	        if ((units -= 2) < 0)
	            break;
	        c = str.charCodeAt(i);
	        hi = c >> 8;
	        lo = c % 256;
	        byteArray.push(lo);
	        byteArray.push(hi);
	    }
	    return byteArray;
	}
	function base64ToBytes(str) {
	    return base64.toByteArray(base64clean(str));
	}
	function blitBuffer(src, dst, offset, length) {
	    let i;
	    for (i = 0; i < length; ++i) {
	        if (i + offset >= dst.length || i >= src.length)
	            break;
	        dst[i + offset] = src[i];
	    }
	    return i;
	}
	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
	// the `instanceof` check but they should be treated as of that type.
	// See: https://github.com/feross/buffer/issues/166
	function isInstance(obj, type) {
	    return (obj instanceof type ||
	        (obj != null &&
	            obj.constructor != null &&
	            obj.constructor.name != null &&
	            obj.constructor.name === type.name));
	}
	function numberIsNaN(obj) {
	    // For IE11 support
	    return obj !== obj; // eslint-disable-line no-self-compare
	}
	// Create lookup table for `toString('hex')`
	// See: https://github.com/feross/buffer/issues/219
	const hexSliceLookupTable = (function () {
	    const alphabet = '0123456789abcdef';
	    const table = new Array(256);
	    for (let i = 0; i < 16; ++i) {
	        const i16 = i * 16;
	        for (let j = 0; j < 16; ++j) {
	            table[i16 + j] = alphabet[i] + alphabet[j];
	        }
	    }
	    return table;
	})();
	// Return not function with Error if BigInt not supported
	function defineBigIntMethod(fn) {
	    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
	}
	function BufferBigIntNotDefined() {
	    throw new Error('BigInt not supported');
	}
} (buffer));

var createHash$1 = {};

var Hash$1 = {};

var stream = {};

var process$1 = {};

Object.defineProperty(process$1, "__esModule", { value: true });
process$1.nextTick = void 0;
/* eslint-disable @typescript-eslint/ban-types */
function nextTick$1(callback, ...args) {
    queueMicrotask(() => callback(...args));
}
process$1.nextTick = nextTick$1;

var require$$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);

var util$2 = {};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
util$2.inherits = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};

var BufferList = {};

var hasRequiredBufferList;

function requireBufferList () {
	if (hasRequiredBufferList) return BufferList;
	hasRequiredBufferList = 1;
	var Buffer = buffer.Buffer;
	function copyBuffer(src, target, offset) {
	    src.copy(target, offset);
	}
	BufferList.BufferList = class BufferList {
	    constructor() {
	        this.head = null;
	        this.tail = null;
	        this.length = 0;
	    }
	    push(v) {
	        var entry = { data: v, next: null };
	        if (this.length > 0)
	            this.tail.next = entry;
	        else
	            this.head = entry;
	        this.tail = entry;
	        ++this.length;
	    }
	    unshift(v) {
	        var entry = { data: v, next: this.head };
	        if (this.length === 0)
	            this.tail = entry;
	        this.head = entry;
	        ++this.length;
	    }
	    shift() {
	        if (this.length === 0)
	            return;
	        var ret = this.head.data;
	        if (this.length === 1)
	            this.head = this.tail = null;
	        else
	            this.head = this.head.next;
	        --this.length;
	        return ret;
	    }
	    clear() {
	        this.head = this.tail = null;
	        this.length = 0;
	    }
	    join(s) {
	        if (this.length === 0)
	            return '';
	        var p = this.head;
	        var ret = '' + p.data;
	        while ((p = p.next)) {
	            ret += s + p.data;
	        }
	        return ret;
	    }
	    concat(n) {
	        if (this.length === 0)
	            return Buffer.alloc(0);
	        if (this.length === 1)
	            return this.head.data;
	        var ret = Buffer.allocUnsafe(n >>> 0);
	        var p = this.head;
	        var i = 0;
	        while (p) {
	            copyBuffer(p.data, ret, i);
	            i += p.data.length;
	            p = p.next;
	        }
	        return ret;
	    }
	};
	return BufferList;
}

var destroy_1;
var hasRequiredDestroy;

function requireDestroy () {
	if (hasRequiredDestroy) return destroy_1;
	hasRequiredDestroy = 1;
	/*<replacement>*/
	var pna = process$1;
	/*</replacement>*/
	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	    var _this = this;
	    var readableDestroyed = this._readableState && this._readableState.destroyed;
	    var writableDestroyed = this._writableState && this._writableState.destroyed;
	    if (readableDestroyed || writableDestroyed) {
	        if (cb) {
	            cb(err);
	        }
	        else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
	            pna.nextTick(emitErrorNT, this, err);
	        }
	        return this;
	    }
	    // we set destroyed to true before firing error callbacks in order
	    // to make it re-entrance safe in case destroy() is called within callbacks
	    if (this._readableState) {
	        this._readableState.destroyed = true;
	    }
	    // if this is a duplex stream mark the writable part as destroyed as well
	    if (this._writableState) {
	        this._writableState.destroyed = true;
	    }
	    this._destroy(err || null, function (err) {
	        if (!cb && err) {
	            pna.nextTick(emitErrorNT, _this, err);
	            if (_this._writableState) {
	                _this._writableState.errorEmitted = true;
	            }
	        }
	        else if (cb) {
	            cb(err);
	        }
	    });
	    return this;
	}
	function undestroy() {
	    if (this._readableState) {
	        this._readableState.destroyed = false;
	        this._readableState.reading = false;
	        this._readableState.ended = false;
	        this._readableState.endEmitted = false;
	    }
	    if (this._writableState) {
	        this._writableState.destroyed = false;
	        this._writableState.ended = false;
	        this._writableState.ending = false;
	        this._writableState.finished = false;
	        this._writableState.errorEmitted = false;
	    }
	}
	function emitErrorNT(self, err) {
	    self.emit('error', err);
	}
	destroy_1 = {
	    destroy: destroy,
	    undestroy: undestroy
	};
	return destroy_1;
}

var _stream_writable;
var hasRequired_stream_writable;

function require_stream_writable () {
	if (hasRequired_stream_writable) return _stream_writable;
	hasRequired_stream_writable = 1;
	/*<replacement>*/
	var pna = process$1;
	/*</replacement>*/
	_stream_writable = Writable;
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	    var _this = this;
	    this.next = null;
	    this.entry = null;
	    this.finish = function () {
	        onCorkedFinish(_this, state);
	    };
	}
	/* </replacement> */
	/*<replacement>*/
	var asyncWrite = pna.nextTick;
	/*</replacement>*/
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	Writable.WritableState = WritableState;
	/*<replacement>*/
	var util = Object.create(util$2);
	/*</replacement>*/
	/*<replacement>*/
	var Stream = require$$2.EventEmitter;
	/*</replacement>*/
	/*<replacement>*/
	var Buffer = buffer.Buffer;
	var OurUint8Array = commonjsGlobal.Uint8Array || function () { };
	function _uint8ArrayToBuffer(chunk) {
	    return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*</replacement>*/
	var destroyImpl = requireDestroy();
	util.inherits(Writable, Stream);
	function nop() { }
	function WritableState(options, stream) {
	    Duplex = Duplex || require_stream_duplex();
	    options = options || {};
	    // Duplex streams are both readable and writable, but share
	    // the same options object.
	    // However, some cases require setting options to different
	    // values for the readable and the writable sides of the duplex stream.
	    // These options can be provided separately as readableXXX and writableXXX.
	    var isDuplex = stream instanceof Duplex;
	    // object stream flag to indicate whether or not this stream
	    // contains buffers or objects.
	    this.objectMode = !!options.objectMode;
	    if (isDuplex)
	        this.objectMode = this.objectMode || !!options.writableObjectMode;
	    // the point at which write() starts returning false
	    // Note: 0 is a valid value, means that we always return false if
	    // the entire buffer is not flushed immediately on write()
	    var hwm = options.highWaterMark;
	    var writableHwm = options.writableHighWaterMark;
	    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	    if (hwm || hwm === 0)
	        this.highWaterMark = hwm;
	    else if (isDuplex && (writableHwm || writableHwm === 0))
	        this.highWaterMark = writableHwm;
	    else
	        this.highWaterMark = defaultHwm;
	    // cast to ints.
	    this.highWaterMark = Math.floor(this.highWaterMark);
	    // if _final has been called
	    this.finalCalled = false;
	    // drain event flag.
	    this.needDrain = false;
	    // at the start of calling end()
	    this.ending = false;
	    // when end() has been called, and returned
	    this.ended = false;
	    // when 'finish' is emitted
	    this.finished = false;
	    // has it been destroyed
	    this.destroyed = false;
	    // should we decode strings into buffers before passing to _write?
	    // this is here so that some node-core streams can optimize string
	    // handling at a lower level.
	    var noDecode = options.decodeStrings === false;
	    this.decodeStrings = !noDecode;
	    // Crypto is kind of old and crusty.  Historically, its default string
	    // encoding is 'binary' so we have to make this configurable.
	    // Everything else in the universe uses 'utf8', though.
	    this.defaultEncoding = options.defaultEncoding || 'utf8';
	    // not an actual buffer we keep track of, but a measurement
	    // of how much we're waiting to get pushed to some underlying
	    // socket or file.
	    this.length = 0;
	    // a flag to see when we're in the middle of a write.
	    this.writing = false;
	    // when true all writes will be buffered until .uncork() call
	    this.corked = 0;
	    // a flag to be able to tell if the onwrite cb is called immediately,
	    // or on a later tick.  We set this to true at first, because any
	    // actions that shouldn't happen until "later" should generally also
	    // not happen before the first write call.
	    this.sync = true;
	    // a flag to know if we're processing previously buffered items, which
	    // may call the _write() callback in the same tick, so that we don't
	    // end up in an overlapped onwrite situation.
	    this.bufferProcessing = false;
	    // the callback that's passed to _write(chunk,cb)
	    this.onwrite = function (er) {
	        onwrite(stream, er);
	    };
	    // the callback that the user supplies to write(chunk,encoding,cb)
	    this.writecb = null;
	    // the amount that is being written when _write is called.
	    this.writelen = 0;
	    this.bufferedRequest = null;
	    this.lastBufferedRequest = null;
	    // number of pending user-supplied write callbacks
	    // this must be 0 before 'finish' can be emitted
	    this.pendingcb = 0;
	    // emit prefinish if the only thing we're waiting for is _write cbs
	    // This is relevant for synchronous Transform streams
	    this.prefinished = false;
	    // True if the error was already emitted and should not be thrown again
	    this.errorEmitted = false;
	    // count buffered requests
	    this.bufferedRequestCount = 0;
	    // allocate the first CorkedRequest, there is always
	    // one allocated and free to use, and we maintain at most two
	    this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
	    var current = this.bufferedRequest;
	    var out = [];
	    while (current) {
	        out.push(current);
	        current = current.next;
	    }
	    return out;
	};
	(function () {
	    try {
	        Object.defineProperty(WritableState.prototype, 'buffer', {
	            get: function () {
	                return this.getBuffer();
	            }
	        });
	    }
	    catch (_) { }
	})();
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' &&
	    Symbol.hasInstance &&
	    typeof Function.prototype[Symbol.hasInstance] === 'function') {
	    realHasInstance = Function.prototype[Symbol.hasInstance];
	    Object.defineProperty(Writable, Symbol.hasInstance, {
	        value: function (object) {
	            if (realHasInstance.call(this, object))
	                return true;
	            if (this !== Writable)
	                return false;
	            return object && object._writableState instanceof WritableState;
	        }
	    });
	}
	else {
	    realHasInstance = function (object) {
	        return object instanceof this;
	    };
	}
	function Writable(options) {
	    Duplex = Duplex || require_stream_duplex();
	    // Writable ctor is applied to Duplexes, too.
	    // `realHasInstance` is necessary because using plain `instanceof`
	    // would return false, as no `_writableState` property is attached.
	    // Trying to use the custom `instanceof` for Writable here will also break the
	    // Node.js LazyTransform implementation, which has a non-trivial getter for
	    // `_writableState` that would lead to infinite recursion.
	    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	        return new Writable(options);
	    }
	    this._writableState = new WritableState(options, this);
	    // legacy.
	    this.writable = true;
	    if (options) {
	        if (typeof options.write === 'function')
	            this._write = options.write;
	        if (typeof options.writev === 'function')
	            this._writev = options.writev;
	        if (typeof options.destroy === 'function')
	            this._destroy = options.destroy;
	        if (typeof options.final === 'function')
	            this._final = options.final;
	    }
	    Stream.call(this);
	}
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	    this.emit('error', new Error('Cannot pipe, not readable'));
	};
	function writeAfterEnd(stream, cb) {
	    var er = new Error('write after end');
	    // TODO: defer error events consistently everywhere, not just the cb
	    stream.emit('error', er);
	    pna.nextTick(cb, er);
	}
	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	    var valid = true;
	    var er = false;
	    if (chunk === null) {
	        er = new TypeError('May not write null values to stream');
	    }
	    else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	        er = new TypeError('Invalid non-string/buffer chunk');
	    }
	    if (er) {
	        stream.emit('error', er);
	        pna.nextTick(cb, er);
	        valid = false;
	    }
	    return valid;
	}
	Writable.prototype.write = function (chunk, encoding, cb) {
	    var state = this._writableState;
	    var ret = false;
	    var isBuf = !state.objectMode && _isUint8Array(chunk);
	    if (isBuf && !Buffer.isBuffer(chunk)) {
	        chunk = _uint8ArrayToBuffer(chunk);
	    }
	    if (typeof encoding === 'function') {
	        cb = encoding;
	        encoding = null;
	    }
	    if (isBuf)
	        encoding = 'buffer';
	    else if (!encoding)
	        encoding = state.defaultEncoding;
	    if (typeof cb !== 'function')
	        cb = nop;
	    if (state.ended)
	        writeAfterEnd(this, cb);
	    else if (isBuf || validChunk(this, state, chunk, cb)) {
	        state.pendingcb++;
	        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	    }
	    return ret;
	};
	Writable.prototype.cork = function () {
	    var state = this._writableState;
	    state.corked++;
	};
	Writable.prototype.uncork = function () {
	    var state = this._writableState;
	    if (state.corked) {
	        state.corked--;
	        if (!state.writing &&
	            !state.corked &&
	            !state.finished &&
	            !state.bufferProcessing &&
	            state.bufferedRequest)
	            clearBuffer(this, state);
	    }
	};
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	    // node::ParseEncoding() requires lower case.
	    if (typeof encoding === 'string')
	        encoding = encoding.toLowerCase();
	    if (!([
	        'hex',
	        'utf8',
	        'utf-8',
	        'ascii',
	        'binary',
	        'base64',
	        'ucs2',
	        'ucs-2',
	        'utf16le',
	        'utf-16le',
	        'raw'
	    ].indexOf((encoding + '').toLowerCase()) > -1))
	        throw new TypeError('Unknown encoding: ' + encoding);
	    this._writableState.defaultEncoding = encoding;
	    return this;
	};
	function decodeChunk(state, chunk, encoding) {
	    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	        chunk = Buffer.from(chunk, encoding);
	    }
	    return chunk;
	}
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	    // making it explicit this property is not enumerable
	    // because otherwise some prototype manipulation in
	    // userland will fail
	    enumerable: false,
	    get: function () {
	        return this._writableState.highWaterMark;
	    }
	});
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	    if (!isBuf) {
	        var newChunk = decodeChunk(state, chunk, encoding);
	        if (chunk !== newChunk) {
	            isBuf = true;
	            encoding = 'buffer';
	            chunk = newChunk;
	        }
	    }
	    var len = state.objectMode ? 1 : chunk.length;
	    state.length += len;
	    var ret = state.length < state.highWaterMark;
	    // we must ensure that previous needDrain will not be reset to false.
	    if (!ret)
	        state.needDrain = true;
	    if (state.writing || state.corked) {
	        var last = state.lastBufferedRequest;
	        state.lastBufferedRequest = {
	            chunk: chunk,
	            encoding: encoding,
	            isBuf: isBuf,
	            callback: cb,
	            next: null
	        };
	        if (last) {
	            last.next = state.lastBufferedRequest;
	        }
	        else {
	            state.bufferedRequest = state.lastBufferedRequest;
	        }
	        state.bufferedRequestCount += 1;
	    }
	    else {
	        doWrite(stream, state, false, len, chunk, encoding, cb);
	    }
	    return ret;
	}
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	    state.writelen = len;
	    state.writecb = cb;
	    state.writing = true;
	    state.sync = true;
	    if (writev)
	        stream._writev(chunk, state.onwrite);
	    else
	        stream._write(chunk, encoding, state.onwrite);
	    state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	    --state.pendingcb;
	    if (sync) {
	        // defer the callback if we are being called synchronously
	        // to avoid piling up things on the stack
	        pna.nextTick(cb, er);
	        // this can emit finish, and it will always happen
	        // after error
	        pna.nextTick(finishMaybe, stream, state);
	        stream._writableState.errorEmitted = true;
	        stream.emit('error', er);
	    }
	    else {
	        // the caller expect this to happen before if
	        // it is async
	        cb(er);
	        stream._writableState.errorEmitted = true;
	        stream.emit('error', er);
	        // this can emit finish, but finish must
	        // always follow error
	        finishMaybe(stream, state);
	    }
	}
	function onwriteStateUpdate(state) {
	    state.writing = false;
	    state.writecb = null;
	    state.length -= state.writelen;
	    state.writelen = 0;
	}
	function onwrite(stream, er) {
	    var state = stream._writableState;
	    var sync = state.sync;
	    var cb = state.writecb;
	    onwriteStateUpdate(state);
	    if (er)
	        onwriteError(stream, state, sync, er, cb);
	    else {
	        // Check if we're actually ready to finish, but don't emit yet
	        var finished = needFinish(state);
	        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	            clearBuffer(stream, state);
	        }
	        if (sync) {
	            /*<replacement>*/
	            asyncWrite(afterWrite, stream, state, finished, cb);
	            /*</replacement>*/
	        }
	        else {
	            afterWrite(stream, state, finished, cb);
	        }
	    }
	}
	function afterWrite(stream, state, finished, cb) {
	    if (!finished)
	        onwriteDrain(stream, state);
	    state.pendingcb--;
	    cb();
	    finishMaybe(stream, state);
	}
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	    if (state.length === 0 && state.needDrain) {
	        state.needDrain = false;
	        stream.emit('drain');
	    }
	}
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	    state.bufferProcessing = true;
	    var entry = state.bufferedRequest;
	    if (stream._writev && entry && entry.next) {
	        // Fast case, write everything using _writev()
	        var l = state.bufferedRequestCount;
	        var buffer = new Array(l);
	        var holder = state.corkedRequestsFree;
	        holder.entry = entry;
	        var count = 0;
	        var allBuffers = true;
	        while (entry) {
	            buffer[count] = entry;
	            if (!entry.isBuf)
	                allBuffers = false;
	            entry = entry.next;
	            count += 1;
	        }
	        buffer.allBuffers = allBuffers;
	        doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	        // doWrite is almost always async, defer these to save a bit of time
	        // as the hot path ends with doWrite
	        state.pendingcb++;
	        state.lastBufferedRequest = null;
	        if (holder.next) {
	            state.corkedRequestsFree = holder.next;
	            holder.next = null;
	        }
	        else {
	            state.corkedRequestsFree = new CorkedRequest(state);
	        }
	        state.bufferedRequestCount = 0;
	    }
	    else {
	        // Slow case, write chunks one-by-one
	        while (entry) {
	            var chunk = entry.chunk;
	            var encoding = entry.encoding;
	            var cb = entry.callback;
	            var len = state.objectMode ? 1 : chunk.length;
	            doWrite(stream, state, false, len, chunk, encoding, cb);
	            entry = entry.next;
	            state.bufferedRequestCount--;
	            // if we didn't call the onwrite immediately, then
	            // it means that we need to wait until it does.
	            // also, that means that the chunk and cb are currently
	            // being processed, so move the buffer counter past them.
	            if (state.writing) {
	                break;
	            }
	        }
	        if (entry === null)
	            state.lastBufferedRequest = null;
	    }
	    state.bufferedRequest = entry;
	    state.bufferProcessing = false;
	}
	Writable.prototype._write = function (chunk, encoding, cb) {
	    cb(new Error('_write() is not implemented'));
	};
	Writable.prototype._writev = null;
	Writable.prototype.end = function (chunk, encoding, cb) {
	    var state = this._writableState;
	    if (typeof chunk === 'function') {
	        cb = chunk;
	        chunk = null;
	        encoding = null;
	    }
	    else if (typeof encoding === 'function') {
	        cb = encoding;
	        encoding = null;
	    }
	    if (chunk !== null && chunk !== undefined)
	        this.write(chunk, encoding);
	    // .end() fully uncorks
	    if (state.corked) {
	        state.corked = 1;
	        this.uncork();
	    }
	    // ignore unnecessary end() calls.
	    if (!state.ending && !state.finished)
	        endWritable(this, state, cb);
	};
	function needFinish(state) {
	    return (state.ending &&
	        state.length === 0 &&
	        state.bufferedRequest === null &&
	        !state.finished &&
	        !state.writing);
	}
	function callFinal(stream, state) {
	    stream._final(function (err) {
	        state.pendingcb--;
	        if (err) {
	            stream.emit('error', err);
	        }
	        state.prefinished = true;
	        stream.emit('prefinish');
	        finishMaybe(stream, state);
	    });
	}
	function prefinish(stream, state) {
	    if (!state.prefinished && !state.finalCalled) {
	        if (typeof stream._final === 'function') {
	            state.pendingcb++;
	            state.finalCalled = true;
	            pna.nextTick(callFinal, stream, state);
	        }
	        else {
	            state.prefinished = true;
	            stream.emit('prefinish');
	        }
	    }
	}
	function finishMaybe(stream, state) {
	    var need = needFinish(state);
	    if (need) {
	        prefinish(stream, state);
	        if (state.pendingcb === 0) {
	            state.finished = true;
	            stream.emit('finish');
	        }
	    }
	    return need;
	}
	function endWritable(stream, state, cb) {
	    state.ending = true;
	    finishMaybe(stream, state);
	    if (cb) {
	        if (state.finished)
	            pna.nextTick(cb);
	        else
	            stream.once('finish', cb);
	    }
	    state.ended = true;
	    stream.writable = false;
	}
	function onCorkedFinish(corkReq, state, err) {
	    var entry = corkReq.entry;
	    corkReq.entry = null;
	    while (entry) {
	        var cb = entry.callback;
	        state.pendingcb--;
	        cb(err);
	        entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	        state.corkedRequestsFree.next = corkReq;
	    }
	    else {
	        state.corkedRequestsFree = corkReq;
	    }
	}
	Object.defineProperty(Writable.prototype, 'destroyed', {
	    get: function () {
	        if (this._writableState === undefined) {
	            return false;
	        }
	        return this._writableState.destroyed;
	    },
	    set: function (value) {
	        // we ignore the value if the stream
	        // has not been initialized yet
	        if (!this._writableState) {
	            return;
	        }
	        // backward compatibility, the user is explicitly
	        // managing destroyed
	        this._writableState.destroyed = value;
	    }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	    this.end();
	    cb(err);
	};
	return _stream_writable;
}

var _stream_duplex;
var hasRequired_stream_duplex;

function require_stream_duplex () {
	if (hasRequired_stream_duplex) return _stream_duplex;
	hasRequired_stream_duplex = 1;
	/*<replacement>*/
	var pna = process$1;
	/*</replacement>*/
	/*<replacement>*/
	var objectKeys = Object.keys ||
	    function (obj) {
	        var keys = [];
	        for (var key in obj) {
	            keys.push(key);
	        }
	        return keys;
	    };
	/*</replacement>*/
	_stream_duplex = Duplex;
	/*<replacement>*/
	var util = Object.create(util$2);
	/*</replacement>*/
	var Readable = require_stream_readable();
	var Writable = require_stream_writable();
	util.inherits(Duplex, Readable);
	{
	    // avoid scope creep, the keys array can then be collected
	    var keys = objectKeys(Writable.prototype);
	    for (var v = 0; v < keys.length; v++) {
	        var method = keys[v];
	        if (!Duplex.prototype[method])
	            Duplex.prototype[method] = Writable.prototype[method];
	    }
	}
	function Duplex(options) {
	    if (!(this instanceof Duplex))
	        return new Duplex(options);
	    Readable.call(this, options);
	    Writable.call(this, options);
	    if (options && options.readable === false)
	        this.readable = false;
	    if (options && options.writable === false)
	        this.writable = false;
	    this.allowHalfOpen = true;
	    if (options && options.allowHalfOpen === false)
	        this.allowHalfOpen = false;
	    this.once('end', onend);
	}
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	    // making it explicit this property is not enumerable
	    // because otherwise some prototype manipulation in
	    // userland will fail
	    enumerable: false,
	    get: function () {
	        return this._writableState.highWaterMark;
	    }
	});
	// the no-half-open enforcer
	function onend() {
	    // if we allow half-open state, or if the writable side ended,
	    // then we're ok.
	    if (this.allowHalfOpen || this._writableState.ended)
	        return;
	    // no more data can be written.
	    // But allow more writes to happen in this tick.
	    pna.nextTick(onEndNT, this);
	}
	function onEndNT(self) {
	    self.end();
	}
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	    get: function () {
	        if (this._readableState === undefined || this._writableState === undefined) {
	            return false;
	        }
	        return this._readableState.destroyed && this._writableState.destroyed;
	    },
	    set: function (value) {
	        // we ignore the value if the stream
	        // has not been initialized yet
	        if (this._readableState === undefined || this._writableState === undefined) {
	            return;
	        }
	        // backward compatibility, the user is explicitly
	        // managing destroyed
	        this._readableState.destroyed = value;
	        this._writableState.destroyed = value;
	    }
	});
	Duplex.prototype._destroy = function (err, cb) {
	    this.push(null);
	    this.end();
	    pna.nextTick(cb, err);
	};
	return _stream_duplex;
}

var string_decoder = {};

var hasRequiredString_decoder;

function requireString_decoder () {
	if (hasRequiredString_decoder) return string_decoder;
	hasRequiredString_decoder = 1;
	/*<replacement>*/
	var Buffer = buffer.Buffer;
	/*</replacement>*/
	var isEncoding = Buffer.isEncoding ||
	    function (encoding) {
	        encoding = '' + encoding;
	        switch (encoding && encoding.toLowerCase()) {
	            case 'hex':
	            case 'utf8':
	            case 'utf-8':
	            case 'ascii':
	            case 'binary':
	            case 'base64':
	            case 'ucs2':
	            case 'ucs-2':
	            case 'utf16le':
	            case 'utf-16le':
	            case 'raw':
	                return true;
	            default:
	                return false;
	        }
	    };
	function _normalizeEncoding(enc) {
	    if (!enc)
	        return 'utf8';
	    var retried;
	    while (true) {
	        switch (enc) {
	            case 'utf8':
	            case 'utf-8':
	                return 'utf8';
	            case 'ucs2':
	            case 'ucs-2':
	            case 'utf16le':
	            case 'utf-16le':
	                return 'utf16le';
	            case 'latin1':
	            case 'binary':
	                return 'latin1';
	            case 'base64':
	            case 'ascii':
	            case 'hex':
	                return enc;
	            default:
	                if (retried)
	                    return; // undefined
	                enc = ('' + enc).toLowerCase();
	                retried = true;
	        }
	    }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	    var nenc = _normalizeEncoding(enc);
	    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc)))
	        throw new Error('Unknown encoding: ' + enc);
	    return nenc || enc;
	}
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	string_decoder.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	    this.encoding = normalizeEncoding(encoding);
	    var nb;
	    switch (this.encoding) {
	        case 'utf16le':
	            this.text = utf16Text;
	            this.end = utf16End;
	            nb = 4;
	            break;
	        case 'utf8':
	            this.fillLast = utf8FillLast;
	            nb = 4;
	            break;
	        case 'base64':
	            this.text = base64Text;
	            this.end = base64End;
	            nb = 3;
	            break;
	        default:
	            this.write = simpleWrite;
	            this.end = simpleEnd;
	            return;
	    }
	    this.lastNeed = 0;
	    this.lastTotal = 0;
	    this.lastChar = Buffer.allocUnsafe(nb);
	}
	StringDecoder.prototype.write = function (buf) {
	    if (buf.length === 0)
	        return '';
	    var r;
	    var i;
	    if (this.lastNeed) {
	        r = this.fillLast(buf);
	        if (r === undefined)
	            return '';
	        i = this.lastNeed;
	        this.lastNeed = 0;
	    }
	    else {
	        i = 0;
	    }
	    if (i < buf.length)
	        return r ? r + this.text(buf, i) : this.text(buf, i);
	    return r || '';
	};
	StringDecoder.prototype.end = utf8End;
	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;
	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	    if (this.lastNeed <= buf.length) {
	        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	    }
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	    this.lastNeed -= buf.length;
	};
	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	    if (byte <= 0x7f)
	        return 0;
	    else if (byte >> 5 === 0x06)
	        return 2;
	    else if (byte >> 4 === 0x0e)
	        return 3;
	    else if (byte >> 3 === 0x1e)
	        return 4;
	    return byte >> 6 === 0x02 ? -1 : -2;
	}
	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	    var j = buf.length - 1;
	    if (j < i)
	        return 0;
	    var nb = utf8CheckByte(buf[j]);
	    if (nb >= 0) {
	        if (nb > 0)
	            self.lastNeed = nb - 1;
	        return nb;
	    }
	    if (--j < i || nb === -2)
	        return 0;
	    nb = utf8CheckByte(buf[j]);
	    if (nb >= 0) {
	        if (nb > 0)
	            self.lastNeed = nb - 2;
	        return nb;
	    }
	    if (--j < i || nb === -2)
	        return 0;
	    nb = utf8CheckByte(buf[j]);
	    if (nb >= 0) {
	        if (nb > 0) {
	            if (nb === 2)
	                nb = 0;
	            else
	                self.lastNeed = nb - 3;
	        }
	        return nb;
	    }
	    return 0;
	}
	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	    if ((buf[0] & 0xc0) !== 0x80) {
	        self.lastNeed = 0;
	        return '\ufffd';
	    }
	    if (self.lastNeed > 1 && buf.length > 1) {
	        if ((buf[1] & 0xc0) !== 0x80) {
	            self.lastNeed = 1;
	            return '\ufffd';
	        }
	        if (self.lastNeed > 2 && buf.length > 2) {
	            if ((buf[2] & 0xc0) !== 0x80) {
	                self.lastNeed = 2;
	                return '\ufffd';
	            }
	        }
	    }
	}
	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	    var p = this.lastTotal - this.lastNeed;
	    var r = utf8CheckExtraBytes(this, buf);
	    if (r !== undefined)
	        return r;
	    if (this.lastNeed <= buf.length) {
	        buf.copy(this.lastChar, p, 0, this.lastNeed);
	        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	    }
	    buf.copy(this.lastChar, p, 0, buf.length);
	    this.lastNeed -= buf.length;
	}
	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	    var total = utf8CheckIncomplete(this, buf, i);
	    if (!this.lastNeed)
	        return buf.toString('utf8', i);
	    this.lastTotal = total;
	    var end = buf.length - (total - this.lastNeed);
	    buf.copy(this.lastChar, 0, end);
	    return buf.toString('utf8', i, end);
	}
	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	    var r = buf && buf.length ? this.write(buf) : '';
	    if (this.lastNeed)
	        return r + '\ufffd';
	    return r;
	}
	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	    if ((buf.length - i) % 2 === 0) {
	        var r = buf.toString('utf16le', i);
	        if (r) {
	            var c = r.charCodeAt(r.length - 1);
	            if (c >= 0xd800 && c <= 0xdbff) {
	                this.lastNeed = 2;
	                this.lastTotal = 4;
	                this.lastChar[0] = buf[buf.length - 2];
	                this.lastChar[1] = buf[buf.length - 1];
	                return r.slice(0, -1);
	            }
	        }
	        return r;
	    }
	    this.lastNeed = 1;
	    this.lastTotal = 2;
	    this.lastChar[0] = buf[buf.length - 1];
	    return buf.toString('utf16le', i, buf.length - 1);
	}
	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	    var r = buf && buf.length ? this.write(buf) : '';
	    if (this.lastNeed) {
	        var end = this.lastTotal - this.lastNeed;
	        return r + this.lastChar.toString('utf16le', 0, end);
	    }
	    return r;
	}
	function base64Text(buf, i) {
	    var n = (buf.length - i) % 3;
	    if (n === 0)
	        return buf.toString('base64', i);
	    this.lastNeed = 3 - n;
	    this.lastTotal = 3;
	    if (n === 1) {
	        this.lastChar[0] = buf[buf.length - 1];
	    }
	    else {
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	    }
	    return buf.toString('base64', i, buf.length - n);
	}
	function base64End(buf) {
	    var r = buf && buf.length ? this.write(buf) : '';
	    if (this.lastNeed)
	        return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	    return r;
	}
	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	    return buf.toString(this.encoding);
	}
	function simpleEnd(buf) {
	    return buf && buf.length ? this.write(buf) : '';
	}
	return string_decoder;
}

var _stream_readable;
var hasRequired_stream_readable;

function require_stream_readable () {
	if (hasRequired_stream_readable) return _stream_readable;
	hasRequired_stream_readable = 1;
	/*<replacement>*/
	var pna = process$1;
	/*</replacement>*/
	_stream_readable = Readable;
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	Readable.ReadableState = ReadableState;
	/*<replacement>*/
	require$$2.EventEmitter;
	var EElistenerCount = function (emitter, type) {
	    return emitter.listeners(type).length;
	};
	/*</replacement>*/
	/*<replacement>*/
	var Stream = require$$2.EventEmitter;
	/*</replacement>*/
	/*<replacement>*/
	var Buffer = buffer.Buffer;
	var OurUint8Array = commonjsGlobal.Uint8Array || function () { };
	function _uint8ArrayToBuffer(chunk) {
	    return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*</replacement>*/
	/*<replacement>*/
	var util = Object.create(util$2);
	/*</replacement>*/
	/*<replacement>*/
	var debug = function () { };
	/*</replacement>*/
	var BufferList = requireBufferList().BufferList;
	var destroyImpl = requireDestroy();
	var StringDecoder;
	util.inherits(Readable, Stream);
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	function prependListener(emitter, event, fn) {
	    // Sadly this is not cacheable as some libraries bundle their own
	    // event emitter implementation with them.
	    if (typeof emitter.prependListener === 'function')
	        return emitter.prependListener(event, fn);
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	        emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	        emitter._events[event].unshift(fn);
	    else
	        emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream) {
	    Duplex = Duplex || require_stream_duplex();
	    options = options || {};
	    // Duplex streams are both readable and writable, but share
	    // the same options object.
	    // However, some cases require setting options to different
	    // values for the readable and the writable sides of the duplex stream.
	    // These options can be provided separately as readableXXX and writableXXX.
	    var isDuplex = stream instanceof Duplex;
	    // object stream flag. Used to make read(n) ignore n and to
	    // make all the buffer merging and length checks go away
	    this.objectMode = !!options.objectMode;
	    if (isDuplex)
	        this.objectMode = this.objectMode || !!options.readableObjectMode;
	    // the point at which it stops calling _read() to fill the buffer
	    // Note: 0 is a valid value, means "don't call _read preemptively ever"
	    var hwm = options.highWaterMark;
	    var readableHwm = options.readableHighWaterMark;
	    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	    if (hwm || hwm === 0)
	        this.highWaterMark = hwm;
	    else if (isDuplex && (readableHwm || readableHwm === 0))
	        this.highWaterMark = readableHwm;
	    else
	        this.highWaterMark = defaultHwm;
	    // cast to ints.
	    this.highWaterMark = Math.floor(this.highWaterMark);
	    // A linked list is used to store data chunks instead of an array because the
	    // linked list can remove elements from the beginning faster than
	    // array.shift()
	    this.buffer = new BufferList();
	    this.length = 0;
	    this.pipes = null;
	    this.pipesCount = 0;
	    this.flowing = null;
	    this.ended = false;
	    this.endEmitted = false;
	    this.reading = false;
	    // a flag to be able to tell if the event 'readable'/'data' is emitted
	    // immediately, or on a later tick.  We set this to true at first, because
	    // any actions that shouldn't happen until "later" should generally also
	    // not happen before the first read call.
	    this.sync = true;
	    // whenever we return null, then we set a flag to say
	    // that we're awaiting a 'readable' event emission.
	    this.needReadable = false;
	    this.emittedReadable = false;
	    this.readableListening = false;
	    this.resumeScheduled = false;
	    // has it been destroyed
	    this.destroyed = false;
	    // Crypto is kind of old and crusty.  Historically, its default string
	    // encoding is 'binary' so we have to make this configurable.
	    // Everything else in the universe uses 'utf8', though.
	    this.defaultEncoding = options.defaultEncoding || 'utf8';
	    // the number of writers that are awaiting a drain event in .pipe()s
	    this.awaitDrain = 0;
	    // if true, a maybeReadMore has been scheduled
	    this.readingMore = false;
	    this.decoder = null;
	    this.encoding = null;
	    if (options.encoding) {
	        if (!StringDecoder)
	            StringDecoder = requireString_decoder().StringDecoder;
	        this.decoder = new StringDecoder(options.encoding);
	        this.encoding = options.encoding;
	    }
	}
	function Readable(options) {
	    Duplex = Duplex || require_stream_duplex();
	    if (!(this instanceof Readable))
	        return new Readable(options);
	    this._readableState = new ReadableState(options, this);
	    // legacy
	    this.readable = true;
	    if (options) {
	        if (typeof options.read === 'function')
	            this._read = options.read;
	        if (typeof options.destroy === 'function')
	            this._destroy = options.destroy;
	    }
	    Stream.call(this);
	}
	Object.defineProperty(Readable.prototype, 'destroyed', {
	    get: function () {
	        if (this._readableState === undefined) {
	            return false;
	        }
	        return this._readableState.destroyed;
	    },
	    set: function (value) {
	        // we ignore the value if the stream
	        // has not been initialized yet
	        if (!this._readableState) {
	            return;
	        }
	        // backward compatibility, the user is explicitly
	        // managing destroyed
	        this._readableState.destroyed = value;
	    }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	    this.push(null);
	    cb(err);
	};
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	    var state = this._readableState;
	    var skipChunkCheck;
	    if (!state.objectMode) {
	        if (typeof chunk === 'string') {
	            encoding = encoding || state.defaultEncoding;
	            if (encoding !== state.encoding) {
	                chunk = Buffer.from(chunk, encoding);
	                encoding = '';
	            }
	            skipChunkCheck = true;
	        }
	    }
	    else {
	        skipChunkCheck = true;
	    }
	    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	    return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	    var state = stream._readableState;
	    if (chunk === null) {
	        state.reading = false;
	        onEofChunk(stream, state);
	    }
	    else {
	        var er;
	        if (!skipChunkCheck)
	            er = chunkInvalid(state, chunk);
	        if (er) {
	            stream.emit('error', er);
	        }
	        else if (state.objectMode || (chunk && chunk.length > 0)) {
	            if (typeof chunk !== 'string' &&
	                !state.objectMode &&
	                Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	                chunk = _uint8ArrayToBuffer(chunk);
	            }
	            if (addToFront) {
	                if (state.endEmitted)
	                    stream.emit('error', new Error('stream.unshift() after end event'));
	                else
	                    addChunk(stream, state, chunk, true);
	            }
	            else if (state.ended) {
	                stream.emit('error', new Error('stream.push() after EOF'));
	            }
	            else {
	                state.reading = false;
	                if (state.decoder && !encoding) {
	                    chunk = state.decoder.write(chunk);
	                    if (state.objectMode || chunk.length !== 0)
	                        addChunk(stream, state, chunk, false);
	                    else
	                        maybeReadMore(stream, state);
	                }
	                else {
	                    addChunk(stream, state, chunk, false);
	                }
	            }
	        }
	        else if (!addToFront) {
	            state.reading = false;
	        }
	    }
	    return needMoreData(state);
	}
	function addChunk(stream, state, chunk, addToFront) {
	    if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	    }
	    else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	            state.buffer.unshift(chunk);
	        else
	            state.buffer.push(chunk);
	        if (state.needReadable)
	            emitReadable(stream);
	    }
	    maybeReadMore(stream, state);
	}
	function chunkInvalid(state, chunk) {
	    var er;
	    if (!_isUint8Array(chunk) &&
	        typeof chunk !== 'string' &&
	        chunk !== undefined &&
	        !state.objectMode) {
	        er = new TypeError('Invalid non-string/buffer chunk');
	    }
	    return er;
	}
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	    return (!state.ended &&
	        (state.needReadable || state.length < state.highWaterMark || state.length === 0));
	}
	Readable.prototype.isPaused = function () {
	    return this._readableState.flowing === false;
	};
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	    if (!StringDecoder)
	        StringDecoder = requireString_decoder().StringDecoder;
	    this._readableState.decoder = new StringDecoder(enc);
	    this._readableState.encoding = enc;
	    return this;
	};
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	    if (n >= MAX_HWM) {
	        n = MAX_HWM;
	    }
	    else {
	        // Get the next highest power of 2 to prevent increasing hwm excessively in
	        // tiny amounts
	        n--;
	        n |= n >>> 1;
	        n |= n >>> 2;
	        n |= n >>> 4;
	        n |= n >>> 8;
	        n |= n >>> 16;
	        n++;
	    }
	    return n;
	}
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	    if (n <= 0 || (state.length === 0 && state.ended))
	        return 0;
	    if (state.objectMode)
	        return 1;
	    if (n !== n) {
	        // Only flow one buffer at a time
	        if (state.flowing && state.length)
	            return state.buffer.head.data.length;
	        else
	            return state.length;
	    }
	    // If we're asking for more than the current hwm, then raise the hwm.
	    if (n > state.highWaterMark)
	        state.highWaterMark = computeNewHighWaterMark(n);
	    if (n <= state.length)
	        return n;
	    // Don't have enough
	    if (!state.ended) {
	        state.needReadable = true;
	        return 0;
	    }
	    return state.length;
	}
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	    n = parseInt(n, 10);
	    var state = this._readableState;
	    var nOrig = n;
	    if (n !== 0)
	        state.emittedReadable = false;
	    // if we're doing read(0) to trigger a readable event, but we
	    // already have a bunch of data in the buffer, then just trigger
	    // the 'readable' event and move on.
	    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	        debug('read: emitReadable', state.length, state.ended);
	        if (state.length === 0 && state.ended)
	            endReadable(this);
	        else
	            emitReadable(this);
	        return null;
	    }
	    n = howMuchToRead(n, state);
	    // if we've ended, and we're now clear, then finish it up.
	    if (n === 0 && state.ended) {
	        if (state.length === 0)
	            endReadable(this);
	        return null;
	    }
	    // All the actual chunk generation logic needs to be
	    // *below* the call to _read.  The reason is that in certain
	    // synthetic stream cases, such as passthrough streams, _read
	    // may be a completely synchronous operation which may change
	    // the state of the read buffer, providing enough data when
	    // before there was *not* enough.
	    //
	    // So, the steps are:
	    // 1. Figure out what the state of things will be after we do
	    // a read from the buffer.
	    //
	    // 2. If that resulting state will trigger a _read, then call _read.
	    // Note that this may be asynchronous, or synchronous.  Yes, it is
	    // deeply ugly to write APIs this way, but that still doesn't mean
	    // that the Readable class should behave improperly, as streams are
	    // designed to be sync/async agnostic.
	    // Take note if the _read call is sync or async (ie, if the read call
	    // has returned yet), so that we know whether or not it's safe to emit
	    // 'readable' etc.
	    //
	    // 3. Actually pull the requested chunks out of the buffer and return.
	    // if we need a readable event, then we need to do some reading.
	    var doRead = state.needReadable;
	    // if we currently have less than the highWaterMark, then also read some
	    if (state.length === 0 || state.length - n < state.highWaterMark) {
	        doRead = true;
	    }
	    // however, if we've ended, then there's no point, and if we're already
	    // reading, then it's unnecessary.
	    if (state.ended || state.reading) {
	        doRead = false;
	    }
	    else if (doRead) {
	        state.reading = true;
	        state.sync = true;
	        // if the length is currently zero, then we *need* a readable event.
	        if (state.length === 0)
	            state.needReadable = true;
	        // call internal read method
	        this._read(state.highWaterMark);
	        state.sync = false;
	        // If _read pushed data synchronously, then `reading` will be false,
	        // and we need to re-evaluate how much data we can return to the user.
	        if (!state.reading)
	            n = howMuchToRead(nOrig, state);
	    }
	    var ret;
	    if (n > 0)
	        ret = fromList(n, state);
	    else
	        ret = null;
	    if (ret === null) {
	        state.needReadable = true;
	        n = 0;
	    }
	    else {
	        state.length -= n;
	    }
	    if (state.length === 0) {
	        // If we have nothing in the buffer, then we want to know
	        // as soon as we *do* get something into the buffer.
	        if (!state.ended)
	            state.needReadable = true;
	        // If we tried to read() past the EOF, then emit end on the next tick.
	        if (nOrig !== n && state.ended)
	            endReadable(this);
	    }
	    if (ret !== null)
	        this.emit('data', ret);
	    return ret;
	};
	function onEofChunk(stream, state) {
	    if (state.ended)
	        return;
	    if (state.decoder) {
	        var chunk = state.decoder.end();
	        if (chunk && chunk.length) {
	            state.buffer.push(chunk);
	            state.length += state.objectMode ? 1 : chunk.length;
	        }
	    }
	    state.ended = true;
	    // emit 'readable' now to make sure it gets picked up.
	    emitReadable(stream);
	}
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	    var state = stream._readableState;
	    state.needReadable = false;
	    if (!state.emittedReadable) {
	        debug('emitReadable', state.flowing);
	        state.emittedReadable = true;
	        if (state.sync)
	            pna.nextTick(emitReadable_, stream);
	        else
	            emitReadable_(stream);
	    }
	}
	function emitReadable_(stream) {
	    stream.emit('readable');
	    flow(stream);
	}
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	    if (!state.readingMore) {
	        state.readingMore = true;
	        pna.nextTick(maybeReadMore_, stream, state);
	    }
	}
	function maybeReadMore_(stream, state) {
	    var len = state.length;
	    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	        stream.read(0);
	        if (len === state.length)
	            // didn't get any data, stop spinning.
	            break;
	        else
	            len = state.length;
	    }
	    state.readingMore = false;
	}
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	    this.emit('error', new Error('_read() is not implemented'));
	};
	Readable.prototype.pipe = function (dest, pipeOpts) {
	    var src = this;
	    var state = this._readableState;
	    switch (state.pipesCount) {
	        case 0:
	            state.pipes = dest;
	            break;
	        case 1:
	            state.pipes = [state.pipes, dest];
	            break;
	        default:
	            state.pipes.push(dest);
	            break;
	    }
	    state.pipesCount += 1;
	    debug('pipe count=%d opts=%j', state.pipesCount);
	    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== browser$1$1.stdout && dest !== browser$1$1.stderr;
	    var endFn = doEnd ? onend : unpipe;
	    if (state.endEmitted)
	        pna.nextTick(endFn);
	    else
	        src.once('end', endFn);
	    dest.on('unpipe', onunpipe);
	    function onunpipe(readable, unpipeInfo) {
	        if (readable === src) {
	            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	                unpipeInfo.hasUnpiped = true;
	                cleanup();
	            }
	        }
	    }
	    function onend() {
	        dest.end();
	    }
	    // when the dest drains, it reduces the awaitDrain counter
	    // on the source.  This would be more elegant with a .once()
	    // handler in flow(), but adding and removing repeatedly is
	    // too slow.
	    var ondrain = pipeOnDrain(src);
	    dest.on('drain', ondrain);
	    var cleanedUp = false;
	    function cleanup() {
	        // cleanup event handlers once the pipe is broken
	        dest.removeListener('close', onclose);
	        dest.removeListener('finish', onfinish);
	        dest.removeListener('drain', ondrain);
	        dest.removeListener('error', onerror);
	        dest.removeListener('unpipe', onunpipe);
	        src.removeListener('end', onend);
	        src.removeListener('end', unpipe);
	        src.removeListener('data', ondata);
	        cleanedUp = true;
	        // if the reader is waiting for a drain event from this
	        // specific writer, then it would cause it to never start
	        // flowing again.
	        // So, if this is awaiting a drain, then we just call it now.
	        // If we don't know, then assume that we are waiting for one.
	        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
	            ondrain();
	    }
	    // If the user pushes more data while we're writing to dest then we'll end up
	    // in ondata again. However, we only want to increase awaitDrain once because
	    // dest will only emit one 'drain' event for the multiple writes.
	    // => Introduce a guard on increasing awaitDrain.
	    var increasedAwaitDrain = false;
	    src.on('data', ondata);
	    function ondata(chunk) {
	        increasedAwaitDrain = false;
	        var ret = dest.write(chunk);
	        if (false === ret && !increasedAwaitDrain) {
	            // If the user unpiped during `dest.write()`, it is possible
	            // to get stuck in a permanently paused state if that write
	            // also returned false.
	            // => Check whether `dest` is still a piping destination.
	            if (((state.pipesCount === 1 && state.pipes === dest) ||
	                (state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1)) &&
	                !cleanedUp) {
	                debug('false write response, pause', src._readableState.awaitDrain);
	                src._readableState.awaitDrain++;
	                increasedAwaitDrain = true;
	            }
	            src.pause();
	        }
	    }
	    // if the dest has an error, then stop piping into it.
	    // however, don't suppress the throwing behavior for this.
	    function onerror(er) {
	        unpipe();
	        dest.removeListener('error', onerror);
	        if (EElistenerCount(dest, 'error') === 0)
	            dest.emit('error', er);
	    }
	    // Make sure our error handler is attached before userland ones.
	    prependListener(dest, 'error', onerror);
	    // Both close and finish should trigger unpipe, but only once.
	    function onclose() {
	        dest.removeListener('finish', onfinish);
	        unpipe();
	    }
	    dest.once('close', onclose);
	    function onfinish() {
	        dest.removeListener('close', onclose);
	        unpipe();
	    }
	    dest.once('finish', onfinish);
	    function unpipe() {
	        src.unpipe(dest);
	    }
	    // tell the dest that it's being piped to
	    dest.emit('pipe', src);
	    // start the flow if it hasn't been started already.
	    if (!state.flowing) {
	        src.resume();
	    }
	    return dest;
	};
	function pipeOnDrain(src) {
	    return function () {
	        var state = src._readableState;
	        debug('pipeOnDrain', state.awaitDrain);
	        if (state.awaitDrain)
	            state.awaitDrain--;
	        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	            state.flowing = true;
	            flow(src);
	        }
	    };
	}
	Readable.prototype.unpipe = function (dest) {
	    var state = this._readableState;
	    var unpipeInfo = { hasUnpiped: false };
	    // if we're not piping anywhere, then do nothing.
	    if (state.pipesCount === 0)
	        return this;
	    // just one destination.  most common case.
	    if (state.pipesCount === 1) {
	        // passed in one, but it's not the right one.
	        if (dest && dest !== state.pipes)
	            return this;
	        if (!dest)
	            dest = state.pipes;
	        // got a match.
	        state.pipes = null;
	        state.pipesCount = 0;
	        state.flowing = false;
	        if (dest)
	            dest.emit('unpipe', this, unpipeInfo);
	        return this;
	    }
	    // slow case. multiple pipe destinations.
	    if (!dest) {
	        // remove all.
	        var dests = state.pipes;
	        var len = state.pipesCount;
	        state.pipes = null;
	        state.pipesCount = 0;
	        state.flowing = false;
	        for (var i = 0; i < len; i++) {
	            dests[i].emit('unpipe', this, unpipeInfo);
	        }
	        return this;
	    }
	    // try to find the right one.
	    var index = indexOf(state.pipes, dest);
	    if (index === -1)
	        return this;
	    state.pipes.splice(index, 1);
	    state.pipesCount -= 1;
	    if (state.pipesCount === 1)
	        state.pipes = state.pipes[0];
	    dest.emit('unpipe', this, unpipeInfo);
	    return this;
	};
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	    var res = Stream.prototype.on.call(this, ev, fn);
	    if (ev === 'data') {
	        // Start flowing on next tick if stream isn't explicitly paused
	        if (this._readableState.flowing !== false)
	            this.resume();
	    }
	    else if (ev === 'readable') {
	        var state = this._readableState;
	        if (!state.endEmitted && !state.readableListening) {
	            state.readableListening = state.needReadable = true;
	            state.emittedReadable = false;
	            if (!state.reading) {
	                pna.nextTick(nReadingNextTick, this);
	            }
	            else if (state.length) {
	                emitReadable(this);
	            }
	        }
	    }
	    return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	function nReadingNextTick(self) {
	    self.read(0);
	}
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	    var state = this._readableState;
	    if (!state.flowing) {
	        state.flowing = true;
	        resume(this, state);
	    }
	    return this;
	};
	function resume(stream, state) {
	    if (!state.resumeScheduled) {
	        state.resumeScheduled = true;
	        pna.nextTick(resume_, stream, state);
	    }
	}
	function resume_(stream, state) {
	    if (!state.reading) {
	        stream.read(0);
	    }
	    state.resumeScheduled = false;
	    state.awaitDrain = 0;
	    stream.emit('resume');
	    flow(stream);
	    if (state.flowing && !state.reading)
	        stream.read(0);
	}
	Readable.prototype.pause = function () {
	    debug('call pause flowing=%j', this._readableState.flowing);
	    if (false !== this._readableState.flowing) {
	        this._readableState.flowing = false;
	        this.emit('pause');
	    }
	    return this;
	};
	function flow(stream) {
	    var state = stream._readableState;
	    debug('flow', state.flowing);
	    while (state.flowing && stream.read() !== null) { }
	}
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	    var _this = this;
	    var state = this._readableState;
	    var paused = false;
	    stream.on('end', function () {
	        if (state.decoder && !state.ended) {
	            var chunk = state.decoder.end();
	            if (chunk && chunk.length)
	                _this.push(chunk);
	        }
	        _this.push(null);
	    });
	    stream.on('data', function (chunk) {
	        if (state.decoder)
	            chunk = state.decoder.write(chunk);
	        // don't skip over falsy values in objectMode
	        if (state.objectMode && (chunk === null || chunk === undefined))
	            return;
	        else if (!state.objectMode && (!chunk || !chunk.length))
	            return;
	        var ret = _this.push(chunk);
	        if (!ret) {
	            paused = true;
	            stream.pause();
	        }
	    });
	    // proxy all the other methods.
	    // important when wrapping filters and duplexes.
	    for (var i in stream) {
	        if (this[i] === undefined && typeof stream[i] === 'function') {
	            this[i] = (function (method) {
	                return function () {
	                    return stream[method].apply(stream, arguments);
	                };
	            })(i);
	        }
	    }
	    // proxy certain important events.
	    for (var n = 0; n < kProxyEvents.length; n++) {
	        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	    }
	    // when we try to consume some more bytes, simply unpause the
	    // underlying stream.
	    this._read = function (n) {
	        if (paused) {
	            paused = false;
	            stream.resume();
	        }
	    };
	    return this;
	};
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	    // making it explicit this property is not enumerable
	    // because otherwise some prototype manipulation in
	    // userland will fail
	    enumerable: false,
	    get: function () {
	        return this._readableState.highWaterMark;
	    }
	});
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	    // nothing buffered
	    if (state.length === 0)
	        return null;
	    var ret;
	    if (state.objectMode)
	        ret = state.buffer.shift();
	    else if (!n || n >= state.length) {
	        // read it all, truncate the list
	        if (state.decoder)
	            ret = state.buffer.join('');
	        else if (state.buffer.length === 1)
	            ret = state.buffer.head.data;
	        else
	            ret = state.buffer.concat(state.length);
	        state.buffer.clear();
	    }
	    else {
	        // read part of list
	        ret = fromListPartial(n, state.buffer, state.decoder);
	    }
	    return ret;
	}
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	    var ret;
	    if (n < list.head.data.length) {
	        // slice is the same for buffers and strings
	        ret = list.head.data.slice(0, n);
	        list.head.data = list.head.data.slice(n);
	    }
	    else if (n === list.head.data.length) {
	        // first chunk is a perfect match
	        ret = list.shift();
	    }
	    else {
	        // result spans more than one buffer
	        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	    }
	    return ret;
	}
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	    var p = list.head;
	    var c = 1;
	    var ret = p.data;
	    n -= ret.length;
	    while ((p = p.next)) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length)
	            ret += str;
	        else
	            ret += str.slice(0, n);
	        n -= nb;
	        if (n === 0) {
	            if (nb === str.length) {
	                ++c;
	                if (p.next)
	                    list.head = p.next;
	                else
	                    list.head = list.tail = null;
	            }
	            else {
	                list.head = p;
	                p.data = str.slice(nb);
	            }
	            break;
	        }
	        ++c;
	    }
	    list.length -= c;
	    return ret;
	}
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	    var ret = Buffer.allocUnsafe(n);
	    var p = list.head;
	    var c = 1;
	    p.data.copy(ret);
	    n -= p.data.length;
	    while ((p = p.next)) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;
	        if (n === 0) {
	            if (nb === buf.length) {
	                ++c;
	                if (p.next)
	                    list.head = p.next;
	                else
	                    list.head = list.tail = null;
	            }
	            else {
	                list.head = p;
	                p.data = buf.slice(nb);
	            }
	            break;
	        }
	        ++c;
	    }
	    list.length -= c;
	    return ret;
	}
	function endReadable(stream) {
	    var state = stream._readableState;
	    // If we get here before consuming all the bytes, then that is a
	    // bug in node.  Should never happen.
	    if (state.length > 0)
	        throw new Error('"endReadable()" called on non-empty stream');
	    if (!state.endEmitted) {
	        state.ended = true;
	        pna.nextTick(endReadableNT, state, stream);
	    }
	}
	function endReadableNT(state, stream) {
	    // Check that we didn't get one last unshift.
	    if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	    }
	}
	function indexOf(xs, x) {
	    for (var i = 0, l = xs.length; i < l; i++) {
	        if (xs[i] === x)
	            return i;
	    }
	    return -1;
	}
	return _stream_readable;
}

var _stream_transform = Transform$1;
var Duplex = require_stream_duplex();
/*<replacement>*/
var util$1 = Object.create(util$2);
/*</replacement>*/
util$1.inherits(Transform$1, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) {
        return this.emit('error', new Error('write callback called multiple times'));
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
        // single equals check for both `null` and `undefined`
        this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
    }
}
function Transform$1(options) {
    if (!(this instanceof Transform$1))
        return new Transform$1(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function')
            this._transform = options.transform;
        if (typeof options.flush === 'function')
            this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function') {
        this._flush(function (er, data) {
            done(_this, er, data);
        });
    }
    else {
        done(this, null, null);
    }
}
Transform$1.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform$1.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('_transform() is not implemented');
};
Transform$1.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
            this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform$1.prototype._read = function (n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    }
    else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
    }
};
Transform$1.prototype._destroy = function (err, cb) {
    var _this2 = this;
    Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
        _this2.emit('close');
    });
};
function done(stream, er, data) {
    if (er)
        return stream.emit('error', er);
    if (data != null)
        // single equals check for both `null` and `undefined`
        stream.push(data);
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length)
        throw new Error('Calling transform done when ws.length != 0');
    if (stream._transformState.transforming)
        throw new Error('Calling transform done when still transforming');
    return stream.push(null);
}

var _stream_passthrough = PassThrough;
var Transform = _stream_transform;
/*<replacement>*/
var util = Object.create(util$2);
/*</replacement>*/
util.inherits(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough))
        return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
};

stream.Readable = require_stream_readable();
stream.Writable = require_stream_writable();
stream.Duplex = require_stream_duplex();
stream.Transform = _stream_transform;
stream.PassThrough = _stream_passthrough;

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - hash-base, Copyright (c) 2016 Kirill Fomichev
 * - cipher-base, Copyright (c) 2017 crypto-browserify contributors
 * - create-hash, Copyright (c) 2017 crypto-browserify contributors
 */
Object.defineProperty(Hash$1, "__esModule", { value: true });
// tslint:disable no-bitwise
/* istanbul ignore file */
const buffer_1$5 = buffer;
const stream_1$1 = stream;
class Hash extends stream_1$1.Transform {
    constructor(blockSize, finalSize, endian = 'be') {
        super();
        this._block = buffer_1$5.Buffer.alloc(blockSize);
        this._finalSize = finalSize;
        this._blockSize = blockSize;
        this._bigEndian = endian === 'be';
        this._len = 0;
    }
    _transform(chunk, encoding, callback) {
        let error = null;
        try {
            this.update(chunk, encoding);
        }
        catch (err) {
            error = err;
        }
        callback(error);
    }
    _flush(callback) {
        let error = null;
        try {
            this.push(this.digest());
        }
        catch (err) {
            error = err;
        }
        callback(error);
    }
    update(data, enc) {
        if (typeof data === 'string') {
            enc = enc || 'utf8';
            data = buffer_1$5.Buffer.from(data, enc);
        }
        const block = this._block;
        const blockSize = this._blockSize;
        const length = data.length;
        let accum = this._len;
        for (let offset = 0; offset < length;) {
            const assigned = accum % blockSize;
            const remainder = Math.min(length - offset, blockSize - assigned);
            for (let i = 0; i < remainder; i++) {
                block[assigned + i] = data[offset + i];
            }
            accum += remainder;
            offset += remainder;
            if (accum % blockSize === 0) {
                this._update(block);
            }
        }
        this._len += length;
        return this;
    }
    digest(enc) {
        const rem = this._len % this._blockSize;
        this._block[rem] = 0x80;
        // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
        // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
        this._block.fill(0, rem + 1);
        if (rem >= this._finalSize) {
            this._update(this._block);
            this._block.fill(0);
        }
        const bits = this._len * 8;
        if (bits <= 0xffffffff) {
            if (this._bigEndian) {
                this._block.writeUInt32BE(0, this._blockSize - 8);
                this._block.writeUInt32BE(bits, this._blockSize - 4);
            }
            else {
                this._block.writeUInt32LE(bits, this._blockSize - 8);
                this._block.writeUInt32LE(0, this._blockSize - 4);
            }
        }
        else {
            const lowBits = (bits & 0xffffffff) >>> 0;
            const highBits = (bits - lowBits) / 0x100000000;
            if (this._bigEndian) {
                this._block.writeUInt32BE(highBits, this._blockSize - 8);
                this._block.writeUInt32BE(lowBits, this._blockSize - 4);
            }
            else {
                this._block.writeUInt32LE(lowBits, this._blockSize - 8);
                this._block.writeUInt32LE(highBits, this._blockSize - 4);
            }
        }
        this._update(this._block);
        const hash = this._hash();
        return enc ? hash.toString(enc) : hash;
    }
    _update(_block) {
        throw new Error('_update must be implemented by subclass');
    }
    _hash() {
        throw new Error('_update must be implemented by subclass');
    }
}
Hash$1.default = Hash;

var MD5$1 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - hash-base, Copyright (c) 2016 Kirill Fomichev
 * - cipher-base, Copyright (c) 2017 crypto-browserify contributors
 * - md5.js, Copyright (c) 2016 Kirill Fomichev
 */
Object.defineProperty(MD5$1, "__esModule", { value: true });
const tslib_1$q = require$$0;
// tslint:disable no-bitwise arguments-order
/* istanbul ignore file */
const buffer_1$4 = buffer;
const Hash_1$4 = (0, tslib_1$q.__importDefault)(Hash$1);
function rotl(x, n) {
    return (x << n) | (x >>> (32 - n));
}
function fnF(a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + b) | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + b) | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return (rotl((a + (c ^ (b | ~d)) + m + k) | 0, s) + b) | 0;
}
class MD5 extends Hash_1$4.default {
    constructor() {
        super(64, 56, 'le');
        this._a = 0x67452301;
        this._b = 0xefcdab89;
        this._c = 0x98badcfe;
        this._d = 0x10325476;
        this._m = new Array(16);
    }
    _update(B) {
        const M = this._m;
        for (let i = 0; i < 16; ++i) {
            M[i] = B.readInt32LE(i * 4);
        }
        let a = this._a;
        let b = this._b;
        let c = this._c;
        let d = this._d;
        a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
        d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
        c = fnF(c, d, a, b, M[2], 0x242070db, 17);
        b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
        a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
        d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
        c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
        b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
        a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
        d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
        c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
        b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
        a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
        d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
        c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
        b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
        a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
        d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
        c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
        b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
        a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
        d = fnG(d, a, b, c, M[10], 0x02441453, 9);
        c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
        b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
        a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
        d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
        c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
        b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
        a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
        d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
        c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
        b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
        a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
        d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
        c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
        b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
        a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
        d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
        c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
        b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
        a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
        d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
        c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
        b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
        a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
        d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
        c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
        b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
        a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
        d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
        c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
        b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
        a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
        d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
        c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
        b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
        a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
        d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
        c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
        b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
        a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
        d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
        c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
        b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
        this._a = (this._a + a) | 0;
        this._b = (this._b + b) | 0;
        this._c = (this._c + c) | 0;
        this._d = (this._d + d) | 0;
    }
    _hash() {
        const H = buffer_1$4.Buffer.allocUnsafe(16);
        H.writeInt32LE(this._a, 0);
        H.writeInt32LE(this._b, 4);
        H.writeInt32LE(this._c, 8);
        H.writeInt32LE(this._d, 12);
        return H;
    }
}
MD5$1.default = MD5;

var SHA1 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - hash-base, Copyright (c) 2016 Kirill Fomichev
 * - cipher-base, Copyright (c) 2017 crypto-browserify contributors
 * - sha.js, Copyright (c) 2013-2018 sha.js contributors
 */
Object.defineProperty(SHA1, "__esModule", { value: true });
const tslib_1$p = require$$0;
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */
// tslint:disable no-bitwise
/* istanbul ignore file */
const buffer_1$3 = buffer;
const Hash_1$3 = (0, tslib_1$p.__importDefault)(Hash$1);
const K$2 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
function rotl1(num) {
    return (num << 1) | (num >>> 31);
}
function rotl5(num) {
    return (num << 5) | (num >>> 27);
}
function rotl30(num) {
    return (num << 30) | (num >>> 2);
}
function ft(s, b, c, d) {
    if (s === 0) {
        return (b & c) | (~b & d);
    }
    if (s === 2) {
        return (b & c) | (b & d) | (c & d);
    }
    return b ^ c ^ d;
}
class Sha1 extends Hash_1$3.default {
    constructor() {
        super(64, 56);
        this._a = 0x67452301;
        this._b = 0xefcdab89;
        this._c = 0x98badcfe;
        this._d = 0x10325476;
        this._e = 0xc3d2e1f0;
        this._w = new Array(80);
    }
    _update(M) {
        const W = this._w;
        let a = this._a | 0;
        let b = this._b | 0;
        let c = this._c | 0;
        let d = this._d | 0;
        let e = this._e | 0;
        let i;
        for (i = 0; i < 16; ++i) {
            W[i] = M.readInt32BE(i * 4);
        }
        for (; i < 80; ++i) {
            W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
        }
        for (let j = 0; j < 80; ++j) {
            const s = ~~(j / 20);
            const t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K$2[s]) | 0;
            e = d;
            d = c;
            c = rotl30(b);
            b = a;
            a = t;
        }
        this._a = (a + this._a) | 0;
        this._b = (b + this._b) | 0;
        this._c = (c + this._c) | 0;
        this._d = (d + this._d) | 0;
        this._e = (e + this._e) | 0;
    }
    _hash() {
        const H = buffer_1$3.Buffer.allocUnsafe(20);
        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);
        return H;
    }
}
SHA1.default = Sha1;

var SHA256 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - hash-base, Copyright (c) 2016 Kirill Fomichev
 * - cipher-base, Copyright (c) 2017 crypto-browserify contributors
 * - sha.js, Copyright (c) 2013-2018 sha.js contributors
 */
Object.defineProperty(SHA256, "__esModule", { value: true });
const tslib_1$o = require$$0;
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */
// tslint:disable no-bitwise
/* istanbul ignore file */
const buffer_1$2 = buffer;
const Hash_1$2 = (0, tslib_1$o.__importDefault)(Hash$1);
const K$1 = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function ch(x, y, z) {
    return z ^ (x & (y ^ z));
}
function maj$1(x, y, z) {
    return (x & y) | (z & (x | y));
}
function sigma0$1(x) {
    return ((x >>> 2) | (x << 30)) ^ ((x >>> 13) | (x << 19)) ^ ((x >>> 22) | (x << 10));
}
function sigma1$1(x) {
    return ((x >>> 6) | (x << 26)) ^ ((x >>> 11) | (x << 21)) ^ ((x >>> 25) | (x << 7));
}
function gamma0(x) {
    return ((x >>> 7) | (x << 25)) ^ ((x >>> 18) | (x << 14)) ^ (x >>> 3);
}
function gamma1(x) {
    return ((x >>> 17) | (x << 15)) ^ ((x >>> 19) | (x << 13)) ^ (x >>> 10);
}
class Sha256 extends Hash_1$2.default {
    constructor() {
        super(64, 56);
        this._a = 0x6a09e667;
        this._b = 0xbb67ae85;
        this._c = 0x3c6ef372;
        this._d = 0xa54ff53a;
        this._e = 0x510e527f;
        this._f = 0x9b05688c;
        this._g = 0x1f83d9ab;
        this._h = 0x5be0cd19;
        this._w = new Array(64);
    }
    _update(M) {
        const W = this._w;
        let a = this._a | 0;
        let b = this._b | 0;
        let c = this._c | 0;
        let d = this._d | 0;
        let e = this._e | 0;
        let f = this._f | 0;
        let g = this._g | 0;
        let h = this._h | 0;
        let i;
        for (i = 0; i < 16; ++i) {
            W[i] = M.readInt32BE(i * 4);
        }
        for (; i < 64; ++i) {
            W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;
        }
        for (let j = 0; j < 64; ++j) {
            const T1 = (h + sigma1$1(e) + ch(e, f, g) + K$1[j] + W[j]) | 0;
            const T2 = (sigma0$1(a) + maj$1(a, b, c)) | 0;
            h = g;
            g = f;
            f = e;
            e = (d + T1) | 0;
            d = c;
            c = b;
            b = a;
            a = (T1 + T2) | 0;
        }
        this._a = (a + this._a) | 0;
        this._b = (b + this._b) | 0;
        this._c = (c + this._c) | 0;
        this._d = (d + this._d) | 0;
        this._e = (e + this._e) | 0;
        this._f = (f + this._f) | 0;
        this._g = (g + this._g) | 0;
        this._h = (h + this._h) | 0;
    }
    _hash() {
        const H = buffer_1$2.Buffer.allocUnsafe(32);
        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);
        H.writeInt32BE(this._h, 28);
        return H;
    }
}
SHA256.default = Sha256;

var SHA512 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - hash-base, Copyright (c) 2016 Kirill Fomichev
 * - cipher-base, Copyright (c) 2017 crypto-browserify contributors
 * - sha.js, Copyright (c) 2013-2018 sha.js contributors
 */
Object.defineProperty(SHA512, "__esModule", { value: true });
const tslib_1$n = require$$0;
// tslint:disable no-bitwise
/* istanbul ignore file */
const buffer_1$1 = buffer;
const Hash_1$1 = (0, tslib_1$n.__importDefault)(Hash$1);
const K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function Ch(x, y, z) {
    return z ^ (x & (y ^ z));
}
function maj(x, y, z) {
    return (x & y) | (z & (x | y));
}
function sigma0(x, xl) {
    return ((x >>> 28) | (xl << 4)) ^ ((xl >>> 2) | (x << 30)) ^ ((xl >>> 7) | (x << 25));
}
function sigma1(x, xl) {
    return ((x >>> 14) | (xl << 18)) ^ ((x >>> 18) | (xl << 14)) ^ ((xl >>> 9) | (x << 23));
}
function Gamma0(x, xl) {
    return ((x >>> 1) | (xl << 31)) ^ ((x >>> 8) | (xl << 24)) ^ (x >>> 7);
}
function Gamma0l(x, xl) {
    return ((x >>> 1) | (xl << 31)) ^ ((x >>> 8) | (xl << 24)) ^ ((x >>> 7) | (xl << 25));
}
function Gamma1(x, xl) {
    return ((x >>> 19) | (xl << 13)) ^ ((xl >>> 29) | (x << 3)) ^ (x >>> 6);
}
function Gamma1l(x, xl) {
    return ((x >>> 19) | (xl << 13)) ^ ((xl >>> 29) | (x << 3)) ^ ((x >>> 6) | (xl << 26));
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
class Sha512 extends Hash_1$1.default {
    constructor() {
        super(128, 112);
        this._ah = 0x6a09e667;
        this._bh = 0xbb67ae85;
        this._ch = 0x3c6ef372;
        this._dh = 0xa54ff53a;
        this._eh = 0x510e527f;
        this._fh = 0x9b05688c;
        this._gh = 0x1f83d9ab;
        this._hh = 0x5be0cd19;
        this._al = 0xf3bcc908;
        this._bl = 0x84caa73b;
        this._cl = 0xfe94f82b;
        this._dl = 0x5f1d36f1;
        this._el = 0xade682d1;
        this._fl = 0x2b3e6c1f;
        this._gl = 0xfb41bd6b;
        this._hl = 0x137e2179;
        this._w = new Array(160);
    }
    _update(M) {
        const W = this._w;
        let ah = this._ah | 0;
        let bh = this._bh | 0;
        let ch = this._ch | 0;
        let dh = this._dh | 0;
        let eh = this._eh | 0;
        let fh = this._fh | 0;
        let gh = this._gh | 0;
        let hh = this._hh | 0;
        let al = this._al | 0;
        let bl = this._bl | 0;
        let cl = this._cl | 0;
        let dl = this._dl | 0;
        let el = this._el | 0;
        let fl = this._fl | 0;
        let gl = this._gl | 0;
        let hl = this._hl | 0;
        let Wih;
        let Wil;
        let i = 0;
        for (i = 0; i < 32; i += 2) {
            W[i] = M.readInt32BE(i * 4);
            W[i + 1] = M.readInt32BE(i * 4 + 4);
        }
        for (; i < 160; i += 2) {
            let xh = W[i - 15 * 2];
            let xl = W[i - 15 * 2 + 1];
            const gamma0 = Gamma0(xh, xl);
            const gamma0l = Gamma0l(xl, xh);
            xh = W[i - 2 * 2];
            xl = W[i - 2 * 2 + 1];
            const gamma1 = Gamma1(xh, xl);
            const gamma1l = Gamma1l(xl, xh);
            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
            const Wi7h = W[i - 7 * 2];
            const Wi7l = W[i - 7 * 2 + 1];
            const Wi16h = W[i - 16 * 2];
            const Wi16l = W[i - 16 * 2 + 1];
            Wil = (gamma0l + Wi7l) | 0;
            Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
            Wil = (Wil + gamma1l) | 0;
            Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
            Wil = (Wil + Wi16l) | 0;
            Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;
            W[i] = Wih;
            W[i + 1] = Wil;
        }
        for (let j = 0; j < 160; j += 2) {
            Wih = W[j];
            Wil = W[j + 1];
            const majh = maj(ah, bh, ch);
            const majl = maj(al, bl, cl);
            const sigma0h = sigma0(ah, al);
            const sigma0l = sigma0(al, ah);
            const sigma1h = sigma1(eh, el);
            const sigma1l = sigma1(el, eh);
            // t1 = h + sigma1 + ch + K[j] + W[j]
            const Kih = K[j];
            const Kil = K[j + 1];
            const chh = Ch(eh, fh, gh);
            const chl = Ch(el, fl, gl);
            let t1l = (hl + sigma1l) | 0;
            let t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
            t1l = (t1l + chl) | 0;
            t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
            t1l = (t1l + Kil) | 0;
            t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
            t1l = (t1l + Wil) | 0;
            t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;
            // t2 = sigma0 + maj
            const t2l = (sigma0l + majl) | 0;
            const t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;
            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            el = (dl + t1l) | 0;
            eh = (dh + t1h + getCarry(el, dl)) | 0;
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            al = (t1l + t2l) | 0;
            ah = (t1h + t2h + getCarry(al, t1l)) | 0;
        }
        this._al = (this._al + al) | 0;
        this._bl = (this._bl + bl) | 0;
        this._cl = (this._cl + cl) | 0;
        this._dl = (this._dl + dl) | 0;
        this._el = (this._el + el) | 0;
        this._fl = (this._fl + fl) | 0;
        this._gl = (this._gl + gl) | 0;
        this._hl = (this._hl + hl) | 0;
        this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
        this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
        this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
        this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
        this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
        this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
        this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
        this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
    }
    _hash() {
        const H = buffer_1$1.Buffer.allocUnsafe(64);
        function writeInt64BE(h, l, offset) {
            H.writeInt32BE(h, offset);
            H.writeInt32BE(l, offset + 4);
        }
        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);
        writeInt64BE(this._gh, this._gl, 48);
        writeInt64BE(this._hh, this._hl, 56);
        return H;
    }
}
SHA512.default = Sha512;

/* istanbul ignore file */
Object.defineProperty(createHash$1, "__esModule", { value: true });
createHash$1.Hash = void 0;
const tslib_1$m = require$$0;
const Hash_1 = (0, tslib_1$m.__importDefault)(Hash$1);
createHash$1.Hash = Hash_1.default;
const MD5_1 = (0, tslib_1$m.__importDefault)(MD5$1);
const SHA_1_1 = (0, tslib_1$m.__importDefault)(SHA1);
const SHA_256_1 = (0, tslib_1$m.__importDefault)(SHA256);
const SHA_512_1 = (0, tslib_1$m.__importDefault)(SHA512);
const HASH_IMPLEMENTATIONS = new Map([
    ['md5', MD5_1.default],
    ['sha-1', SHA_1_1.default],
    ['sha-256', SHA_256_1.default],
    ['sha-512', SHA_512_1.default],
    ['sha1', SHA_1_1.default],
    ['sha256', SHA_256_1.default],
    ['sha512', SHA_512_1.default]
]);
function createHash(alg) {
    alg = alg.toLowerCase();
    const HashImp = HASH_IMPLEMENTATIONS.get(alg);
    if (HashImp) {
        return new HashImp();
    }
    else {
        throw new Error('Unsupported hash algorithm: ' + alg);
    }
}
createHash$1.default = createHash;

var Hmac$1 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - hash-base, Copyright (c) 2016 Kirill Fomichev
 * - cipher-base, Copyright (c) 2017 crypto-browserify contributors
 * - create-hash, Copyright (c) 2017 crypto-browserify contributors
 * - create-hmac, Copyright (c) 2017 crypto-browserify contributors
 * - randombytes, Copyright (c) 2017 crypto-browserify
 */
Object.defineProperty(Hmac$1, "__esModule", { value: true });
const tslib_1$l = require$$0;
// tslint:disable no-bitwise
/* istanbul ignore file */
const buffer_1 = buffer;
const stream_1 = stream;
const createHash_1 = (0, tslib_1$l.__importDefault)(createHash$1);
const ZEROS = buffer_1.Buffer.alloc(128);
class Hmac extends stream_1.Transform {
    constructor(alg, key) {
        super();
        if (typeof key === 'string') {
            key = buffer_1.Buffer.from(key);
        }
        const blocksize = alg === 'sha512' ? 128 : 64;
        this._alg = alg;
        if (key.length > blocksize) {
            key = (0, createHash_1.default)(alg).update(key).digest();
        }
        else if (key.length < blocksize) {
            key = buffer_1.Buffer.concat([key, ZEROS], blocksize);
        }
        this._ipad = buffer_1.Buffer.alloc(blocksize);
        this._opad = buffer_1.Buffer.alloc(blocksize);
        for (let i = 0; i < blocksize; i++) {
            this._ipad[i] = key[i] ^ 0x36;
            this._opad[i] = key[i] ^ 0x5c;
        }
        this._hash = (0, createHash_1.default)(alg).update(this._ipad);
    }
    _transform(data, enc, next) {
        let err;
        try {
            this.update(data, enc);
        }
        catch (e) {
            err = e;
        }
        finally {
            next(err);
        }
    }
    _flush(done) {
        let err;
        try {
            this.push(this._final());
        }
        catch (e) {
            err = e;
        }
        done(err);
    }
    _final() {
        const h = this._hash.digest();
        return (0, createHash_1.default)(this._alg).update(this._opad).update(h).digest();
    }
    update(data, inputEnc) {
        this._hash.update(data, inputEnc);
        return this;
    }
    digest(outputEnc) {
        const outData = this._final() || buffer_1.Buffer.alloc(0);
        if (outputEnc) {
            return outData.toString(outputEnc);
        }
        return outData;
    }
}
Hmac$1.default = Hmac;

(function (exports) {
	/* istanbul ignore file */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PassThrough = exports.Duplex = exports.Transform = exports.Writable = exports.Readable = exports.WebSocket = exports.RTCPeerConnection = exports.fetch = exports.Hmac = exports.Hash = exports.createHash = exports.Buffer = exports.name = exports.createResolver = exports.createHmac = exports.getHashes = exports.randomBytes = void 0;
	const tslib_1 = require$$0;
	const buffer_1 = buffer;
	Object.defineProperty(exports, "Buffer", { enumerable: true, get: function () { return buffer_1.Buffer; } });
	const createHash_1 = (0, tslib_1.__importStar)(createHash$1);
	exports.createHash = createHash_1.default;
	Object.defineProperty(exports, "Hash", { enumerable: true, get: function () { return createHash_1.Hash; } });
	const Hmac_1 = (0, tslib_1.__importDefault)(Hmac$1);
	exports.Hmac = Hmac_1.default;
	const stream_1 = stream;
	Object.defineProperty(exports, "Readable", { enumerable: true, get: function () { return stream_1.Readable; } });
	Object.defineProperty(exports, "Writable", { enumerable: true, get: function () { return stream_1.Writable; } });
	Object.defineProperty(exports, "Transform", { enumerable: true, get: function () { return stream_1.Transform; } });
	Object.defineProperty(exports, "PassThrough", { enumerable: true, get: function () { return stream_1.PassThrough; } });
	Object.defineProperty(exports, "Duplex", { enumerable: true, get: function () { return stream_1.Duplex; } });
	function randomBytes(size) {
	    const rawBytes = new Uint8Array(size);
	    if (size > 0) {
	        (globalThis.crypto || globalThis.msCrypto).getRandomValues(rawBytes);
	    }
	    return buffer_1.Buffer.from(rawBytes.buffer);
	}
	exports.randomBytes = randomBytes;
	function getHashes() {
	    return ['sha-1', 'sha-256', 'sha-512', 'md5'];
	}
	exports.getHashes = getHashes;
	function createHmac(alg, key) {
	    return new Hmac_1.default(alg.toLowerCase(), key);
	}
	exports.createHmac = createHmac;
	function createResolver() {
	    return undefined;
	}
	exports.createResolver = createResolver;
	const nativeFetch = globalThis.fetch.bind(globalThis);
	exports.fetch = nativeFetch;
	const nativeWS = globalThis.WebSocket;
	exports.WebSocket = nativeWS;
	const nativeRTCPeerConnection = globalThis
	    .RTCPeerConnection;
	exports.RTCPeerConnection = nativeRTCPeerConnection;
	exports.name = 'browser';
} (browser));

var Parser$1 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from: ltx, Copyright © 2010 Stephan Maka
 */
Object.defineProperty(Parser$1, "__esModule", { value: true });
Parser$1.parse = void 0;
const tslib_1$k = require$$0;
// tslint:disable cognitive-complexity max-switch-cases
const events_1$4 = require$$2;
const Definitions_1$1 = Definitions;
const Element_1$1 = (0, tslib_1$k.__importDefault)(Element);
const Error_1$1 = (0, tslib_1$k.__importDefault)(_Error);
function isBasicNameStart(c) {
    return ((97 /* a */ <= c && c <= 122 /* z */) ||
        (65 /* A */ <= c && c <= 90 /* Z */) ||
        c === 58 /* Colon */ ||
        c === 95 /* Underscore */);
}
function isExtendedNameStart(c) {
    return ((0xc0 <= c && c <= 0xd6) ||
        (0xd8 <= c && c <= 0xf6) ||
        (0xf8 <= c && c <= 0x2ff) ||
        (0x370 <= c && c <= 0x37d) ||
        (0x37f <= c && c <= 0x1fff) ||
        (0x200c <= c && c <= 0x200d) ||
        (0x2070 <= c && c <= 0x218f) ||
        (0x2c00 <= c && c <= 0x2fef) ||
        (0x3001 <= c && c <= 0xd7ff) ||
        (0xfdf0 <= c && c <= 0xfffd) ||
        (0x10000 <= c && c <= 0xeffff));
}
function isNameStart(c) {
    return isBasicNameStart(c) || isExtendedNameStart(c);
}
function isName(c) {
    return (isBasicNameStart(c) ||
        c === 45 /* Dash */ ||
        c === 46 /* Period */ ||
        (48 /* Zero */ <= c && c <= 57 /* Nine */) ||
        c === 0xb7 ||
        (0x0300 <= c && c <= 0x036f) ||
        (0x203f <= c && c <= 0x2040) ||
        isExtendedNameStart(c));
}
function isWhitespace(c) {
    return (c === 32 /* Space */ ||
        c === 10 /* NewLine */ ||
        c === 13 /* CarriageReturn */ ||
        c === 9 /* Tab */);
}
class Parser extends events_1$4.EventEmitter {
    constructor(opts = {}) {
        super();
        this.allowComments = true;
        this.attributes = {};
        this.state = 34 /* TEXT */;
        this.tagName = '';
        this.haveDeclaration = false;
        this.recordBuffer = [];
        if (opts.allowComments !== undefined) {
            this.allowComments = opts.allowComments;
        }
    }
    write(data) {
        for (const char of data) {
            const c = char.codePointAt(0);
            switch (this.state) {
                case 34 /* TEXT */: {
                    if (c === 60 /* LessThan */) {
                        let text;
                        try {
                            text = (0, Definitions_1$1.unescapeXML)(this.endRecord());
                        }
                        catch (err) {
                            this.emit('error', err);
                            return;
                        }
                        if (text) {
                            this.emit('text', text);
                        }
                        this.transition(31 /* TAG_START */);
                        continue;
                    }
                    else {
                        this.record(char);
                        continue;
                    }
                }
                case 31 /* TAG_START */: {
                    if (c === 47 /* Slash */) {
                        this.transition(7 /* CLOSING_TAG_START */);
                        continue;
                    }
                    if (c === 33 /* Exclamation */) {
                        this.transition(24 /* START_INSTRUCTION */);
                        continue;
                    }
                    if (c === 63 /* Question */) {
                        if (this.haveDeclaration) {
                            return this.restrictedXML();
                        }
                        this.transition(25 /* START_PROCESSING_INSTRUCTION */);
                        continue;
                    }
                    if (isNameStart(c)) {
                        this.transition(30 /* TAG_NAME */);
                        this.startRecord(char);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 30 /* TAG_NAME */: {
                    if (isName(c)) {
                        this.record(char);
                        continue;
                    }
                    if (isWhitespace(c)) {
                        this.startTag();
                        this.transition(32 /* TAG_WAIT_NAME */);
                        continue;
                    }
                    if (c === 47 /* Slash */) {
                        this.startTag();
                        this.transition(29 /* TAG_END_SLASH */);
                        continue;
                    }
                    if (c === 62 /* GreaterThan */) {
                        this.startTag();
                        this.transition(34 /* TEXT */);
                        this.emit('startElement', this.tagName, this.attributes);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 29 /* TAG_END_SLASH */: {
                    if (c === 62 /* GreaterThan */) {
                        this.emit('startElement', this.tagName, this.attributes);
                        this.emit('endElement', this.tagName);
                        this.transition(34 /* TEXT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 33 /* TAG */: {
                    if (isWhitespace(c)) {
                        this.transition(32 /* TAG_WAIT_NAME */);
                        continue;
                    }
                    if (c === 47 /* Slash */) {
                        this.transition(29 /* TAG_END_SLASH */);
                        continue;
                    }
                    if (c === 62 /* GreaterThan */) {
                        this.emit('startElement', this.tagName, this.attributes);
                        this.transition(34 /* TEXT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 32 /* TAG_WAIT_NAME */: {
                    if (isWhitespace(c)) {
                        continue;
                    }
                    if (isNameStart(c)) {
                        this.startRecord(char);
                        this.transition(0 /* ATTR_NAME */);
                        continue;
                    }
                    if (c === 47 /* Slash */) {
                        this.transition(29 /* TAG_END_SLASH */);
                        continue;
                    }
                    if (c === 62 /* GreaterThan */) {
                        this.emit('startElement', this.tagName, this.attributes);
                        this.transition(34 /* TEXT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 7 /* CLOSING_TAG_START */: {
                    if (isNameStart(c)) {
                        this.startRecord(char);
                        this.transition(6 /* CLOSING_TAG_NAME */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 6 /* CLOSING_TAG_NAME */: {
                    if (isName(c)) {
                        this.record(char);
                        continue;
                    }
                    if (isWhitespace(c)) {
                        this.transition(8 /* CLOSING_TAG */);
                        continue;
                    }
                    if (c === 62 /* GreaterThan */) {
                        const tag = this.endRecord();
                        this.emit('endElement', tag, this.attributes);
                        this.transition(34 /* TEXT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 8 /* CLOSING_TAG */: {
                    if (isWhitespace(c)) {
                        continue;
                    }
                    if (c === 62 /* GreaterThan */) {
                        const tag = this.endRecord();
                        this.emit('endElement', tag, this.attributes);
                        this.transition(34 /* TEXT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 0 /* ATTR_NAME */: {
                    if (isName(c)) {
                        this.record(char);
                        continue;
                    }
                    if (c === 61 /* Equal */) {
                        this.addAttribute();
                        this.transition(4 /* ATTR_WAIT_QUOTE */);
                        continue;
                    }
                    if (isWhitespace(c)) {
                        this.addAttribute();
                        this.transition(3 /* ATTR_WAIT_EQ */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 3 /* ATTR_WAIT_EQ */: {
                    if (c === 61 /* Equal */) {
                        this.transition(4 /* ATTR_WAIT_QUOTE */);
                        continue;
                    }
                    if (isWhitespace(c)) {
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 4 /* ATTR_WAIT_QUOTE */: {
                    if (c === 34 /* DoubleQuote */) {
                        this.startRecord();
                        this.transition(1 /* ATTR_QUOTE_DOUBLE */);
                        continue;
                    }
                    if (c === 39 /* SingleQuote */) {
                        this.startRecord();
                        this.transition(2 /* ATTR_QUOTE_SINGLE */);
                        continue;
                    }
                    if (isWhitespace(c)) {
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 1 /* ATTR_QUOTE_DOUBLE */:
                case 2 /* ATTR_QUOTE_SINGLE */: {
                    if ((c === 34 /* DoubleQuote */ && this.state === 1 /* ATTR_QUOTE_DOUBLE */) ||
                        (c === 39 /* SingleQuote */ && this.state === 2 /* ATTR_QUOTE_SINGLE */)) {
                        const value = this.endRecord();
                        this.attributes[this.attributeName] = (0, Definitions_1$1.unescapeXML)(value);
                        this.transition(33 /* TAG */);
                        continue;
                    }
                    if (c === 60 /* LessThan */) {
                        return this.notWellFormed();
                    }
                    this.record(char);
                    continue;
                }
                case 24 /* START_INSTRUCTION */: {
                    if (c === 45 /* Dash */) {
                        if (!this.allowComments) {
                            return this.restrictedXML();
                        }
                        this.transition(23 /* START_COMMENT_DASH */);
                        continue;
                    }
                    if (c === 91 /* LeftBracket */) {
                        this.transition(21 /* START_CDATA_LB */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 23 /* START_COMMENT_DASH */: {
                    if (c === 45 /* Dash */) {
                        this.transition(14 /* IGNORE_COMMENT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 14 /* IGNORE_COMMENT */: {
                    if (c === 45 /* Dash */) {
                        this.transition(12 /* END_COMMENT_DASH */);
                    }
                    continue;
                }
                case 12 /* END_COMMENT_DASH */: {
                    if (c === 45 /* Dash */) {
                        this.transition(11 /* END_COMMENT_DASH_DASH */);
                    }
                    else {
                        this.transition(14 /* IGNORE_COMMENT */);
                    }
                    continue;
                }
                case 11 /* END_COMMENT_DASH_DASH */: {
                    if (c === 62 /* GreaterThan */) {
                        this.transition(34 /* TEXT */);
                    }
                    else {
                        this.transition(14 /* IGNORE_COMMENT */);
                    }
                    continue;
                }
                case 25 /* START_PROCESSING_INSTRUCTION */: {
                    if (c === 88 /* X */ || c === 120 /* x */) {
                        this.transition(28 /* START_XML_DECLARATION_X */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 28 /* START_XML_DECLARATION_X */: {
                    if (c === 77 /* M */ || c === 109 /* m */) {
                        this.transition(27 /* START_XML_DECLARATION_X_M */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 27 /* START_XML_DECLARATION_X_M */: {
                    if (c === 76 /* L */ || c === 108 /* l */) {
                        this.transition(26 /* START_XML_DECLARATION_X_M_L */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 26 /* START_XML_DECLARATION_X_M_L */: {
                    if (isWhitespace(c)) {
                        this.haveDeclaration = true;
                        this.transition(15 /* IGNORE_INSTRUCTION */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 13 /* END_XML_DECLARATION_QM */: {
                    if (c === 62 /* GreaterThan */) {
                        this.transition(34 /* TEXT */);
                        continue;
                    }
                    return this.notWellFormed();
                }
                case 15 /* IGNORE_INSTRUCTION */: {
                    if (c === 63 /* Question */) {
                        this.transition(13 /* END_XML_DECLARATION_QM */);
                    }
                    continue;
                }
                case 21 /* START_CDATA_LB */: {
                    this.wait(c, 67 /* C */, 20 /* START_CDATA_LB_C */);
                    continue;
                }
                case 20 /* START_CDATA_LB_C */: {
                    this.wait(c, 68 /* D */, 19 /* START_CDATA_LB_C_D */);
                    continue;
                }
                case 19 /* START_CDATA_LB_C_D */: {
                    this.wait(c, 65 /* A */, 18 /* START_CDATA_LB_C_D_A */);
                    continue;
                }
                case 18 /* START_CDATA_LB_C_D_A */: {
                    this.wait(c, 84 /* T */, 17 /* START_CDATA_LB_C_D_A_T */);
                    continue;
                }
                case 17 /* START_CDATA_LB_C_D_A_T */: {
                    this.wait(c, 65 /* A */, 16 /* START_CDATA_LB_C_D_A_T_A */);
                    continue;
                }
                case 16 /* START_CDATA_LB_C_D_A_T_A */: {
                    this.wait(c, 91 /* LeftBracket */, 5 /* CDATA */);
                    continue;
                }
                case 5 /* CDATA */: {
                    if (c === 93 /* RightBracket */) {
                        this.transition(10 /* END_CDATA_RB */);
                        continue;
                    }
                    this.record(char);
                    continue;
                }
                case 10 /* END_CDATA_RB */: {
                    if (c === 93 /* RightBracket */) {
                        this.transition(9 /* END_CDATA_RB_RB */);
                    }
                    else {
                        this.record(String.fromCodePoint(93 /* RightBracket */));
                        this.record(char);
                        this.transition(5 /* CDATA */);
                    }
                    continue;
                }
                case 9 /* END_CDATA_RB_RB */: {
                    if (c === 62 /* GreaterThan */) {
                        const text = this.endRecord();
                        if (text) {
                            this.emit('text', text);
                        }
                        this.transition(34 /* TEXT */);
                    }
                    else {
                        this.record(String.fromCodePoint(93 /* RightBracket */));
                        this.record(String.fromCodePoint(93 /* RightBracket */));
                        this.record(char);
                        this.transition(5 /* CDATA */);
                    }
                    continue;
                }
            }
        }
    }
    end(data) {
        if (data) {
            this.write(data);
        }
        this.write = () => undefined;
    }
    record(char) {
        this.recordBuffer.push(char);
    }
    startRecord(char) {
        this.recordBuffer = [];
        if (char) {
            this.recordBuffer.push(char);
        }
    }
    endRecord() {
        const data = this.recordBuffer;
        this.recordBuffer = [];
        return data.join('');
    }
    startTag() {
        this.tagName = this.endRecord();
        this.attributes = {};
    }
    addAttribute() {
        const name = this.endRecord();
        if (this.attributes[name] !== undefined) {
            return this.notWellFormed();
        }
        this.attributeName = name;
        this.attributes[name] = '';
    }
    wait(c, nextChar, newState) {
        if (c === nextChar) {
            this.transition(newState);
            return;
        }
        return this.notWellFormed();
    }
    transition(state) {
        this.state = state;
        if (state === 34 /* TEXT */) {
            this.startRecord();
        }
    }
    notWellFormed(msg) {
        this.emit('error', Error_1$1.default.notWellFormed(msg));
    }
    restrictedXML(msg) {
        this.emit('error', Error_1$1.default.restrictedXML(msg));
    }
}
function parse$1(data, opts = {}) {
    const p = new Parser(opts);
    let result;
    let element;
    let error = null;
    p.on('text', (text) => {
        if (element) {
            element.children.push(text);
        }
    });
    p.on('startElement', (name, attrs) => {
        const child = new Element_1$1.default(name, attrs);
        if (!result) {
            result = child;
        }
        if (!element) {
            element = child;
        }
        else {
            element = element.appendChild(child);
        }
    });
    p.on('endElement', (name) => {
        if (!element) {
            p.emit('error', Error_1$1.default.notWellFormed('a'));
        }
        else if (name === element.name) {
            if (element.parent) {
                element = element.parent;
            }
        }
        else {
            p.emit('error', Error_1$1.default.notWellFormed('b'));
        }
    });
    p.on('error', (e) => {
        error = e;
    });
    p.write(data);
    p.end();
    if (error) {
        throw error;
    }
    else {
        return result;
    }
}
Parser$1.parse = parse$1;
Parser$1.default = Parser;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.childAlternateLanguageRawElement = exports.childLanguageRawElement = exports.childRawElement = exports.staticValue = exports.splicePath = exports.multipleChildEnum = exports.multipleChildAlternateLanguageText = exports.childAlternateLanguageText = exports.multipleChildIntegerAttribute = exports.multipleChildAttribute = exports.multipleChildText = exports.childDoubleEnum = exports.childEnum = exports.deepMultipleChildText = exports.deepChildBoolean = exports.deepChildInteger = exports.deepChildText = exports.childBoolean = exports.childTimezoneOffset = exports.childJSON = exports.childFloat = exports.childInteger = exports.childDate = exports.childTextBuffer = exports.childText = exports.childLanguageAttribute = exports.languageAttribute = exports.textBuffer = exports.textJSON = exports.text = exports.childDateAttribute = exports.childFloatAttribute = exports.childIntegerAttribute = exports.childBooleanAttribute = exports.childAttribute = exports.namespacedDateAttribute = exports.namespacedFloatAttribute = exports.namespacedIntegerAttribute = exports.namespacedBooleanAttribute = exports.namespacedAttribute = exports.dateAttribute = exports.floatAttribute = exports.integerAttribute = exports.booleanAttribute = exports.attribute = exports.findOrCreate = exports.findAll = exports.getTargetLang = exports.getLang = exports.createElement = void 0;
	exports.parameterMap = void 0;
	const tslib_1 = require$$0;
	const platform_1 = browser;
	const Element_1 = (0, tslib_1.__importDefault)(Element);
	const Parser_1 = Parser$1;
	function createElement(namespace, name, parentNamespace, parent) {
	    if (parent) {
	        namespace = namespace || parent.getNamespace();
	        const root = parent.getNamespaceRoot(namespace);
	        if (root) {
	            const prefix = root.useNamespace('', namespace);
	            name = `${prefix}:${name}`;
	        }
	    }
	    const el = new Element_1.default(name);
	    if (name.indexOf(':') < 0 && (!parentNamespace || namespace !== parentNamespace)) {
	        el.setAttribute('xmlns', namespace);
	    }
	    return el;
	}
	exports.createElement = createElement;
	function getLang(xml, lang) {
	    return (xml.getAttribute('xml:lang') || lang || '').toLowerCase();
	}
	exports.getLang = getLang;
	function getTargetLang(children, context) {
	    const availableLanguages = [];
	    for (const child of children) {
	        availableLanguages.push(getLang(child, context.lang));
	    }
	    let targetLanguage;
	    if (!context.resolveLanguage) {
	        targetLanguage = context.lang;
	    }
	    else {
	        targetLanguage = context.resolveLanguage(availableLanguages, context.acceptLanguages || [], context.lang);
	    }
	    return targetLanguage || '';
	}
	exports.getTargetLang = getTargetLang;
	function findAll(xml, namespace, element, lang) {
	    const existing = xml.getChildren(element, namespace);
	    const parentLang = getLang(xml);
	    if (existing.length) {
	        if (lang) {
	            return existing.filter(child => {
	                const childLang = getLang(child, parentLang);
	                if (childLang === lang) {
	                    return true;
	                }
	            });
	        }
	        else {
	            return existing;
	        }
	    }
	    return [];
	}
	exports.findAll = findAll;
	function findOrCreate(xml, namespace, element, lang) {
	    namespace = namespace || xml.getNamespace();
	    const existing = findAll(xml, namespace, element, lang);
	    if (existing.length) {
	        return existing[0];
	    }
	    const created = createElement(namespace, element, xml.getDefaultNamespace(), xml);
	    const parentLang = getLang(xml, lang);
	    if (lang && parentLang !== lang) {
	        created.setAttribute('xml:lang', lang);
	    }
	    xml.appendChild(created);
	    return created;
	}
	exports.findOrCreate = findOrCreate;
	function createAttributeField(opts) {
	    return {
	        importer(xml) {
	            const rawValue = xml.getAttribute(opts.name, opts.namespace);
	            if (!rawValue) {
	                return opts.dynamicDefault ? opts.dynamicDefault(rawValue) : opts.staticDefault;
	            }
	            return opts.parseValue(rawValue);
	        },
	        exporter(xml, value) {
	            if (value === undefined || value === opts.staticDefault) {
	                return;
	            }
	            const output = opts.writeValue(value);
	            if (!output && !opts.emitEmpty) {
	                return;
	            }
	            if (!opts.namespace || !opts.prefix) {
	                xml.setAttribute(opts.name, output, opts.emitEmpty);
	            }
	            else {
	                let prefix;
	                const root = xml.getNamespaceRoot(opts.namespace);
	                if (root) {
	                    prefix = root.useNamespace(opts.prefix, opts.namespace);
	                }
	                else {
	                    const namespaces = xml.getNamespaceContext();
	                    if (!namespaces[opts.namespace]) {
	                        prefix = xml.useNamespace(opts.prefix, opts.namespace);
	                        namespaces[opts.namespace] = prefix;
	                    }
	                }
	                xml.setAttribute(`${prefix}:${opts.name}`, output, opts.emitEmpty);
	            }
	        }
	    };
	}
	function createAttributeType(parser, createOpts) {
	    return (name, defaultValue = undefined, opts = {}) => {
	        opts = { staticDefault: defaultValue, ...opts };
	        return createAttributeField({
	            name,
	            ...parser,
	            ...(createOpts ? createOpts(opts) : opts)
	        });
	    };
	}
	function createNamespacedAttributeType(parser, createOpts) {
	    return (prefix, namespace, name, defaultValue = undefined, opts = {}) => {
	        opts = { staticDefault: defaultValue, ...opts };
	        return createAttributeField({
	            name,
	            namespace,
	            prefix,
	            ...parser,
	            ...(createOpts ? createOpts(opts) : opts)
	        });
	    };
	}
	function createChildAttributeField(opts) {
	    const converter = opts.converter ||
	        createAttributeField({
	            ...opts,
	            namespace: opts.attributeNamespace
	        });
	    return {
	        importer(xml, context) {
	            const child = xml.getChild(opts.element, opts.namespace || xml.getNamespace());
	            if (!child) {
	                return opts.dynamicDefault ? opts.dynamicDefault() : opts.staticDefault;
	            }
	            return converter.importer(child, context);
	        },
	        exporter(xml, value, context) {
	            if (value !== undefined && value !== opts.staticDefault) {
	                const child = findOrCreate(xml, opts.namespace || xml.getNamespace(), opts.element);
	                converter.exporter(child, value, context);
	            }
	        }
	    };
	}
	function createChildAttributeType(parser, createOpts) {
	    return (namespace, element, name, defaultValue = undefined, opts = {}) => {
	        opts = { staticDefault: defaultValue, ...opts };
	        return createChildAttributeField({
	            element,
	            name,
	            namespace,
	            ...parser,
	            ...(createOpts ? createOpts(opts) : opts)
	        });
	    };
	}
	function createTextField(opts) {
	    return {
	        importer(xml) {
	            const rawValue = xml.getText();
	            if (!rawValue) {
	                return opts.dynamicDefault ? opts.dynamicDefault(rawValue) : opts.staticDefault;
	            }
	            return opts.parseValue(rawValue);
	        },
	        exporter(xml, value) {
	            if (!value && opts.emitEmpty) {
	                xml.children.push('');
	                return;
	            }
	            if (value === undefined || value === opts.staticDefault) {
	                return;
	            }
	            const output = opts.writeValue(value);
	            if (output) {
	                xml.children.push(output);
	            }
	        }
	    };
	}
	function createChildTextField(opts) {
	    const converter = createTextField(opts);
	    return {
	        importer(xml, context) {
	            const children = findAll(xml, opts.namespace || xml.getNamespace(), opts.element);
	            const targetLanguage = getTargetLang(children, context);
	            if (!children.length) {
	                return opts.dynamicDefault ? opts.dynamicDefault() : opts.staticDefault;
	            }
	            if (opts.matchLanguage) {
	                for (const child of children) {
	                    if (getLang(child, context.lang) === targetLanguage) {
	                        return converter.importer(child, context);
	                    }
	                }
	            }
	            return converter.importer(children[0], context);
	        },
	        exporter(xml, value, context) {
	            if (!value && opts.emitEmpty) {
	                findOrCreate(xml, opts.namespace || xml.getNamespace(), opts.element, opts.matchLanguage ? context.lang : undefined);
	                return;
	            }
	            if (value !== undefined && value !== opts.staticDefault) {
	                const child = findOrCreate(xml, opts.namespace || xml.getNamespace(), opts.element, opts.matchLanguage ? context.lang : undefined);
	                converter.exporter(child, value, context);
	            }
	        }
	    };
	}
	const stringParser = {
	    parseValue: v => v,
	    writeValue: v => v
	};
	const integerParser = {
	    parseValue: v => parseInt(v, 10),
	    writeValue: v => v.toString()
	};
	const floatParser = {
	    parseValue: v => parseFloat(v),
	    writeValue: v => v.toString()
	};
	const boolParser = {
	    parseValue: v => {
	        if (v === 'true' || v === '1') {
	            return true;
	        }
	        if (v === 'false' || v === '0') {
	            return false;
	        }
	        return;
	    },
	    writeValue: v => (v ? '1' : '0')
	};
	const dateParser = {
	    parseValue: v => new Date(v),
	    writeValue: v => (typeof v === 'string' ? v : v.toISOString())
	};
	const jsonParser = {
	    parseValue: v => JSON.parse(v),
	    writeValue: v => JSON.stringify(v)
	};
	const bufferParser = (encoding = 'utf8') => ({
	    parseValue: v => {
	        if (encoding === 'base64' && v === '=') {
	            v = '';
	        }
	        return platform_1.Buffer.from(v.trim(), encoding);
	    },
	    writeValue: v => {
	        let data;
	        if (typeof v === 'string') {
	            data = platform_1.Buffer.from(v).toString(encoding);
	        }
	        else if (v) {
	            data = v.toString(encoding);
	        }
	        else {
	            data = '';
	        }
	        if (encoding === 'base64') {
	            data = data || '=';
	        }
	        return data;
	    }
	});
	const tzOffsetParser = {
	    parseValue: v => {
	        let sign = -1;
	        if (v.charAt(0) === '-') {
	            sign = 1;
	            v = v.slice(1);
	        }
	        const split = v.split(':');
	        const hours = parseInt(split[0], 10);
	        const minutes = parseInt(split[1], 10);
	        return (hours * 60 + minutes) * sign;
	    },
	    writeValue: v => {
	        if (typeof v === 'string') {
	            return v;
	        }
	        else {
	            let formatted = '-';
	            if (v < 0) {
	                v = -v;
	                formatted = '+';
	            }
	            const hours = v / 60;
	            const minutes = v % 60;
	            formatted +=
	                (hours < 10 ? '0' : '') + hours + ':' + (minutes < 10 ? '0' : '') + minutes;
	            return formatted;
	        }
	    }
	};
	// ====================================================================
	// Field Types
	// ====================================================================
	exports.attribute = createAttributeType(stringParser, opts => ({
	    dynamicDefault: opts.emitEmpty ? v => (v === '' ? '' : opts.staticDefault) : undefined,
	    ...opts
	}));
	exports.booleanAttribute = createAttributeType(boolParser);
	exports.integerAttribute = createAttributeType(integerParser);
	exports.floatAttribute = createAttributeType(floatParser);
	exports.dateAttribute = createAttributeType(dateParser);
	exports.namespacedAttribute = createNamespacedAttributeType(stringParser);
	exports.namespacedBooleanAttribute = createNamespacedAttributeType(boolParser);
	exports.namespacedIntegerAttribute = createNamespacedAttributeType(integerParser);
	exports.namespacedFloatAttribute = createNamespacedAttributeType(floatParser);
	exports.namespacedDateAttribute = createNamespacedAttributeType(dateParser);
	exports.childAttribute = createChildAttributeType(stringParser);
	exports.childBooleanAttribute = createChildAttributeType(boolParser);
	exports.childIntegerAttribute = createChildAttributeType(integerParser);
	exports.childFloatAttribute = createChildAttributeType(floatParser);
	exports.childDateAttribute = createChildAttributeType(dateParser);
	const text = (defaultValue) => createTextField({
	    staticDefault: defaultValue,
	    ...stringParser
	});
	exports.text = text;
	const textJSON = () => createTextField({ ...jsonParser });
	exports.textJSON = textJSON;
	const textBuffer = (encoding = 'utf8') => createTextField({
	    ...bufferParser(encoding)
	});
	exports.textBuffer = textBuffer;
	function languageAttribute() {
	    return {
	        importer(xml, context) {
	            return getLang(xml, context.lang);
	        },
	        exporter(xml, value, context) {
	            if (value && value.toLowerCase() !== context.lang) {
	                xml.setAttribute('xml:lang', value);
	            }
	            else {
	                xml.setAttribute('xml:lang', undefined);
	            }
	        }
	    };
	}
	exports.languageAttribute = languageAttribute;
	const childLanguageAttribute = (namespace, element) => createChildAttributeField({
	    converter: languageAttribute(),
	    element,
	    name: 'xml:lang',
	    namespace,
	    ...stringParser
	});
	exports.childLanguageAttribute = childLanguageAttribute;
	const childText = (namespace, element, defaultValue, emitEmpty = false) => createChildTextField({
	    element,
	    emitEmpty,
	    matchLanguage: true,
	    namespace,
	    staticDefault: defaultValue,
	    ...stringParser
	});
	exports.childText = childText;
	const childTextBuffer = (namespace, element, encoding = 'utf8') => createChildTextField({
	    element,
	    matchLanguage: true,
	    namespace,
	    ...bufferParser(encoding)
	});
	exports.childTextBuffer = childTextBuffer;
	const childDate = (namespace, element) => createChildTextField({
	    element,
	    namespace,
	    ...dateParser
	});
	exports.childDate = childDate;
	const childInteger = (namespace, element, defaultValue) => createChildTextField({
	    element,
	    namespace,
	    staticDefault: defaultValue,
	    ...integerParser
	});
	exports.childInteger = childInteger;
	const childFloat = (namespace, element, defaultValue) => createChildTextField({
	    element,
	    namespace,
	    staticDefault: defaultValue,
	    ...floatParser
	});
	exports.childFloat = childFloat;
	const childJSON = (namespace, element) => createChildTextField({
	    element,
	    namespace,
	    ...jsonParser
	});
	exports.childJSON = childJSON;
	function childTimezoneOffset(namespace, element) {
	    return createChildTextField({
	        element,
	        namespace,
	        staticDefault: 0,
	        ...tzOffsetParser
	    });
	}
	exports.childTimezoneOffset = childTimezoneOffset;
	function childBoolean(namespace, element) {
	    return {
	        importer(xml) {
	            const child = xml.getChild(element, namespace || xml.getNamespace());
	            if (child) {
	                return true;
	            }
	        },
	        exporter(xml, value) {
	            if (value) {
	                findOrCreate(xml, namespace || xml.getNamespace(), element);
	            }
	        }
	    };
	}
	exports.childBoolean = childBoolean;
	const deepChildExporter = (path, xml, value) => {
	    if (!value) {
	        return;
	    }
	    let current = xml;
	    for (const node of path) {
	        current = findOrCreate(current, node.namespace || current.getNamespace(), node.element);
	    }
	    current.children.push(value.toString());
	};
	function deepChildText(path, defaultValue) {
	    return {
	        importer(xml) {
	            let current = xml;
	            for (const node of path) {
	                current = current.getChild(node.element, node.namespace || current.getNamespace());
	                if (!current) {
	                    return defaultValue;
	                }
	            }
	            return current.getText() || defaultValue;
	        },
	        exporter(xml, value) {
	            deepChildExporter(path, xml, value);
	        }
	    };
	}
	exports.deepChildText = deepChildText;
	function deepChildInteger(path, defaultValue) {
	    return {
	        importer(xml) {
	            let current = xml;
	            for (const node of path) {
	                current = current.getChild(node.element, node.namespace || current.getNamespace());
	                if (!current) {
	                    return;
	                }
	            }
	            const data = current.getText();
	            if (data) {
	                return parseInt(data, 10);
	            }
	            else if (defaultValue) {
	                return defaultValue;
	            }
	        },
	        exporter(xml, value) {
	            deepChildExporter(path, xml, value);
	        }
	    };
	}
	exports.deepChildInteger = deepChildInteger;
	function deepChildBoolean(path) {
	    return {
	        importer(xml) {
	            let current = xml;
	            for (const node of path) {
	                current = current.getChild(node.element, node.namespace || current.getNamespace());
	                if (!current) {
	                    return false;
	                }
	            }
	            return true;
	        },
	        exporter(xml, value) {
	            if (!value) {
	                return;
	            }
	            let current = xml;
	            for (const node of path) {
	                current = findOrCreate(current, node.namespace || current.getNamespace(), node.element);
	            }
	        }
	    };
	}
	exports.deepChildBoolean = deepChildBoolean;
	function deepMultipleChildText(path) {
	    const finalChild = path.pop();
	    return {
	        importer(xml, context) {
	            let current = xml;
	            for (const node of path) {
	                current = current.getChild(node.element, node.namespace || current.getNamespace());
	                if (!current) {
	                    return [];
	                }
	            }
	            const result = [];
	            const children = findAll(current, finalChild.namespace || current.getNamespace(), finalChild.element);
	            const targetLanguage = getTargetLang(children, context);
	            for (const child of children) {
	                if (getLang(child, context.lang) === targetLanguage) {
	                    result.push(child.getText());
	                }
	            }
	            return result;
	        },
	        exporter(xml, values, context) {
	            if (!values.length) {
	                return;
	            }
	            let current = xml;
	            for (const node of path) {
	                current = findOrCreate(current, node.namespace || current.getNamespace(), node.element);
	            }
	            const { namespace, element } = finalChild;
	            for (const value of values) {
	                const child = createElement(namespace || current.getNamespace(), element, context.namespace, current);
	                child.children.push(value);
	                current.appendChild(child);
	            }
	        }
	    };
	}
	exports.deepMultipleChildText = deepMultipleChildText;
	function childEnum(namespace, elements, defaultValue) {
	    const elementNames = new Map();
	    const valueNames = new Map();
	    for (const el of elements) {
	        if (typeof el === 'string') {
	            elementNames.set(el, el);
	            valueNames.set(el, el);
	        }
	        else {
	            elementNames.set(el[1], el[0]);
	            valueNames.set(el[0], el[1]);
	        }
	    }
	    return {
	        importer(xml) {
	            for (const child of xml.children) {
	                if (typeof child === 'string') {
	                    continue;
	                }
	                else if (child.getNamespace() === (namespace || xml.getNamespace()) &&
	                    elementNames.has(child.getName())) {
	                    return elementNames.get(child.getName());
	                }
	            }
	            return defaultValue;
	        },
	        exporter(xml, value) {
	            if (valueNames.has(value)) {
	                findOrCreate(xml, namespace, valueNames.get(value));
	            }
	        }
	    };
	}
	exports.childEnum = childEnum;
	function childDoubleEnum(namespace, parentElements, childElements, defaultValue) {
	    const parentNames = new Set(parentElements);
	    const childNames = new Set(childElements);
	    return {
	        importer(xml) {
	            for (const parent of xml.children) {
	                if (typeof parent === 'string') {
	                    continue;
	                }
	                else if (parent.getNamespace() === (namespace || xml.getNamespace()) &&
	                    parentNames.has(parent.getName())) {
	                    for (const child of parent.children) {
	                        if (typeof child === 'string') {
	                            continue;
	                        }
	                        else if (child.getNamespace() === (namespace || xml.getNamespace()) &&
	                            childNames.has(child.getName())) {
	                            return [parent.getName(), child.getName()];
	                        }
	                    }
	                    return [parent.getName()];
	                }
	            }
	            return defaultValue;
	        },
	        exporter(xml, value) {
	            const parent = findOrCreate(xml, namespace, value[0]);
	            if (value[1]) {
	                findOrCreate(parent, namespace, value[1]);
	            }
	        }
	    };
	}
	exports.childDoubleEnum = childDoubleEnum;
	function multipleChildText(namespace, element) {
	    return {
	        importer(xml, context) {
	            const result = [];
	            const children = findAll(xml, namespace || xml.getNamespace(), element);
	            const targetLanguage = getTargetLang(children, context);
	            for (const child of children) {
	                if (getLang(child, context.lang) === targetLanguage) {
	                    result.push(child.getText());
	                }
	            }
	            return result;
	        },
	        exporter(xml, values, context) {
	            for (const value of values) {
	                const child = createElement(namespace || xml.getNamespace(), element, context.namespace, xml);
	                child.children.push(value);
	                xml.appendChild(child);
	            }
	        }
	    };
	}
	exports.multipleChildText = multipleChildText;
	function multipleChildAttribute(namespace, element, name) {
	    return {
	        importer(xml) {
	            const result = [];
	            const children = xml.getChildren(element, namespace || xml.getNamespace());
	            for (const child of children) {
	                const childAttr = child.getAttribute(name);
	                if (childAttr !== undefined) {
	                    result.push(childAttr);
	                }
	            }
	            return result;
	        },
	        exporter(xml, values, context) {
	            for (const value of values) {
	                const child = createElement(namespace || xml.getNamespace(), element, context.namespace, xml);
	                child.setAttribute(name, value);
	                xml.appendChild(child);
	            }
	        }
	    };
	}
	exports.multipleChildAttribute = multipleChildAttribute;
	function multipleChildIntegerAttribute(namespace, element, name) {
	    return {
	        importer(xml) {
	            const result = [];
	            const children = xml.getChildren(element, namespace || xml.getNamespace());
	            for (const child of children) {
	                const childAttr = child.getAttribute(name);
	                if (childAttr !== undefined) {
	                    result.push(parseInt(childAttr, 10));
	                }
	            }
	            return result;
	        },
	        exporter(xml, values, context) {
	            for (const value of values) {
	                const child = createElement(namespace || xml.getNamespace(), element, context.namespace, xml);
	                child.setAttribute(name, value.toString());
	                xml.appendChild(child);
	            }
	        }
	    };
	}
	exports.multipleChildIntegerAttribute = multipleChildIntegerAttribute;
	function childAlternateLanguageText(namespace, element) {
	    return {
	        importer(xml, context) {
	            const results = [];
	            const children = findAll(xml, namespace || xml.getNamespace(), element);
	            const seenLanuages = new Set();
	            for (const child of children) {
	                const langText = child.getText();
	                if (langText) {
	                    const lang = getLang(child, context.lang);
	                    if (seenLanuages.has(lang)) {
	                        continue;
	                    }
	                    results.push({ lang, value: langText });
	                    seenLanuages.add(lang);
	                }
	            }
	            return seenLanuages.size > 0 ? results : undefined;
	        },
	        exporter(xml, values, context) {
	            for (const entry of values) {
	                const val = entry.value;
	                if (val) {
	                    const child = createElement(namespace || xml.getNamespace(), element, context.namespace, xml);
	                    if (entry.lang !== context.lang) {
	                        child.setAttribute('xml:lang', entry.lang);
	                    }
	                    child.children.push(val);
	                    xml.appendChild(child);
	                }
	            }
	        }
	    };
	}
	exports.childAlternateLanguageText = childAlternateLanguageText;
	function multipleChildAlternateLanguageText(namespace, element) {
	    return {
	        importer(xml, context) {
	            const results = [];
	            const langIndex = new Map();
	            let hasResults = false;
	            const children = findAll(xml, namespace || xml.getNamespace(), element);
	            for (const child of children) {
	                const langText = child.getText();
	                if (langText) {
	                    const lang = getLang(child, context.lang);
	                    let langResults = langIndex.get(lang);
	                    if (!langResults) {
	                        langResults = [];
	                        langIndex.set(lang, langResults);
	                        results.push({ lang, value: langResults });
	                    }
	                    langResults.push(langText);
	                    hasResults = true;
	                }
	            }
	            return hasResults ? results : undefined;
	        },
	        exporter(xml, values, context) {
	            for (const entry of values) {
	                for (const val of entry.value) {
	                    const child = createElement(namespace || xml.getNamespace(), element, context.namespace, xml);
	                    if (entry.lang !== context.lang) {
	                        child.setAttribute('xml:lang', entry.lang);
	                    }
	                    child.children.push(val);
	                    xml.appendChild(child);
	                }
	            }
	        }
	    };
	}
	exports.multipleChildAlternateLanguageText = multipleChildAlternateLanguageText;
	function multipleChildEnum(namespace, elements) {
	    const elementNames = new Map();
	    const valueNames = new Map();
	    for (const el of elements) {
	        if (typeof el === 'string') {
	            elementNames.set(el, el);
	            valueNames.set(el, el);
	        }
	        else {
	            elementNames.set(el[1], el[0]);
	            valueNames.set(el[0], el[1]);
	        }
	    }
	    return {
	        importer(xml) {
	            const results = [];
	            for (const child of xml.children) {
	                if (typeof child === 'string') {
	                    continue;
	                }
	                else if (child.getNamespace() === (namespace || xml.getNamespace()) &&
	                    elementNames.has(child.getName())) {
	                    results.push(elementNames.get(child.getName()));
	                }
	            }
	            return results;
	        },
	        exporter(xml, values) {
	            for (const value of values) {
	                findOrCreate(xml, namespace, valueNames.get(value));
	            }
	        }
	    };
	}
	exports.multipleChildEnum = multipleChildEnum;
	function splicePath(namespace, element, path, multiple = false) {
	    return {
	        importer(xml, context) {
	            const child = xml.getChild(element, namespace || xml.getNamespace());
	            if (!child) {
	                return;
	            }
	            const results = [];
	            for (const grandChild of child.children) {
	                if (typeof grandChild === 'string') {
	                    continue;
	                }
	                if (context.registry.getImportKey(grandChild) === path) {
	                    const imported = context.registry.import(grandChild);
	                    if (imported) {
	                        results.push(imported);
	                    }
	                }
	            }
	            return multiple ? results : results[0];
	        },
	        exporter(xml, data, context) {
	            let values = [];
	            if (!Array.isArray(data)) {
	                values = [data];
	            }
	            else {
	                values = data;
	            }
	            const children = [];
	            for (const value of values) {
	                const child = context.registry.export(path, value, {
	                    ...context,
	                    namespace: namespace || xml.getNamespace() || undefined
	                });
	                if (child) {
	                    children.push(child);
	                }
	            }
	            if (children.length) {
	                const skipChild = findOrCreate(xml, namespace || xml.getNamespace(), element);
	                for (const child of children) {
	                    skipChild.appendChild(child);
	                }
	            }
	        }
	    };
	}
	exports.splicePath = splicePath;
	function staticValue(value) {
	    return {
	        exporter: () => undefined,
	        importer: () => value
	    };
	}
	exports.staticValue = staticValue;
	function childRawElement(namespace, element, sanitizer) {
	    return {
	        importer(xml, context) {
	            if (sanitizer && (!context.sanitizers || !context.sanitizers[sanitizer])) {
	                return;
	            }
	            const child = xml.getChild(element, namespace || xml.getNamespace());
	            if (child) {
	                if (sanitizer) {
	                    return context.sanitizers[sanitizer](child.toJSON());
	                }
	                else {
	                    return child.toJSON();
	                }
	            }
	        },
	        exporter(xml, value, context) {
	            if (typeof value === 'string') {
	                const wrapped = (0, Parser_1.parse)(`<${element} xmlns="${namespace || xml.getNamespace()}">${value}</${element}>`);
	                value = wrapped.toJSON();
	            }
	            if (sanitizer) {
	                if (!context.sanitizers || !context.sanitizers[sanitizer]) {
	                    return;
	                }
	                value = context.sanitizers[sanitizer](value);
	            }
	            if (value) {
	                xml.appendChild(new Element_1.default(value.name, value.attributes, value.children));
	            }
	        }
	    };
	}
	exports.childRawElement = childRawElement;
	function childLanguageRawElement(namespace, element, sanitizer) {
	    return {
	        importer(xml, context) {
	            if (sanitizer && (!context.sanitizers || !context.sanitizers[sanitizer])) {
	                return;
	            }
	            const children = findAll(xml, namespace || xml.getNamespace(), element);
	            const targetLanguage = getTargetLang(children, context);
	            for (const child of children) {
	                if (getLang(child, context.lang) === targetLanguage) {
	                    if (sanitizer) {
	                        return context.sanitizers[sanitizer](child.toJSON());
	                    }
	                    else {
	                        return child.toJSON();
	                    }
	                }
	            }
	            if (children[0]) {
	                if (sanitizer) {
	                    return context.sanitizers[sanitizer](children[0].toJSON());
	                }
	                else {
	                    return children[0].toJSON();
	                }
	            }
	        },
	        exporter(xml, value, context) {
	            if (typeof value === 'string') {
	                const wrapped = (0, Parser_1.parse)(`<${element} xmlns="${namespace || xml.getNamespace()}">${value}</${element}>`);
	                value = wrapped.toJSON();
	            }
	            if (value && sanitizer) {
	                if (!context.sanitizers || !context.sanitizers[sanitizer]) {
	                    return;
	                }
	                value = context.sanitizers[sanitizer](value);
	            }
	            if (!value) {
	                return;
	            }
	            const rawElement = findOrCreate(xml, namespace || xml.getNamespace(), element, context.lang);
	            for (const child of value.children) {
	                if (typeof child === 'string') {
	                    rawElement.appendChild(child);
	                }
	                else if (child) {
	                    rawElement.appendChild(new Element_1.default(child.name, child.attributes, child.children));
	                }
	            }
	        }
	    };
	}
	exports.childLanguageRawElement = childLanguageRawElement;
	function childAlternateLanguageRawElement(namespace, element, sanitizer) {
	    return {
	        importer(xml, context) {
	            if (sanitizer && (!context.sanitizers || !context.sanitizers[sanitizer])) {
	                return;
	            }
	            const results = [];
	            const seenLanuages = new Set();
	            const children = findAll(xml, namespace || xml.getNamespace(), element);
	            for (const child of children) {
	                let result = child.toJSON();
	                if (sanitizer) {
	                    result = context.sanitizers[sanitizer](result);
	                }
	                if (result) {
	                    const lang = getLang(child, context.lang);
	                    if (seenLanuages.has(lang)) {
	                        continue;
	                    }
	                    results.push({ lang, value: result });
	                    seenLanuages.add(lang);
	                }
	            }
	            return seenLanuages.size > 0 ? results : undefined;
	        },
	        exporter(xml, values, context) {
	            for (const entry of values) {
	                let value = entry.value;
	                if (typeof value === 'string') {
	                    const wrapped = (0, Parser_1.parse)(`<${element} xmlns="${namespace || xml.getNamespace()}">${value}</${element}>`);
	                    value = wrapped.toJSON();
	                }
	                if (value && sanitizer) {
	                    if (!context.sanitizers || !context.sanitizers[sanitizer]) {
	                        continue;
	                    }
	                    value = context.sanitizers[sanitizer](value);
	                }
	                if (value) {
	                    const rawElement = createElement(namespace || xml.getNamespace(), element, context.namespace, xml);
	                    xml.appendChild(rawElement);
	                    if (entry.lang !== context.lang) {
	                        rawElement.setAttribute('xml:lang', entry.lang);
	                    }
	                    for (const child of value.children) {
	                        if (typeof child === 'string') {
	                            rawElement.appendChild(child);
	                        }
	                        else {
	                            rawElement.appendChild(new Element_1.default(child.name, child.attributes, child.children));
	                        }
	                    }
	                }
	            }
	        }
	    };
	}
	exports.childAlternateLanguageRawElement = childAlternateLanguageRawElement;
	function parameterMap(namespace, element, keyName, valueName) {
	    return {
	        importer(xml, context) {
	            const result = {};
	            const params = findAll(xml, namespace, element);
	            const keyImporter = (0, exports.attribute)(keyName).importer;
	            const valueImporter = (0, exports.attribute)(valueName).importer;
	            for (const param of params) {
	                result[keyImporter(param, context)] = valueImporter(param, context);
	            }
	            return result;
	        },
	        exporter(xml, values, context) {
	            const keyExporter = (0, exports.attribute)(keyName).exporter;
	            const valueExporter = (0, exports.attribute)(valueName).exporter;
	            const ns = namespace || xml.getNamespace();
	            for (const [param, value] of Object.entries(values)) {
	                const paramEl = createElement(ns, element, context.namespace, xml);
	                keyExporter(paramEl, param, context);
	                if (values[param]) {
	                    valueExporter(paramEl, value, context);
	                }
	                xml.appendChild(paramEl);
	            }
	        }
	    };
	}
	exports.parameterMap = parameterMap;
} (Types));

Object.defineProperty(Translator$1, "__esModule", { value: true });
const Types_1$1 = Types;
class Translator {
    constructor() {
        this.parents = new Set();
        this.placeholder = false;
        this.typeField = '';
        this.versionField = '';
        this.defaultType = '';
        this.defaultVersion = '';
        this.languageField = 'lang';
        this.typeValues = new Map();
        this.typeOrders = new Map();
        this.importers = new Map();
        this.exporters = new Map();
        this.children = new Map();
        this.childrenIndex = new Map();
        this.implicitChildren = new Set();
        this.contexts = new Map();
    }
    addChild(name, translator, multiple = false, selector, implicit) {
        const child = {
            multiple: multiple || false,
            name,
            selector,
            translator
        };
        const existingChild = this.children.get(name);
        if (!existingChild) {
            child.translator.parents.add(this);
            this.children.set(name, child);
            for (const [xid] of translator.importers) {
                if (!this.implicitChildren.has(xid)) {
                    this.childrenIndex.set(xid, name);
                }
            }
            if (implicit) {
                this.implicitChildren.add(implicit);
            }
            return;
        }
        const existing = existingChild.translator;
        existingChild.multiple = multiple;
        if (selector && existingChild.selector && selector !== existingChild.selector) {
            existingChild.selector = undefined;
        }
        for (const [xid, importer] of translator.importers) {
            const [type, version] = (existing.typeValues.get(xid) || '').split('__v__');
            existing.updateDefinition({
                contexts: translator.contexts,
                element: importer.element,
                exporterOrdering: new Map(),
                exporters: new Map(),
                importerOrdering: importer.fieldOrders,
                importers: importer.fields,
                namespace: importer.namespace,
                optionalNamespaces: new Map(),
                type,
                version
            });
            if (!this.implicitChildren.has(xid)) {
                this.childrenIndex.set(xid, name);
            }
        }
        for (const [exportType, exporter] of translator.exporters) {
            const [type, version] = exportType.split('__v__');
            existing.updateDefinition({
                contexts: translator.contexts,
                element: exporter.element,
                exporterOrdering: exporter.fieldOrders,
                exporters: exporter.fields,
                importerOrdering: new Map(),
                importers: new Map(),
                namespace: exporter.namespace,
                optionalNamespaces: exporter.optionalNamespaces,
                type,
                version
            });
        }
    }
    addContext(path, selector, field, xid, value, implied) {
        if (selector) {
            path = `${path}[${selector}]`;
        }
        let context = this.contexts.get(path);
        if (!context) {
            context = {
                typeField: '',
                versionField: '',
                typeValues: new Map()
            };
        }
        if (implied) {
            context.impliedType = value;
        }
        context.typeField = field || '';
        context.typeValues.set(xid, value);
        this.contexts.set(path, context);
    }
    getChild(name) {
        const child = this.children.get(name);
        if (!child) {
            return;
        }
        return child.translator;
    }
    getImportKey(xml) {
        return this.childrenIndex.get(`{${xml.getNamespace()}}${xml.getName()}`);
    }
    updateDefinition(opts) {
        const xid = `{${opts.namespace}}${opts.element}`;
        const type = opts.type || this.defaultType;
        const version = opts.version || this.defaultVersion;
        const versionType = version ? `${type}__v__${version}` : type;
        const importer = this.importers.get(xid) ||
            {
                element: opts.element,
                fieldOrders: new Map(),
                fields: new Map(),
                namespace: opts.namespace
            };
        for (const [fieldName, fieldImporter] of opts.importers) {
            importer.fields.set(fieldName, fieldImporter);
        }
        for (const [fieldName, order] of opts.importerOrdering) {
            importer.fieldOrders.set(fieldName, order);
        }
        this.importers.set(xid, importer);
        const exporter = this.exporters.get(versionType) ||
            {
                element: opts.element,
                fieldOrders: new Map(),
                fields: new Map(),
                namespace: opts.namespace,
                optionalNamespaces: opts.optionalNamespaces
            };
        for (const [fieldName, fieldExporter] of opts.exporters) {
            exporter.fields.set(fieldName, fieldExporter);
        }
        for (const [name, order] of opts.exporterOrdering) {
            exporter.fieldOrders.set(name, order);
        }
        for (const [prefix, namespace] of opts.optionalNamespaces) {
            exporter.optionalNamespaces.set(prefix, namespace);
        }
        this.exporters.set(versionType, exporter);
        for (const [path, newContext] of opts.contexts) {
            const context = this.contexts.get(path) || {
                impliedType: undefined,
                typeField: newContext.typeField,
                versionField: newContext.versionField,
                typeValues: new Map()
            };
            if (!context.typeField) {
                context.typeField = newContext.typeField;
            }
            if (!context.versionField) {
                context.versionField = newContext.versionField;
            }
            if (!context.impliedType) {
                context.impliedType = newContext.impliedType;
            }
            for (const [xid2, type] of newContext.typeValues) {
                context.typeValues.set(xid2, type);
            }
            this.contexts.set(path, context);
        }
        if (opts.type) {
            this.typeValues.set(xid, versionType);
            if (opts.typeOrder && opts.type) {
                this.typeOrders.set(opts.type, opts.typeOrder);
            }
        }
        else if (this.typeField && !opts.type) {
            for (const [, imp] of this.importers) {
                for (const [fieldName, fieldImporter] of opts.importers) {
                    imp.fields.set(fieldName, fieldImporter);
                }
                for (const [fieldName, order] of opts.importerOrdering) {
                    imp.fieldOrders.set(fieldName, order);
                }
            }
            for (const [, exp] of this.exporters) {
                for (const [fieldName, fieldExporter] of opts.exporters) {
                    exp.fields.set(fieldName, fieldExporter);
                }
                for (const [fieldName, order] of opts.exporterOrdering) {
                    exp.fieldOrders.set(fieldName, order);
                }
            }
        }
    }
    replaceWith(replacement) {
        for (const [a, b] of this.children) {
            replacement.children.set(a, b);
        }
        for (const [a, b] of this.childrenIndex) {
            replacement.childrenIndex.set(a, b);
        }
        for (const [a, b] of this.contexts) {
            replacement.contexts.set(a, b);
        }
        for (const a of this.implicitChildren) {
            replacement.implicitChildren.add(a);
        }
        for (const parent of this.parents) {
            for (const child of parent.children.values()) {
                if (child.translator === this) {
                    child.translator = replacement;
                }
            }
        }
        this.parents = new Set();
    }
    import(xml, parentContext) {
        const xid = `{${xml.getNamespace()}}${xml.getName()}`;
        const output = {};
        const importer = this.importers.get(xid);
        if (!importer) {
            return;
        }
        const versionTypeValue = this.typeValues.get(xid) || '';
        const [typeValue, versionValue] = versionTypeValue.split('__v__');
        const path = parentContext.path || '';
        let implied;
        if (parentContext.pathSelector) {
            implied = this.contexts.get(`${path}[${parentContext.pathSelector}]`);
        }
        if (!implied) {
            implied = this.contexts.get(path);
        }
        if (implied) {
            if (!implied.impliedType) {
                const impliedTypeValue = implied.typeValues.get(xid) || '';
                if (impliedTypeValue) {
                    output[implied.typeField] = impliedTypeValue;
                }
            }
        }
        else if (this.typeField && typeValue && typeValue !== this.defaultType) {
            output[this.typeField] = typeValue;
        }
        if (this.versionField && versionValue && versionValue !== this.defaultVersion) {
            output[this.versionField] = versionValue;
        }
        const context = {
            ...parentContext,
            data: output,
            importer,
            lang: (xml.getAttribute('xml:lang') || parentContext.lang || '').toLowerCase(),
            pathSelector: typeValue,
            translator: this
        };
        const importFields = [...importer.fieldOrders.entries()].sort((a, b) => a[1] > b[1] ? -1 : a[1] < b[1] ? 1 : 0);
        const preChildren = importFields.filter(field => field[1] >= 0);
        const postChildren = importFields.filter(field => field[1] < 0);
        for (const [fieldName] of preChildren) {
            const importField = importer.fields.get(fieldName);
            context.path = `${parentContext.path}.${fieldName}`;
            const value = importField(xml, context);
            if (value !== null && value !== undefined) {
                output[fieldName] = value;
            }
        }
        for (const child of xml.children) {
            if (typeof child === 'string') {
                continue;
            }
            const childName = `{${child.getNamespace()}}${child.getName()}`;
            const fieldName = this.childrenIndex.get(childName);
            if (!fieldName) {
                continue;
            }
            context.path = `${parentContext.path}.${fieldName}`;
            const { translator, multiple, selector } = this.children.get(fieldName);
            if (!selector || selector === typeValue) {
                const childOutput = translator.import(child, context);
                if (childOutput !== undefined) {
                    if (multiple) {
                        if (!output[fieldName]) {
                            output[fieldName] = [];
                        }
                        output[fieldName].push(childOutput);
                    }
                    else if (!output[fieldName]) {
                        output[fieldName] = childOutput;
                    }
                    else {
                        output[fieldName] = translator.resolveCollision(output[fieldName], childOutput);
                    }
                }
            }
        }
        for (const [fieldName] of postChildren) {
            const importField = importer.fields.get(fieldName);
            context.path = `${parentContext.path}.${fieldName}`;
            const value = importField(xml, context);
            if (value !== null && value !== undefined) {
                output[fieldName] = value;
            }
        }
        return output;
    }
    export(data, parentContext) {
        if (!data) {
            return;
        }
        let exportType = this.defaultType;
        let exportVersion = this.defaultVersion;
        const path = parentContext.path || '';
        let implied;
        if (parentContext.pathSelector) {
            implied = this.contexts.get(`${path}[${parentContext.pathSelector}]`);
        }
        if (!implied) {
            implied = this.contexts.get(path);
        }
        if (implied) {
            exportType = implied.impliedType || data[implied.typeField] || this.defaultType;
        }
        else if (this.typeField) {
            exportType = data[this.typeField] || this.defaultType;
        }
        if (this.versionField) {
            exportVersion = data[this.versionField] || this.defaultVersion;
        }
        const exportVersionType = exportVersion ? `${exportType}__v__${exportVersion}` : exportType;
        const exporter = this.exporters.get(exportVersionType);
        if (!exporter) {
            return;
        }
        const output = (0, Types_1$1.createElement)(exporter.namespace, exporter.element, parentContext.namespace, parentContext.element);
        if (parentContext.element) {
            output.parent = parentContext.element;
        }
        for (const [prefix, namespace] of exporter.optionalNamespaces) {
            output.addOptionalNamespace(prefix, namespace);
        }
        const context = {
            ...parentContext,
            data,
            element: output,
            exporter,
            lang: (data[this.languageField] || parentContext.lang || '').toLowerCase(),
            namespace: output.getDefaultNamespace(),
            pathSelector: exportType,
            translator: this
        };
        const langExporter = exporter.fields.get(this.languageField);
        if (langExporter) {
            langExporter(output, data[this.languageField], parentContext);
        }
        const keys = Object.keys(data);
        keys.sort((key1, key2) => {
            const a = exporter.fieldOrders.get(key1) || 100000;
            const b = exporter.fieldOrders.get(key2) || 100000;
            return a - b;
        });
        for (const key of keys) {
            if (key === this.languageField) {
                // We've already processed this field
                continue;
            }
            const value = data[key];
            const fieldExporter = exporter.fields.get(key);
            if (fieldExporter) {
                fieldExporter(output, value, context);
                continue;
            }
            const childTranslator = this.children.get(key);
            if (!childTranslator) {
                continue;
            }
            context.path = `${parentContext.path ? parentContext.path + '.' : ''}${key}`;
            const { translator, multiple, selector } = childTranslator;
            if (!selector || selector === exportType) {
                let items;
                if (multiple) {
                    items = value !== null && value !== void 0 ? value : [];
                }
                else {
                    items = [value];
                }
                for (const item of items) {
                    const childOutput = translator.export(item, context);
                    if (childOutput) {
                        output.appendChild(childOutput);
                    }
                }
            }
        }
        return output;
    }
    resolveCollision(existingData, newData) {
        const existingOrder = this.typeOrders.get(existingData[this.typeField] || this.defaultType) || 0;
        const newOrder = this.typeOrders.get(newData[this.typeField] || this.defaultType) || 0;
        return existingOrder <= newOrder ? existingData : newData;
    }
}
Translator$1.default = Translator;

Object.defineProperty(Registry$1, "__esModule", { value: true });
const tslib_1$j = require$$0;
const Definitions_1 = Definitions;
const XHTMLIM_1 = (0, tslib_1$j.__importDefault)(XHTMLIM);
const Translator_1 = (0, tslib_1$j.__importDefault)(Translator$1);
class Registry {
    constructor() {
        this.translators = new Map();
        this.root = new Translator_1.default();
        this.setLanguageResolver(Definitions_1.basicLanguageResolver);
    }
    setLanguageResolver(resolver) {
        this.languageResolver = resolver;
    }
    import(xml, context = { registry: this }) {
        if (!this.hasTranslator(xml.getNamespace(), xml.getName())) {
            return;
        }
        if (!context.acceptLanguages) {
            context.acceptLanguages = [];
        }
        context.acceptLanguages = context.acceptLanguages.map(lang => lang.toLowerCase());
        if (context.lang) {
            context.lang = context.lang.toLowerCase();
        }
        if (!context.resolveLanguage) {
            context.resolveLanguage = this.languageResolver;
        }
        context.path = this.getImportKey(xml);
        if (!context.sanitizers) {
            context.sanitizers = {
                xhtmlim: XHTMLIM_1.default
            };
        }
        const translator = this.getOrCreateTranslator(xml.getNamespace(), xml.getName());
        return translator.import(xml, {
            ...context,
            registry: this
        });
    }
    export(path, data, context = { registry: this }) {
        if (!context.acceptLanguages) {
            context.acceptLanguages = [];
        }
        context.acceptLanguages = context.acceptLanguages.map(lang => lang.toLowerCase());
        if (context.lang) {
            context.lang = context.lang.toLowerCase();
        }
        if (!context.sanitizers) {
            context.sanitizers = {
                xhtmlim: XHTMLIM_1.default
            };
        }
        context.path = path;
        const fields = path.split('.').filter(item => {
            return item !== '';
        });
        let translator = this.root;
        for (const field of fields) {
            const nextTranslator = translator.getChild(field);
            if (!nextTranslator) {
                return;
            }
            translator = nextTranslator;
        }
        return translator.export(data, {
            ...context,
            registry: this
        });
    }
    getImportKey(xml, path = '') {
        const root = !path ? this.root : this.walkToTranslator(path.split('.'));
        if (!root) {
            return undefined;
        }
        return root.getImportKey(xml);
    }
    define(defs) {
        if (Array.isArray(defs)) {
            for (const def of defs) {
                if (typeof def === 'object') {
                    this.define(def);
                }
                else {
                    def(this);
                }
            }
            return;
        }
        else if (typeof defs !== 'object') {
            defs(this);
            return;
        }
        const definition = defs;
        definition.aliases = definition.aliases || [];
        if (definition.path && !definition.aliases.includes(definition.path)) {
            definition.aliases.push(definition.path);
        }
        const aliases = definition.aliases
            .map(alias => (typeof alias === 'string' ? { path: alias } : alias))
            .sort((a, b) => {
            const aLen = a.path.split('.').length;
            const bLen = b.path.split('.').length;
            return bLen - aLen;
        });
        let translator;
        if (this.hasTranslator(definition.namespace, definition.element)) {
            // Get existing translator
            translator = this.getOrCreateTranslator(definition.namespace, definition.element);
        }
        if (!translator) {
            let placeholder;
            for (const alias of aliases) {
                const t = this.walkToTranslator(alias.path.split('.'));
                if (t && !t.placeholder) {
                    translator = t;
                    break;
                }
                else if (t) {
                    placeholder = t;
                }
            }
            if (placeholder && !translator) {
                translator = placeholder;
                translator.placeholder = false;
            }
        }
        if (!translator) {
            // Create a new translator
            translator = this.getOrCreateTranslator(definition.namespace, definition.element);
        }
        this.indexTranslator(definition.namespace, definition.element, translator);
        const fields = definition.fields || {};
        const importers = new Map();
        const exporters = new Map();
        const importerOrdering = new Map();
        const exporterOrdering = new Map();
        if (definition.typeField) {
            translator.typeField = definition.typeField;
        }
        if (definition.defaultType) {
            translator.defaultType = definition.defaultType;
        }
        if (definition.versionField) {
            translator.versionField = definition.versionField;
        }
        if (definition.defaultVersion) {
            translator.defaultVersion = definition.defaultVersion;
        }
        if (definition.languageField) {
            translator.languageField = definition.languageField;
        }
        for (const [key, field] of Object.entries(fields)) {
            importers.set(key, field.importer);
            importerOrdering.set(key, field.importOrder || field.order || 0);
            exporters.set(key, field.exporter);
            exporterOrdering.set(key, field.exportOrder || field.order || 0);
        }
        if (definition.childrenExportOrder) {
            for (const [key, order] of Object.entries(definition.childrenExportOrder)) {
                exporterOrdering.set(key, order || 0);
            }
        }
        const optionalNamespaces = new Map();
        for (const [prefix, namespace] of Object.entries(definition.optionalNamespaces || {})) {
            optionalNamespaces.set(prefix, namespace);
        }
        translator.updateDefinition({
            contexts: new Map(),
            element: definition.element,
            exporterOrdering,
            exporters,
            importerOrdering,
            importers,
            namespace: definition.namespace,
            optionalNamespaces,
            type: definition.type,
            version: definition.version,
            typeOrder: definition.typeOrder
        });
        for (const link of aliases) {
            this.alias(definition.namespace, definition.element, link.path, link.multiple, link.selector, link.contextField, definition.type, link.impliedType);
        }
        for (const alias of aliases) {
            const existing = this.walkToTranslator(alias.path.split('.'));
            if (existing && existing !== translator) {
                existing.replaceWith(translator);
            }
        }
    }
    alias(namespace, element, path, multiple = false, selector, contextField, contextType, contextImpliedType = false) {
        const linkedTranslator = this.getOrCreateTranslator(namespace, element);
        linkedTranslator.placeholder = false;
        const keys = path.split('.').filter(key => {
            return key !== '';
        });
        const finalKey = keys.pop();
        const translator = this.walkToTranslator(keys, true);
        const xid = `{${namespace}}${element}`;
        if (contextType && (contextField || contextImpliedType)) {
            linkedTranslator.addContext(path, selector, contextField, xid, contextType, contextImpliedType);
        }
        translator.addChild(finalKey, linkedTranslator, multiple, selector, xid);
    }
    walkToTranslator(path, vivify = false) {
        let translator = this.root;
        for (const key of path) {
            let next = translator.getChild(key);
            if (!next) {
                if (vivify) {
                    next = new Translator_1.default();
                    next.placeholder = true;
                    translator.addChild(key, next);
                }
                else {
                    return;
                }
            }
            translator = next;
        }
        return translator;
    }
    hasTranslator(namespace, element) {
        return this.translators.has(`{${namespace}}${element}`);
    }
    getOrCreateTranslator(namespace, element) {
        let translator = this.translators.get(`{${namespace}}${element}`);
        if (!translator) {
            translator = new Translator_1.default();
            this.indexTranslator(namespace, element, translator);
        }
        return translator;
    }
    indexTranslator(namespace, element, translator) {
        this.translators.set(`{${namespace}}${element}`, translator);
    }
}
Registry$1.default = Registry;

var Helpers = {};

Object.defineProperty(Helpers, "__esModule", { value: true });
Helpers.pubsubItemContentAliases = Helpers.extendStanzaError = Helpers.extendStreamFeatures = Helpers.extendIQ = Helpers.extendPresence = Helpers.extendMessage = Helpers.addAlias = Helpers.childJID = Helpers.childJIDAttribute = Helpers.JIDAttribute = void 0;
const Namespaces_1$1z = Namespaces;
const Types_1 = Types;
// ====================================================================
// Useful XMPP Aliases
// ====================================================================
Helpers.JIDAttribute = Types_1.attribute;
Helpers.childJIDAttribute = Types_1.childAttribute;
Helpers.childJID = Types_1.childText;
// ====================================================================
// XMPP Definition Shortcuts
// ====================================================================
function addAlias(namespace, element, aliases) {
    return {
        aliases: Array.isArray(aliases) ? aliases : [aliases],
        element,
        fields: {},
        namespace
    };
}
Helpers.addAlias = addAlias;
function extendMessage(fields) {
    return { element: 'message', fields, namespace: Namespaces_1$1z.NS_CLIENT };
}
Helpers.extendMessage = extendMessage;
function extendPresence(fields) {
    return { element: 'presence', fields, namespace: Namespaces_1$1z.NS_CLIENT };
}
Helpers.extendPresence = extendPresence;
function extendIQ(fields) {
    return { element: 'iq', fields, namespace: Namespaces_1$1z.NS_CLIENT };
}
Helpers.extendIQ = extendIQ;
function extendStreamFeatures(fields) {
    return {
        element: 'features',
        fields,
        namespace: Namespaces_1$1z.NS_STREAM
    };
}
Helpers.extendStreamFeatures = extendStreamFeatures;
function extendStanzaError(fields) {
    return {
        element: 'error',
        fields,
        namespace: Namespaces_1$1z.NS_STANZAS,
        path: 'stanzaError'
    };
}
Helpers.extendStanzaError = extendStanzaError;
function pubsubItemContentAliases() {
    return [
        { path: 'pubsubcontent', contextField: 'itemType' },
        { path: 'pubsubitem.content', contextField: 'itemType' },
        { path: 'pubsubeventitem.content', contextField: 'itemType' },
        { path: 'iq.pubsub.publish.items', contextField: 'itemType' }
    ];
}
Helpers.pubsubItemContentAliases = pubsubItemContentAliases;

var StreamParser$1 = {};

/**
 * This file is derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from: ltx, Copyright © 2010 Stephan Maka
 */
Object.defineProperty(StreamParser$1, "__esModule", { value: true });
const tslib_1$i = require$$0;
const platform_1$8 = browser;
const Element_1 = (0, tslib_1$i.__importDefault)(Element);
const Error_1 = (0, tslib_1$i.__importDefault)(_Error);
const Parser_1 = (0, tslib_1$i.__importDefault)(Parser$1);
class StreamParser extends platform_1$8.Transform {
    constructor(opts) {
        super({ objectMode: true });
        this.closedStream = false;
        this.wrappedStream = false;
        this.registry = opts.registry;
        this.acceptLanguages = opts.acceptLanguages || [];
        if (opts.wrappedStream) {
            this.wrappedStream = true;
            this.rootImportKey = opts.rootKey;
        }
        this.parser = new Parser_1.default({
            allowComments: opts.allowComments
        });
        this.parser.on('error', err => {
            this.destroy(err);
        });
        this.parser.on('startElement', (name, attributes) => {
            if (this.destroyed) {
                return;
            }
            if (this.closedStream) {
                return this.destroy(Error_1.default.alreadyClosed());
            }
            const el = new Element_1.default(name, attributes);
            const key = this.registry.getImportKey(el);
            if (this.wrappedStream && !this.rootElement) {
                if (this.rootImportKey && key !== this.rootImportKey) {
                    return this.destroy(Error_1.default.unknownRoot());
                }
                const root = this.registry.import(el, {
                    acceptLanguages: this.acceptLanguages,
                    lang: this.lang
                });
                if (root) {
                    this.rootElement = el;
                    this.push({
                        event: 'stream-start',
                        kind: key,
                        stanza: root,
                        xml: el
                    });
                    return;
                }
                else {
                    return this.destroy(Error_1.default.notWellFormed());
                }
            }
            if (!this.currentElement) {
                this.currentElement = el;
            }
            else {
                this.currentElement = this.currentElement.appendChild(el);
            }
        });
        this.parser.on('endElement', (name) => {
            if (this.destroyed) {
                return;
            }
            if (this.wrappedStream && !this.currentElement) {
                if (!this.rootElement || name !== this.rootElement.name) {
                    this.closedStream = true;
                    return this.destroy(Error_1.default.notWellFormed());
                }
                this.closedStream = true;
                this.push({
                    event: 'stream-end',
                    kind: this.rootImportKey,
                    stanza: {},
                    xml: this.rootElement
                });
                return this.end();
            }
            if (!this.currentElement || name !== this.currentElement.name) {
                this.closedStream = true;
                return this.destroy(Error_1.default.notWellFormed());
            }
            if (this.currentElement.parent) {
                this.currentElement = this.currentElement.parent;
            }
            else {
                if (this.wrappedStream) {
                    this.currentElement.parent = this.rootElement;
                }
                const key = this.registry.getImportKey(this.currentElement);
                const stanza = this.registry.import(this.currentElement, {
                    acceptLanguages: this.acceptLanguages,
                    lang: this.lang
                });
                if (stanza) {
                    this.push({
                        kind: key,
                        stanza,
                        xml: this.currentElement
                    });
                }
                this.currentElement = undefined;
            }
        });
        this.parser.on('text', (text) => {
            if (this.currentElement) {
                this.currentElement.children.push(text);
            }
        });
    }
    _transform(chunk, encoding, done) {
        this.parser.write(chunk.toString());
        done();
    }
}
StreamParser$1.default = StreamParser;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.define = exports.XMLElement = exports.Translator = exports.Registry = exports.StreamParser = exports.parse = exports.Parser = void 0;
	const tslib_1 = require$$0;
	const Element_1 = (0, tslib_1.__importDefault)(Element);
	exports.XMLElement = Element_1.default;
	const Registry_1 = (0, tslib_1.__importDefault)(Registry$1);
	exports.Registry = Registry_1.default;
	const Translator_1 = (0, tslib_1.__importDefault)(Translator$1);
	exports.Translator = Translator_1.default;
	(0, tslib_1.__exportStar)(Definitions, exports);
	(0, tslib_1.__exportStar)(Types, exports);
	(0, tslib_1.__exportStar)(Helpers, exports);
	var Parser_1 = Parser$1;
	Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return (0, tslib_1.__importDefault)(Parser_1).default; } });
	Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return Parser_1.parse; } });
	var StreamParser_1 = StreamParser$1;
	Object.defineProperty(exports, "StreamParser", { enumerable: true, get: function () { return (0, tslib_1.__importDefault)(StreamParser_1).default; } });
	function define(definitions) {
	    return (registry) => {
	        registry.define(definitions);
	    };
	}
	exports.define = define;
} (jxt));

const NS_JINGLE_SIGNALING = 'urn:xmpp:jingle-message:0';
const proposeDefinition = {
    aliases: ['message.propose'],
    element: 'propose',
    fields: {
        conversationId: jxt.attribute('inin-cid'),
        persistentConversationId: jxt.attribute('inin-persistent-cid'),
        sdpOverXmpp: jxt.booleanAttribute('inin-sdp-over-xmpp'),
        privAnswerMode: jxt.attribute('inin-priv-answer-mode'),
        originalRoomJid: jxt.attribute('inin-ofrom'),
        autoAnswer: jxt.booleanAttribute('inin-autoanswer'),
        fromUserId: jxt.attribute('inin-user-id'),
        sessionId: jxt.attribute('id'),
        meetingId: jxt.attribute('inin-meeting-id')
    },
    namespace: NS_JINGLE_SIGNALING
};
const proceedDefinition = {
    aliases: ['message.proceed'],
    element: 'proceed',
    fields: {
        sessionId: jxt.attribute('id')
    },
    namespace: NS_JINGLE_SIGNALING
};
const sessionAcceptedDefinition = {
    aliases: ['message.accept'],
    element: 'accept',
    fields: {
        sessionId: jxt.attribute('id')
    },
    namespace: NS_JINGLE_SIGNALING
};
const sessionRejectedDefinition = {
    aliases: ['message.reject'],
    element: 'reject',
    fields: {
        sessionId: jxt.attribute('id')
    },
    namespace: NS_JINGLE_SIGNALING
};
const sessionRetractedDefinition = {
    aliases: ['message.retract'],
    element: 'retract',
    fields: {
        sessionId: jxt.attribute('id')
    },
    namespace: NS_JINGLE_SIGNALING
};
const screenStartDefinition = {
    aliases: ['iq.jingle.screenstart'],
    element: 'screen-start',
    namespace: Namespaces.NS_JINGLE_RTP_INFO_1
};
const screenStopDefinition = {
    aliases: ['iq.jingle.screenstop'],
    element: 'screen-stop',
    namespace: Namespaces.NS_JINGLE_RTP_INFO_1
};
// this allows parsing xml that looks something like this:
/*
  <iq xmlns="jabber:client" [other stuff]>
    <genesys-webrtc xmlns="genesys">{ "id": "whatver", "anyOtherFieldICareAbout": true }</genesys-webrtc>
  </iq>
*/
const genesysWebrtc = {
    path: 'iq',
    namespace: Namespaces.NS_CLIENT,
    element: 'iq',
    fields: {
        genesysWebrtc: jxt.childJSON('genesys', 'genesys-webrtc')
    }
};
const mediaMessage = {
    path: 'message',
    namespace: Namespaces.NS_CLIENT,
    element: 'message',
    fields: {
        mediaMessage: jxt.childJSON('genesys', 'media-message')
    }
};
const upgradeMediaPresenceDefinition = {
    aliases: ['presence.media'],
    element: 'x',
    fields: {
        conversationId: jxt.attribute('conversationId'),
        sourceCommunicationId: jxt.attribute('sourceCommunicationId'),
        screenShare: jxt.childAttribute(null, 'mediastream', 'screenShare'),
        video: jxt.childAttribute(null, 'mediastream', 'video'),
        audio: jxt.childAttribute(null, 'mediastream', 'audio'),
        listener: jxt.childAttribute(null, 'mediastream', 'listener'),
        screenRecording: jxt.childAttribute(null, 'mediastream', 'screenRecording')
    },
    namespace: 'orgspan:mediastream'
};
const definitions = [
    proposeDefinition,
    proceedDefinition,
    sessionAcceptedDefinition,
    sessionRejectedDefinition,
    sessionRetractedDefinition,
    screenStartDefinition,
    screenStopDefinition,
    upgradeMediaPresenceDefinition,
    genesysWebrtc,
    mediaMessage
];

function isGetStatsEvent(event) {
    return event.name === 'getStats';
}
function prepGetStatsEvent(event) {
    let details = {};
    Object.assign(details, deepFlatten(event.tracks, 'localTrack'));
    delete event.tracks;
    Object.assign(details, deepFlatten(event.remoteTracks, `remoteTrack`));
    delete event.remoteTracks;
    return details;
}
function formatStatsEvent(event, extraDetails = {}) {
    const details = Object.assign({ _eventType: event.name, _eventTimestamp: new Date().getTime() }, extraDetails);
    // anything that needs to be renamed or massaged
    if (isGetStatsEvent(event)) {
        Object.assign(details, prepGetStatsEvent(event));
    }
    // general case
    Object.assign(details, deepFlatten(event));
    delete details.name;
    const formattedEvent = {
        actionName: 'WebrtcStats',
        details,
    };
    return formattedEvent;
}
function deepFlatten(obj, prefix = '') {
    const flatObj = {};
    if (Array.isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
            Object.assign(flatObj, deepFlatten(obj[i], `${prefix}_[${i}]`));
        }
    }
    else if (typeof obj !== 'object') {
        flatObj[prefix] = obj;
    }
    else {
        Object.keys(obj)
            /* don't send IP addresses to NR */
            .filter(key => key.toLowerCase() !== 'ip')
            .forEach((key) => {
            const val = obj[key];
            const nextPrefix = prefix ? `${prefix}_${key}` : key;
            if (typeof val !== 'object' && !Array.isArray(val)) {
                flatObj[nextPrefix] = val;
            }
            else {
                Object.assign(flatObj, deepFlatten(val, nextPrefix));
            }
        });
    }
    return flatObj;
}

var SessionTypes;
(function (SessionTypes) {
    SessionTypes["softphone"] = "softphone";
    SessionTypes["collaborateVideo"] = "collaborateVideo";
    SessionTypes["acdScreenShare"] = "screenShare";
    SessionTypes["screenRecording"] = "screenRecording";
    SessionTypes["unknown"] = "unknown";
})(SessionTypes || (SessionTypes = {}));

var jingle$1 = {};

var FileTransferSession$1 = {};

var ICESession$1 = {};

var sdp = {exports: {}};

/* eslint-env node */

(function (module) {

	// SDP helpers.
	const SDPUtils = {};

	// Generate an alphanumeric identifier for cname or mids.
	// TODO: use UUIDs instead? https://gist.github.com/jed/982883
	SDPUtils.generateIdentifier = function() {
	  return Math.random().toString(36).substring(2, 12);
	};

	// The RTCP CNAME used by all peerconnections from the same JS.
	SDPUtils.localCName = SDPUtils.generateIdentifier();

	// Splits SDP into lines, dealing with both CRLF and LF.
	SDPUtils.splitLines = function(blob) {
	  return blob.trim().split('\n').map(line => line.trim());
	};
	// Splits SDP into sessionpart and mediasections. Ensures CRLF.
	SDPUtils.splitSections = function(blob) {
	  const parts = blob.split('\nm=');
	  return parts.map((part, index) => (index > 0 ?
	    'm=' + part : part).trim() + '\r\n');
	};

	// Returns the session description.
	SDPUtils.getDescription = function(blob) {
	  const sections = SDPUtils.splitSections(blob);
	  return sections && sections[0];
	};

	// Returns the individual media sections.
	SDPUtils.getMediaSections = function(blob) {
	  const sections = SDPUtils.splitSections(blob);
	  sections.shift();
	  return sections;
	};

	// Returns lines that start with a certain prefix.
	SDPUtils.matchPrefix = function(blob, prefix) {
	  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
	};

	// Parses an ICE candidate line. Sample input:
	// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
	// rport 55996"
	// Input can be prefixed with a=.
	SDPUtils.parseCandidate = function(line) {
	  let parts;
	  // Parse both variants.
	  if (line.indexOf('a=candidate:') === 0) {
	    parts = line.substring(12).split(' ');
	  } else {
	    parts = line.substring(10).split(' ');
	  }

	  const candidate = {
	    foundation: parts[0],
	    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
	    protocol: parts[2].toLowerCase(),
	    priority: parseInt(parts[3], 10),
	    ip: parts[4],
	    address: parts[4], // address is an alias for ip.
	    port: parseInt(parts[5], 10),
	    // skip parts[6] == 'typ'
	    type: parts[7],
	  };

	  for (let i = 8; i < parts.length; i += 2) {
	    switch (parts[i]) {
	      case 'raddr':
	        candidate.relatedAddress = parts[i + 1];
	        break;
	      case 'rport':
	        candidate.relatedPort = parseInt(parts[i + 1], 10);
	        break;
	      case 'tcptype':
	        candidate.tcpType = parts[i + 1];
	        break;
	      case 'ufrag':
	        candidate.ufrag = parts[i + 1]; // for backward compatibility.
	        candidate.usernameFragment = parts[i + 1];
	        break;
	      default: // extension handling, in particular ufrag. Don't overwrite.
	        if (candidate[parts[i]] === undefined) {
	          candidate[parts[i]] = parts[i + 1];
	        }
	        break;
	    }
	  }
	  return candidate;
	};

	// Translates a candidate object into SDP candidate attribute.
	// This does not include the a= prefix!
	SDPUtils.writeCandidate = function(candidate) {
	  const sdp = [];
	  sdp.push(candidate.foundation);

	  const component = candidate.component;
	  if (component === 'rtp') {
	    sdp.push(1);
	  } else if (component === 'rtcp') {
	    sdp.push(2);
	  } else {
	    sdp.push(component);
	  }
	  sdp.push(candidate.protocol.toUpperCase());
	  sdp.push(candidate.priority);
	  sdp.push(candidate.address || candidate.ip);
	  sdp.push(candidate.port);

	  const type = candidate.type;
	  sdp.push('typ');
	  sdp.push(type);
	  if (type !== 'host' && candidate.relatedAddress &&
	      candidate.relatedPort) {
	    sdp.push('raddr');
	    sdp.push(candidate.relatedAddress);
	    sdp.push('rport');
	    sdp.push(candidate.relatedPort);
	  }
	  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
	    sdp.push('tcptype');
	    sdp.push(candidate.tcpType);
	  }
	  if (candidate.usernameFragment || candidate.ufrag) {
	    sdp.push('ufrag');
	    sdp.push(candidate.usernameFragment || candidate.ufrag);
	  }
	  return 'candidate:' + sdp.join(' ');
	};

	// Parses an ice-options line, returns an array of option tags.
	// Sample input:
	// a=ice-options:foo bar
	SDPUtils.parseIceOptions = function(line) {
	  return line.substring(14).split(' ');
	};

	// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
	// a=rtpmap:111 opus/48000/2
	SDPUtils.parseRtpMap = function(line) {
	  let parts = line.substring(9).split(' ');
	  const parsed = {
	    payloadType: parseInt(parts.shift(), 10), // was: id
	  };

	  parts = parts[0].split('/');

	  parsed.name = parts[0];
	  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
	  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
	  // legacy alias, got renamed back to channels in ORTC.
	  parsed.numChannels = parsed.channels;
	  return parsed;
	};

	// Generates a rtpmap line from RTCRtpCodecCapability or
	// RTCRtpCodecParameters.
	SDPUtils.writeRtpMap = function(codec) {
	  let pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  const channels = codec.channels || codec.numChannels || 1;
	  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
	      (channels !== 1 ? '/' + channels : '') + '\r\n';
	};

	// Parses a extmap line (headerextension from RFC 5285). Sample input:
	// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
	// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
	SDPUtils.parseExtmap = function(line) {
	  const parts = line.substring(9).split(' ');
	  return {
	    id: parseInt(parts[0], 10),
	    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
	    uri: parts[1],
	    attributes: parts.slice(2).join(' '),
	  };
	};

	// Generates an extmap line from RTCRtpHeaderExtensionParameters or
	// RTCRtpHeaderExtension.
	SDPUtils.writeExtmap = function(headerExtension) {
	  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
	      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
	        ? '/' + headerExtension.direction
	        : '') +
	      ' ' + headerExtension.uri +
	      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +
	      '\r\n';
	};

	// Parses a fmtp line, returns dictionary. Sample input:
	// a=fmtp:96 vbr=on;cng=on
	// Also deals with vbr=on; cng=on
	SDPUtils.parseFmtp = function(line) {
	  const parsed = {};
	  let kv;
	  const parts = line.substring(line.indexOf(' ') + 1).split(';');
	  for (let j = 0; j < parts.length; j++) {
	    kv = parts[j].trim().split('=');
	    parsed[kv[0].trim()] = kv[1];
	  }
	  return parsed;
	};

	// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
	SDPUtils.writeFmtp = function(codec) {
	  let line = '';
	  let pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  if (codec.parameters && Object.keys(codec.parameters).length) {
	    const params = [];
	    Object.keys(codec.parameters).forEach(param => {
	      if (codec.parameters[param] !== undefined) {
	        params.push(param + '=' + codec.parameters[param]);
	      } else {
	        params.push(param);
	      }
	    });
	    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
	  }
	  return line;
	};

	// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
	// a=rtcp-fb:98 nack rpsi
	SDPUtils.parseRtcpFb = function(line) {
	  const parts = line.substring(line.indexOf(' ') + 1).split(' ');
	  return {
	    type: parts.shift(),
	    parameter: parts.join(' '),
	  };
	};

	// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
	SDPUtils.writeRtcpFb = function(codec) {
	  let lines = '';
	  let pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
	    // FIXME: special handling for trr-int?
	    codec.rtcpFeedback.forEach(fb => {
	      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
	      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
	          '\r\n';
	    });
	  }
	  return lines;
	};

	// Parses a RFC 5576 ssrc media attribute. Sample input:
	// a=ssrc:3735928559 cname:something
	SDPUtils.parseSsrcMedia = function(line) {
	  const sp = line.indexOf(' ');
	  const parts = {
	    ssrc: parseInt(line.substring(7, sp), 10),
	  };
	  const colon = line.indexOf(':', sp);
	  if (colon > -1) {
	    parts.attribute = line.substring(sp + 1, colon);
	    parts.value = line.substring(colon + 1);
	  } else {
	    parts.attribute = line.substring(sp + 1);
	  }
	  return parts;
	};

	// Parse a ssrc-group line (see RFC 5576). Sample input:
	// a=ssrc-group:semantics 12 34
	SDPUtils.parseSsrcGroup = function(line) {
	  const parts = line.substring(13).split(' ');
	  return {
	    semantics: parts.shift(),
	    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
	  };
	};

	// Extracts the MID (RFC 5888) from a media section.
	// Returns the MID or undefined if no mid line was found.
	SDPUtils.getMid = function(mediaSection) {
	  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
	  if (mid) {
	    return mid.substring(6);
	  }
	};

	// Parses a fingerprint line for DTLS-SRTP.
	SDPUtils.parseFingerprint = function(line) {
	  const parts = line.substring(14).split(' ');
	  return {
	    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
	    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
	  };
	};

	// Extracts DTLS parameters from SDP media section or sessionpart.
	// FIXME: for consistency with other functions this should only
	//   get the fingerprint line as input. See also getIceParameters.
	SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
	  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
	    'a=fingerprint:');
	  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
	  return {
	    role: 'auto',
	    fingerprints: lines.map(SDPUtils.parseFingerprint),
	  };
	};

	// Serializes DTLS parameters to SDP.
	SDPUtils.writeDtlsParameters = function(params, setupType) {
	  let sdp = 'a=setup:' + setupType + '\r\n';
	  params.fingerprints.forEach(fp => {
	    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
	  });
	  return sdp;
	};

	// Parses a=crypto lines into
	//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
	SDPUtils.parseCryptoLine = function(line) {
	  const parts = line.substring(9).split(' ');
	  return {
	    tag: parseInt(parts[0], 10),
	    cryptoSuite: parts[1],
	    keyParams: parts[2],
	    sessionParams: parts.slice(3),
	  };
	};

	SDPUtils.writeCryptoLine = function(parameters) {
	  return 'a=crypto:' + parameters.tag + ' ' +
	    parameters.cryptoSuite + ' ' +
	    (typeof parameters.keyParams === 'object'
	      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
	      : parameters.keyParams) +
	    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
	    '\r\n';
	};

	// Parses the crypto key parameters into
	//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
	SDPUtils.parseCryptoKeyParams = function(keyParams) {
	  if (keyParams.indexOf('inline:') !== 0) {
	    return null;
	  }
	  const parts = keyParams.substring(7).split('|');
	  return {
	    keyMethod: 'inline',
	    keySalt: parts[0],
	    lifeTime: parts[1],
	    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
	    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
	  };
	};

	SDPUtils.writeCryptoKeyParams = function(keyParams) {
	  return keyParams.keyMethod + ':'
	    + keyParams.keySalt +
	    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
	    (keyParams.mkiValue && keyParams.mkiLength
	      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
	      : '');
	};

	// Extracts all SDES parameters.
	SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
	  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
	    'a=crypto:');
	  return lines.map(SDPUtils.parseCryptoLine);
	};

	// Parses ICE information from SDP media section or sessionpart.
	// FIXME: for consistency with other functions this should only
	//   get the ice-ufrag and ice-pwd lines as input.
	SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
	  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
	    'a=ice-ufrag:')[0];
	  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
	    'a=ice-pwd:')[0];
	  if (!(ufrag && pwd)) {
	    return null;
	  }
	  return {
	    usernameFragment: ufrag.substring(12),
	    password: pwd.substring(10),
	  };
	};

	// Serializes ICE parameters to SDP.
	SDPUtils.writeIceParameters = function(params) {
	  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
	      'a=ice-pwd:' + params.password + '\r\n';
	  if (params.iceLite) {
	    sdp += 'a=ice-lite\r\n';
	  }
	  return sdp;
	};

	// Parses the SDP media section and returns RTCRtpParameters.
	SDPUtils.parseRtpParameters = function(mediaSection) {
	  const description = {
	    codecs: [],
	    headerExtensions: [],
	    fecMechanisms: [],
	    rtcp: [],
	  };
	  const lines = SDPUtils.splitLines(mediaSection);
	  const mline = lines[0].split(' ');
	  description.profile = mline[2];
	  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
	    const pt = mline[i];
	    const rtpmapline = SDPUtils.matchPrefix(
	      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
	    if (rtpmapline) {
	      const codec = SDPUtils.parseRtpMap(rtpmapline);
	      const fmtps = SDPUtils.matchPrefix(
	        mediaSection, 'a=fmtp:' + pt + ' ');
	      // Only the first a=fmtp:<pt> is considered.
	      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
	      codec.rtcpFeedback = SDPUtils.matchPrefix(
	        mediaSection, 'a=rtcp-fb:' + pt + ' ')
	        .map(SDPUtils.parseRtcpFb);
	      description.codecs.push(codec);
	      // parse FEC mechanisms from rtpmap lines.
	      switch (codec.name.toUpperCase()) {
	        case 'RED':
	        case 'ULPFEC':
	          description.fecMechanisms.push(codec.name.toUpperCase());
	          break;
	      }
	    }
	  }
	  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
	    description.headerExtensions.push(SDPUtils.parseExtmap(line));
	  });
	  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')
	    .map(SDPUtils.parseRtcpFb);
	  description.codecs.forEach(codec => {
	    wildcardRtcpFb.forEach(fb=> {
	      const duplicate = codec.rtcpFeedback.find(existingFeedback => {
	        return existingFeedback.type === fb.type &&
	          existingFeedback.parameter === fb.parameter;
	      });
	      if (!duplicate) {
	        codec.rtcpFeedback.push(fb);
	      }
	    });
	  });
	  // FIXME: parse rtcp.
	  return description;
	};

	// Generates parts of the SDP media section describing the capabilities /
	// parameters.
	SDPUtils.writeRtpDescription = function(kind, caps) {
	  let sdp = '';

	  // Build the mline.
	  sdp += 'm=' + kind + ' ';
	  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
	  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';
	  sdp += caps.codecs.map(codec => {
	    if (codec.preferredPayloadType !== undefined) {
	      return codec.preferredPayloadType;
	    }
	    return codec.payloadType;
	  }).join(' ') + '\r\n';

	  sdp += 'c=IN IP4 0.0.0.0\r\n';
	  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

	  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
	  caps.codecs.forEach(codec => {
	    sdp += SDPUtils.writeRtpMap(codec);
	    sdp += SDPUtils.writeFmtp(codec);
	    sdp += SDPUtils.writeRtcpFb(codec);
	  });
	  let maxptime = 0;
	  caps.codecs.forEach(codec => {
	    if (codec.maxptime > maxptime) {
	      maxptime = codec.maxptime;
	    }
	  });
	  if (maxptime > 0) {
	    sdp += 'a=maxptime:' + maxptime + '\r\n';
	  }

	  if (caps.headerExtensions) {
	    caps.headerExtensions.forEach(extension => {
	      sdp += SDPUtils.writeExtmap(extension);
	    });
	  }
	  // FIXME: write fecMechanisms.
	  return sdp;
	};

	// Parses the SDP media section and returns an array of
	// RTCRtpEncodingParameters.
	SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
	  const encodingParameters = [];
	  const description = SDPUtils.parseRtpParameters(mediaSection);
	  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
	  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

	  // filter a=ssrc:... cname:, ignore PlanB-msid
	  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	    .map(line => SDPUtils.parseSsrcMedia(line))
	    .filter(parts => parts.attribute === 'cname');
	  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
	  let secondarySsrc;

	  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
	    .map(line => {
	      const parts = line.substring(17).split(' ');
	      return parts.map(part => parseInt(part, 10));
	    });
	  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
	    secondarySsrc = flows[0][1];
	  }

	  description.codecs.forEach(codec => {
	    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
	      let encParam = {
	        ssrc: primarySsrc,
	        codecPayloadType: parseInt(codec.parameters.apt, 10),
	      };
	      if (primarySsrc && secondarySsrc) {
	        encParam.rtx = {ssrc: secondarySsrc};
	      }
	      encodingParameters.push(encParam);
	      if (hasRed) {
	        encParam = JSON.parse(JSON.stringify(encParam));
	        encParam.fec = {
	          ssrc: primarySsrc,
	          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
	        };
	        encodingParameters.push(encParam);
	      }
	    }
	  });
	  if (encodingParameters.length === 0 && primarySsrc) {
	    encodingParameters.push({
	      ssrc: primarySsrc,
	    });
	  }

	  // we support both b=AS and b=TIAS but interpret AS as TIAS.
	  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
	  if (bandwidth.length) {
	    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
	      bandwidth = parseInt(bandwidth[0].substring(7), 10);
	    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
	      // use formula from JSEP to convert b=AS to TIAS value.
	      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95
	          - (50 * 40 * 8);
	    } else {
	      bandwidth = undefined;
	    }
	    encodingParameters.forEach(params => {
	      params.maxBitrate = bandwidth;
	    });
	  }
	  return encodingParameters;
	};

	// parses http://draft.ortc.org/#rtcrtcpparameters*
	SDPUtils.parseRtcpParameters = function(mediaSection) {
	  const rtcpParameters = {};

	  // Gets the first SSRC. Note that with RTX there might be multiple
	  // SSRCs.
	  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	    .map(line => SDPUtils.parseSsrcMedia(line))
	    .filter(obj => obj.attribute === 'cname')[0];
	  if (remoteSsrc) {
	    rtcpParameters.cname = remoteSsrc.value;
	    rtcpParameters.ssrc = remoteSsrc.ssrc;
	  }

	  // Edge uses the compound attribute instead of reducedSize
	  // compound is !reducedSize
	  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
	  rtcpParameters.reducedSize = rsize.length > 0;
	  rtcpParameters.compound = rsize.length === 0;

	  // parses the rtcp-mux attrіbute.
	  // Note that Edge does not support unmuxed RTCP.
	  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
	  rtcpParameters.mux = mux.length > 0;

	  return rtcpParameters;
	};

	SDPUtils.writeRtcpParameters = function(rtcpParameters) {
	  let sdp = '';
	  if (rtcpParameters.reducedSize) {
	    sdp += 'a=rtcp-rsize\r\n';
	  }
	  if (rtcpParameters.mux) {
	    sdp += 'a=rtcp-mux\r\n';
	  }
	  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
	    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
	      ' cname:' + rtcpParameters.cname + '\r\n';
	  }
	  return sdp;
	};


	// parses either a=msid: or a=ssrc:... msid lines and returns
	// the id of the MediaStream and MediaStreamTrack.
	SDPUtils.parseMsid = function(mediaSection) {
	  let parts;
	  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
	  if (spec.length === 1) {
	    parts = spec[0].substring(7).split(' ');
	    return {stream: parts[0], track: parts[1]};
	  }
	  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	    .map(line => SDPUtils.parseSsrcMedia(line))
	    .filter(msidParts => msidParts.attribute === 'msid');
	  if (planB.length > 0) {
	    parts = planB[0].value.split(' ');
	    return {stream: parts[0], track: parts[1]};
	  }
	};

	// SCTP
	// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
	// to draft-ietf-mmusic-sctp-sdp-05
	SDPUtils.parseSctpDescription = function(mediaSection) {
	  const mline = SDPUtils.parseMLine(mediaSection);
	  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
	  let maxMessageSize;
	  if (maxSizeLine.length > 0) {
	    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
	  }
	  if (isNaN(maxMessageSize)) {
	    maxMessageSize = 65536;
	  }
	  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
	  if (sctpPort.length > 0) {
	    return {
	      port: parseInt(sctpPort[0].substring(12), 10),
	      protocol: mline.fmt,
	      maxMessageSize,
	    };
	  }
	  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
	  if (sctpMapLines.length > 0) {
	    const parts = sctpMapLines[0]
	      .substring(10)
	      .split(' ');
	    return {
	      port: parseInt(parts[0], 10),
	      protocol: parts[1],
	      maxMessageSize,
	    };
	  }
	};

	// SCTP
	// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
	// support by now receiving in this format, unless we originally parsed
	// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
	// protocol of DTLS/SCTP -- without UDP/ or TCP/)
	SDPUtils.writeSctpDescription = function(media, sctp) {
	  let output = [];
	  if (media.protocol !== 'DTLS/SCTP') {
	    output = [
	      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
	      'c=IN IP4 0.0.0.0\r\n',
	      'a=sctp-port:' + sctp.port + '\r\n',
	    ];
	  } else {
	    output = [
	      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
	      'c=IN IP4 0.0.0.0\r\n',
	      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
	    ];
	  }
	  if (sctp.maxMessageSize !== undefined) {
	    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
	  }
	  return output.join('');
	};

	// Generate a session ID for SDP.
	// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
	// recommends using a cryptographically random +ve 64-bit value
	// but right now this should be acceptable and within the right range
	SDPUtils.generateSessionId = function() {
	  return Math.random().toString().substr(2, 22);
	};

	// Write boiler plate for start of SDP
	// sessId argument is optional - if not supplied it will
	// be generated randomly
	// sessVersion is optional and defaults to 2
	// sessUser is optional and defaults to 'thisisadapterortc'
	SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
	  let sessionId;
	  const version = sessVer !== undefined ? sessVer : 2;
	  if (sessId) {
	    sessionId = sessId;
	  } else {
	    sessionId = SDPUtils.generateSessionId();
	  }
	  const user = sessUser || 'thisisadapterortc';
	  // FIXME: sess-id should be an NTP timestamp.
	  return 'v=0\r\n' +
	      'o=' + user + ' ' + sessionId + ' ' + version +
	        ' IN IP4 127.0.0.1\r\n' +
	      's=-\r\n' +
	      't=0 0\r\n';
	};

	// Gets the direction from the mediaSection or the sessionpart.
	SDPUtils.getDirection = function(mediaSection, sessionpart) {
	  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
	  const lines = SDPUtils.splitLines(mediaSection);
	  for (let i = 0; i < lines.length; i++) {
	    switch (lines[i]) {
	      case 'a=sendrecv':
	      case 'a=sendonly':
	      case 'a=recvonly':
	      case 'a=inactive':
	        return lines[i].substring(2);
	        // FIXME: What should happen here?
	    }
	  }
	  if (sessionpart) {
	    return SDPUtils.getDirection(sessionpart);
	  }
	  return 'sendrecv';
	};

	SDPUtils.getKind = function(mediaSection) {
	  const lines = SDPUtils.splitLines(mediaSection);
	  const mline = lines[0].split(' ');
	  return mline[0].substring(2);
	};

	SDPUtils.isRejected = function(mediaSection) {
	  return mediaSection.split(' ', 2)[1] === '0';
	};

	SDPUtils.parseMLine = function(mediaSection) {
	  const lines = SDPUtils.splitLines(mediaSection);
	  const parts = lines[0].substring(2).split(' ');
	  return {
	    kind: parts[0],
	    port: parseInt(parts[1], 10),
	    protocol: parts[2],
	    fmt: parts.slice(3).join(' '),
	  };
	};

	SDPUtils.parseOLine = function(mediaSection) {
	  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
	  const parts = line.substring(2).split(' ');
	  return {
	    username: parts[0],
	    sessionId: parts[1],
	    sessionVersion: parseInt(parts[2], 10),
	    netType: parts[3],
	    addressType: parts[4],
	    address: parts[5],
	  };
	};

	// a very naive interpretation of a valid SDP.
	SDPUtils.isValidSDP = function(blob) {
	  if (typeof blob !== 'string' || blob.length === 0) {
	    return false;
	  }
	  const lines = SDPUtils.splitLines(blob);
	  for (let i = 0; i < lines.length; i++) {
	    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
	      return false;
	    }
	    // TODO: check the modifier a bit more.
	  }
	  return true;
	};

	// Expose public methods.
	{
	  module.exports = SDPUtils;
	}
} (sdp));

var Intermediate = {};

Object.defineProperty(Intermediate, "__esModule", { value: true });
Intermediate.exportToSDP = Intermediate.importFromSDP = void 0;
const tslib_1$h = require$$0;
const SDP = (0, tslib_1$h.__importStar)(sdp.exports);
// ====================================================================
// Import SDP to Intermediary
// ====================================================================
function importFromSDP(sdp) {
    const mediaSections = SDP.getMediaSections(sdp);
    const sessionPart = SDP.getDescription(sdp);
    const session = {
        groups: [],
        media: []
    };
    if (SDP.matchPrefix(sessionPart, 'a=ice-lite').length > 0) {
        session.iceLite = true;
    }
    for (const groupLine of SDP.matchPrefix(sessionPart, 'a=group:')) {
        const parts = groupLine.split(' ');
        const semantics = parts.shift().substr(8);
        session.groups.push({
            mids: parts,
            semantics
        });
    }
    for (const mediaSection of mediaSections) {
        const kind = SDP.getKind(mediaSection);
        const isRejected = SDP.isRejected(mediaSection);
        const mLine = SDP.parseMLine(mediaSection);
        const media = {
            direction: SDP.getDirection(mediaSection, sessionPart),
            kind,
            mid: SDP.getMid(mediaSection),
            protocol: mLine.protocol
            // TODO: what about end-of-candidates?
        };
        if (!isRejected) {
            media.iceParameters = SDP.getIceParameters(mediaSection, sessionPart);
            media.dtlsParameters = SDP.getDtlsParameters(mediaSection, sessionPart);
            media.setup = SDP.matchPrefix(mediaSection, 'a=setup:')[0].substr(8);
            if (session.iceLite) {
                media.iceParameters.iceLite = true;
            }
        }
        if (kind === 'audio' || kind === 'video') {
            media.rtpParameters = SDP.parseRtpParameters(mediaSection);
            media.rtpEncodingParameters = SDP.parseRtpEncodingParameters(mediaSection);
            media.rtcpParameters = SDP.parseRtcpParameters(mediaSection);
            const msid = SDP.parseMsid(mediaSection);
            media.streams = msid ? [msid] : [];
        }
        else if (kind === 'application') {
            media.sctp = SDP.parseSctpDescription(mediaSection);
        }
        media.candidates = SDP.matchPrefix(mediaSection, 'a=candidate:').map(SDP.parseCandidate);
        session.media.push(media);
    }
    return session;
}
Intermediate.importFromSDP = importFromSDP;
// ====================================================================
// Export Intermediary to SDP
// ====================================================================
function exportToSDP(session) {
    const output = [];
    output.push(SDP.writeSessionBoilerplate(session.sessionId, session.sessionVersion), 'a=msid-semantic:WMS *\r\n');
    if (session.iceLite ||
        session.media.filter(m => m.iceParameters && m.iceParameters.iceLite).length > 0) {
        output.push('a=ice-lite\r\n');
    }
    for (const group of session.groups || []) {
        output.push(`a=group:${group.semantics} ${group.mids.join(' ')}\r\n`);
    }
    for (const media of session.media || []) {
        const isRejected = !(media.iceParameters && media.dtlsParameters);
        if (media.kind === 'application' && media.sctp) {
            output.push(SDP.writeSctpDescription(media, media.sctp));
        }
        else if (media.rtpParameters) {
            let mline = SDP.writeRtpDescription(media.kind, media.rtpParameters);
            if (isRejected) {
                mline = mline.replace(`m=${media.kind} 9 `, `m=${media.kind} 0 `);
            }
            output.push(mline);
            output.push(`a=${media.direction || 'sendrecv'}\r\n`);
            for (const stream of media.streams || []) {
                output.push(`a=msid:${stream.stream} ${stream.track}\r\n`);
            }
            if (media.rtcpParameters) {
                output.push(SDP.writeRtcpParameters(media.rtcpParameters));
                if (media.rtcpParameters.cname) {
                    if (media.rtpEncodingParameters && media.rtpEncodingParameters[0].rtx) {
                        const params = media.rtpEncodingParameters[0];
                        output.push(`a=ssrc-group:FID ${params.ssrc} ${params.rtx.ssrc}\r\n`);
                        output.push(`a=ssrc:${params.rtx.ssrc} cname:${media.rtcpParameters.cname}\r\n`);
                    }
                }
            }
        }
        if (media.mid !== undefined) {
            output.push(`a=mid:${media.mid}\r\n`);
        }
        if (media.iceParameters) {
            output.push(SDP.writeIceParameters({
                // Ignoring iceLite, since we already output ice-lite at session level
                usernameFragment: media.iceParameters.usernameFragment,
                password: media.iceParameters.password
            }));
        }
        if (media.dtlsParameters && media.setup) {
            output.push(SDP.writeDtlsParameters(media.dtlsParameters, media.setup));
        }
        if (media.candidates && media.candidates.length) {
            for (const candidate of media.candidates) {
                output.push(`a=${SDP.writeCandidate(candidate)}\r\n`);
            }
        }
    }
    return output.join('');
}
Intermediate.exportToSDP = exportToSDP;

var Protocol$1a = {};

Object.defineProperty(Protocol$1a, "__esModule", { value: true });
Protocol$1a.convertRequestToIntermediate = Protocol$1a.convertContentToIntermediate = Protocol$1a.convertIntermediateToRequest = Protocol$1a.convertIntermediateToTransport = Protocol$1a.convertCandidateToIntermediate = Protocol$1a.convertIntermediateToCandidate = Protocol$1a.convertIntermediateToApplication = void 0;
const Constants_1$i = Constants;
const Namespaces_1$1y = Namespaces;
function convertIntermediateToApplication(media, role) {
    const rtp = media.rtpParameters;
    const rtcp = media.rtcpParameters || {};
    const encodingParameters = media.rtpEncodingParameters || [];
    let hasSSRC = false;
    if (encodingParameters && encodingParameters.length) {
        hasSSRC = !!encodingParameters[0].ssrc; // !== false ???
    }
    const application = {
        applicationType: Namespaces_1$1y.NS_JINGLE_RTP_1,
        codecs: [],
        headerExtensions: [],
        media: media.kind,
        rtcpMux: rtcp.mux,
        rtcpReducedSize: rtcp.reducedSize,
        sourceGroups: [],
        sources: [],
        ssrc: hasSSRC ? encodingParameters[0].ssrc.toString() : undefined,
        streams: []
    };
    for (const ext of rtp.headerExtensions || []) {
        const header = {
            id: ext.id,
            uri: ext.uri
        };
        if (ext.direction && ext.direction !== 'sendrecv') {
            header.senders = (0, Constants_1$i.directionToSenders)(role, ext.direction);
        }
        application.headerExtensions.push(header);
    }
    if (rtcp.ssrc && rtcp.cname) {
        application.sources = [
            {
                parameters: {
                    cname: rtcp.cname
                },
                ssrc: rtcp.ssrc.toString()
            }
        ];
    }
    if (hasSSRC && encodingParameters[0] && encodingParameters[0].rtx) {
        application.sourceGroups = [
            {
                semantics: 'FID',
                sources: [
                    encodingParameters[0].ssrc.toString(),
                    encodingParameters[0].rtx.ssrc.toString()
                ]
            }
        ];
    }
    for (const stream of media.streams || []) {
        application.streams.push({
            id: stream.stream,
            track: stream.track
        });
    }
    for (const codec of rtp.codecs || []) {
        const payload = {
            channels: codec.channels,
            clockRate: codec.clockRate,
            id: codec.payloadType.toString(),
            name: codec.name,
            parameters: codec.parameters,
            rtcpFeedback: codec.rtcpFeedback
        };
        if (codec.maxptime) {
            payload.maxptime = codec.maxptime;
        }
        if (codec.parameters && codec.parameters.ptime) {
            payload.ptime = parseInt(codec.parameters.ptime, 10);
        }
        application.codecs.push(payload);
    }
    return application;
}
Protocol$1a.convertIntermediateToApplication = convertIntermediateToApplication;
function convertIntermediateToCandidate(candidate) {
    let component;
    if (candidate.component === 'rtp') {
        component = 1;
    }
    else if (candidate.component === 'rtcp') {
        component = 2;
    }
    else {
        component = candidate.component;
    }
    return {
        component,
        foundation: candidate.foundation,
        generation: undefined,
        id: undefined,
        ip: candidate.ip,
        network: undefined,
        port: candidate.port,
        priority: candidate.priority,
        protocol: candidate.protocol,
        relatedAddress: candidate.relatedAddress,
        relatedPort: candidate.relatedPort,
        tcpType: candidate.tcpType,
        type: candidate.type
    };
}
Protocol$1a.convertIntermediateToCandidate = convertIntermediateToCandidate;
function convertCandidateToIntermediate(candidate) {
    return {
        address: candidate.ip,
        component: candidate.component === 1
            ? 'rtp'
            : candidate.component === 2
                ? 'rtcp'
                : candidate.component,
        foundation: candidate.foundation,
        ip: candidate.ip,
        port: candidate.port,
        priority: candidate.priority,
        protocol: candidate.protocol,
        relatedAddress: candidate.relatedAddress,
        relatedPort: candidate.relatedPort,
        tcpType: candidate.tcpType,
        type: candidate.type
    };
}
Protocol$1a.convertCandidateToIntermediate = convertCandidateToIntermediate;
function convertIntermediateToTransport(media, transportType) {
    const ice = media.iceParameters;
    const dtls = media.dtlsParameters;
    const transport = {
        candidates: [],
        transportType
    };
    if (ice) {
        transport.usernameFragment = ice.usernameFragment;
        transport.password = ice.password;
        if (ice.iceLite) {
            transport.iceLite = true;
        }
    }
    if (dtls) {
        transport.fingerprints = dtls.fingerprints.map(fingerprint => ({
            algorithm: fingerprint.algorithm,
            setup: media.setup,
            value: fingerprint.value
        }));
    }
    if (media.sctp) {
        transport.sctp = media.sctp;
    }
    for (const candidate of media.candidates || []) {
        transport.candidates.push(convertIntermediateToCandidate(candidate));
    }
    return transport;
}
Protocol$1a.convertIntermediateToTransport = convertIntermediateToTransport;
function convertIntermediateToRequest(session, role, transportType) {
    return {
        contents: session.media.map(media => {
            const isRTP = media.kind === 'audio' || media.kind === 'video';
            return {
                application: isRTP
                    ? convertIntermediateToApplication(media, role)
                    : {
                        applicationType: 'datachannel',
                        protocol: media.protocol
                    },
                creator: Constants_1$i.JingleSessionRole.Initiator,
                name: media.mid,
                senders: (0, Constants_1$i.directionToSenders)(role, media.direction),
                transport: convertIntermediateToTransport(media, transportType)
            };
        }),
        groups: session.groups
            ? session.groups.map(group => ({
                contents: group.mids,
                semantics: group.semantics
            }))
            : []
    };
}
Protocol$1a.convertIntermediateToRequest = convertIntermediateToRequest;
function convertContentToIntermediate(content, role) {
    const application = content.application || {};
    const transport = content.transport;
    const isRTP = application && application.applicationType === Namespaces_1$1y.NS_JINGLE_RTP_1;
    const media = {
        direction: (0, Constants_1$i.sendersToDirection)(role, content.senders),
        kind: application.media || 'application',
        mid: content.name,
        protocol: isRTP ? 'UDP/TLS/RTP/SAVPF' : 'UDP/DTLS/SCTP'
    };
    if (isRTP) {
        media.rtcpParameters = {
            compound: !application.rtcpReducedSize,
            mux: application.rtcpMux,
            reducedSize: application.rtcpReducedSize
        };
        if (application.sources && application.sources.length) {
            const source = application.sources[0];
            media.rtcpParameters.ssrc = parseInt(source.ssrc, 10);
            if (source.parameters) {
                media.rtcpParameters.cname = source.parameters.cname;
            }
        }
        media.rtpParameters = {
            codecs: [],
            fecMechanisms: [],
            headerExtensions: [],
            rtcp: []
        };
        if (application.streams) {
            media.streams = [];
            for (const stream of application.streams) {
                media.streams.push({
                    stream: stream.id,
                    track: stream.track
                });
            }
        }
        if (application.ssrc) {
            media.rtpEncodingParameters = [
                {
                    ssrc: parseInt(application.ssrc, 10)
                }
            ];
            if (application.sourceGroups && application.sourceGroups.length) {
                const group = application.sourceGroups[0];
                media.rtpEncodingParameters[0].rtx = {
                    // TODO: actually look for a FID one with matching ssrc
                    ssrc: parseInt(group.sources[1], 10)
                };
            }
        }
        let hasRED = false;
        let hasULPFEC = false;
        for (const payload of application.codecs || []) {
            const parameters = payload.parameters || {};
            const rtcpFeedback = [];
            for (const fb of payload.rtcpFeedback || []) {
                rtcpFeedback.push({
                    parameter: fb.parameter,
                    type: fb.type
                });
            }
            if (payload.name === 'red' || payload.name === 'ulpfec') {
                hasRED = hasRED || payload.name === 'red';
                hasULPFEC = hasULPFEC || payload.name === 'ulpfec';
                const fec = payload.name.toUpperCase();
                if (!media.rtpParameters.fecMechanisms.includes(fec)) {
                    media.rtpParameters.fecMechanisms.push(fec);
                }
            }
            media.rtpParameters.codecs.push({
                channels: payload.channels,
                clockRate: payload.clockRate,
                name: payload.name,
                numChannels: payload.channels,
                parameters,
                payloadType: parseInt(payload.id, 10),
                rtcpFeedback
            });
        }
        for (const ext of application.headerExtensions || []) {
            media.rtpParameters.headerExtensions.push({
                direction: (0, Constants_1$i.sendersToDirection)(role, ext.senders || 'both'),
                id: ext.id,
                uri: ext.uri,
                attributes: undefined
                // FIXME: Waiting for typings fix in sdp module
            });
        }
    }
    if (transport) {
        if (transport.usernameFragment && transport.password) {
            media.iceParameters = {
                password: transport.password,
                usernameFragment: transport.usernameFragment
            };
            if (transport.iceLite) {
                media.iceParameters.iceLite = true;
            }
        }
        if (transport.fingerprints && transport.fingerprints.length) {
            media.dtlsParameters = {
                fingerprints: [],
                role: 'auto'
            };
            for (const fingerprint of transport.fingerprints) {
                media.dtlsParameters.fingerprints.push({
                    algorithm: fingerprint.algorithm,
                    value: fingerprint.value
                });
            }
            if (transport.sctp) {
                media.sctp = transport.sctp;
            }
            media.setup = transport.fingerprints[0].setup;
        }
        media.candidates = (transport.candidates || []).map(convertCandidateToIntermediate);
    }
    return media;
}
Protocol$1a.convertContentToIntermediate = convertContentToIntermediate;
function convertRequestToIntermediate(jingle, role) {
    const session = {
        groups: [],
        media: []
    };
    for (const group of jingle.groups || []) {
        session.groups.push({
            mids: group.contents,
            semantics: group.semantics
        });
    }
    for (const content of jingle.contents || []) {
        session.media.push(convertContentToIntermediate(content, role));
    }
    return session;
}
Protocol$1a.convertRequestToIntermediate = convertRequestToIntermediate;

var Session = {};

/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */
function apply(fn, ...args) {
    return (...callArgs) => fn(...args,...callArgs);
}

function initialParams (fn) {
    return function (...args/*, callback*/) {
        var callback = args.pop();
        return fn.call(this, args, callback);
    };
}

/* istanbul ignore file */

var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;
var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return (fn, ...args) => defer(() => fn(...args));
}

var _defer$1;

if (hasQueueMicrotask) {
    _defer$1 = queueMicrotask;
} else if (hasSetImmediate) {
    _defer$1 = setImmediate;
} else if (hasNextTick) {
    _defer$1 = process.nextTick;
} else {
    _defer$1 = fallback;
}

var setImmediate$1 = wrap(_defer$1);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    if (isAsync(func)) {
        return function (...args/*, callback*/) {
            const callback = args.pop();
            const promise = func.apply(this, args);
            return handlePromise(promise, callback)
        }
    }

    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (result && typeof result.then === 'function') {
            return handlePromise(result, callback)
        } else {
            callback(null, result);
        }
    });
}

function handlePromise(promise, callback) {
    return promise.then(value => {
        invokeCallback(callback, null, value);
    }, err => {
        invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (err) {
        setImmediate$1(e => { throw e }, err);
    }
}

function isAsync(fn) {
    return fn[Symbol.toStringTag] === 'AsyncFunction';
}

function isAsyncGenerator(fn) {
    return fn[Symbol.toStringTag] === 'AsyncGenerator';
}

function isAsyncIterable(obj) {
    return typeof obj[Symbol.asyncIterator] === 'function';
}

function wrapAsync(asyncFn) {
    if (typeof asyncFn !== 'function') throw new Error('expected a function')
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

// conditionally promisify a function.
// only return a promise if a callback is omitted
function awaitify (asyncFn, arity) {
    if (!arity) arity = asyncFn.length;
    if (!arity) throw new Error('arity is undefined')
    function awaitable (...args) {
        if (typeof args[arity - 1] === 'function') {
            return asyncFn.apply(this, args)
        }

        return new Promise((resolve, reject) => {
            args[arity - 1] = (err, ...cbArgs) => {
                if (err) return reject(err)
                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
            };
            asyncFn.apply(this, args);
        })
    }

    return awaitable
}

function applyEach$1 (eachfn) {
    return function applyEach(fns, ...callArgs) {
        const go = awaitify(function (callback) {
            var that = this;
            return eachfn(fns, (fn, cb) => {
                wrapAsync(fn).apply(that, callArgs.concat(cb));
            }, callback);
        });
        return go;
    };
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    return eachfn(arr, (value, _, iterCb) => {
        var index = counter++;
        _iteratee(value, (err, v) => {
            results[index] = v;
            iterCb(err);
        });
    }, err => {
        callback(err, results);
    });
}

function isArrayLike(value) {
    return value &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        value.length % 1 === 0;
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
const breakLoop = {};
var breakLoop$1 = breakLoop;

function once(fn) {
    function wrapper (...args) {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    }
    Object.assign(wrapper, fn);
    return wrapper
}

function getIterator (coll) {
    return coll[Symbol.iterator] && coll[Symbol.iterator]();
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = obj ? Object.keys(obj) : [];
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        if (key === '__proto__') {
            return next();
        }
        return i < len ? {value: obj[key], key} : null;
    };
}

function createIterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function (...args) {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    };
}

// for async generators
function asyncEachOfLimit(generator, limit, iteratee, callback) {
    let done = false;
    let canceled = false;
    let awaiting = false;
    let running = 0;
    let idx = 0;

    function replenish() {
        //console.log('replenish')
        if (running >= limit || awaiting || done) return
        //console.log('replenish awaiting')
        awaiting = true;
        generator.next().then(({value, done: iterDone}) => {
            //console.log('got value', value)
            if (canceled || done) return
            awaiting = false;
            if (iterDone) {
                done = true;
                if (running <= 0) {
                    //console.log('done nextCb')
                    callback(null);
                }
                return;
            }
            running++;
            iteratee(value, idx, iterateeCallback);
            idx++;
            replenish();
        }).catch(handleError);
    }

    function iterateeCallback(err, result) {
        //console.log('iterateeCallback')
        running -= 1;
        if (canceled) return
        if (err) return handleError(err)

        if (err === false) {
            done = true;
            canceled = true;
            return
        }

        if (result === breakLoop$1 || (done && running <= 0)) {
            done = true;
            //console.log('done iterCb')
            return callback(null);
        }
        replenish();
    }

    function handleError(err) {
        if (canceled) return
        awaiting = false;
        done = true;
        callback(err);
    }

    replenish();
}

var eachOfLimit$2 = (limit) => {
    return (obj, iteratee, callback) => {
        callback = once(callback);
        if (limit <= 0) {
            throw new RangeError('concurrency limit cannot be less than 1')
        }
        if (!obj) {
            return callback(null);
        }
        if (isAsyncGenerator(obj)) {
            return asyncEachOfLimit(obj, limit, iteratee, callback)
        }
        if (isAsyncIterable(obj)) {
            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)
        }
        var nextElem = createIterator(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            if (canceled) return
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (err === false) {
                done = true;
                canceled = true;
            }
            else if (value === breakLoop$1 || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
};

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfLimit(coll, limit, iteratee, callback) {
    return eachOfLimit$2(limit)(coll, wrapAsync(iteratee), callback);
}

var eachOfLimit$1 = awaitify(eachOfLimit, 4);

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback);
    var index = 0,
        completed = 0,
        {length} = coll,
        canceled = false;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err === false) {
            canceled = true;
        }
        if (canceled === true) return
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop$1) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
function eachOfGeneric (coll, iteratee, callback) {
    return eachOfLimit$1(coll, Infinity, iteratee, callback);
}

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dev.json is a file containing a valid json object config for dev environment
 * // dev.json is a file containing a valid json object config for test environment
 * // prod.json is a file containing a valid json object config for prod environment
 * // invalid.json is a file with a malformed json object
 *
 * let configs = {}; //global variable
 * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
 * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
 *
 * // asynchronous function that reads a json file and parses the contents as json object
 * function parseFile(file, key, callback) {
 *     fs.readFile(file, "utf8", function(err, data) {
 *         if (err) return calback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }
 *
 * // Using callbacks
 * async.forEachOf(validConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *     } else {
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *         // JSON parse error exception
 *     } else {
 *         console.log(configs);
 *     }
 * });
 *
 * // Using Promises
 * async.forEachOf(validConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 *     // configs is now a map of JSON data, e.g.
 *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 * }).catch( err => {
 *     console.error(err);
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 * }).catch( err => {
 *     console.error(err);
 *     // JSON parse error exception
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.forEachOf(validConfigFileMap, parseFile);
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * //Error handing
 * async () => {
 *     try {
 *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
 *         console.log(configs);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // JSON parse error exception
 *     }
 * }
 *
 */
function eachOf(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}

var eachOf$1 = awaitify(eachOf, 3);

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callbacks
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.map(fileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(results);
 *     }
 * });
 *
 * // Using Promises
 * async.map(fileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now an array of the file size in bytes for each file, e.g.
 *     // [ 1000, 2000, 3000]
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.map(fileList, getFileSizeInBytes);
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.map(withMissingFileList, getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function map (coll, iteratee, callback) {
    return _asyncMap(eachOf$1, coll, iteratee, callback)
}
var map$1 = awaitify(map, 3);

/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional. The results
 * for each of the applied async functions are passed to the final callback
 * as an array.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - Returns a function that takes no args other than
 * an optional callback, that is the result of applying the `args` to each
 * of the functions.
 * @example
 *
 * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')
 *
 * appliedFn((err, results) => {
 *     // results[0] is the results for `enableSearch`
 *     // results[1] is the results for `updateSchema`
 * });
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),
 *     callback
 * );
 */
var applyEach = applyEach$1(map$1);

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfSeries(coll, iteratee, callback) {
    return eachOfLimit$1(coll, 1, iteratee, callback)
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapSeries (coll, iteratee, callback) {
    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)
}
var mapSeries$1 = awaitify(mapSeries, 3);

/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - A function, that when called, is the result of
 * appling the `args` to the list of functions.  It takes no args, other than
 * a callback.
 */
var applyEachSeries = applyEach$1(mapSeries$1);

const PROMISE_SYMBOL = Symbol('promiseCallback');

function promiseCallback () {
    let resolve, reject;
    function callback (err, ...args) {
        if (err) return reject(err)
        resolve(args.length > 1 ? args : args[0]);
    }

    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {
        resolve = res,
        reject = rej;
    });

    return callback
}

/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 * @example
 *
 * //Using Callbacks
 * async.auto({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         // once the file is written let's email a link to it...
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     if (err) {
 *         console.log('err = ', err);
 *     }
 *     console.log('results = ', results);
 *     // results = {
 *     //     get_data: ['data', 'converted to array']
 *     //     make_folder; 'folder',
 *     //     write_file: 'filename'
 *     //     email_link: { file: 'filename', email: 'user@example.com' }
 *     // }
 * });
 *
 * //Using Promises
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         // once the file is written let's email a link to it...
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }).then(results => {
 *     console.log('results = ', results);
 *     // results = {
 *     //     get_data: ['data', 'converted to array']
 *     //     make_folder; 'folder',
 *     //     write_file: 'filename'
 *     //     email_link: { file: 'filename', email: 'user@example.com' }
 *     // }
 * }).catch(err => {
 *     console.log('err = ', err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.auto({
 *             get_data: function(callback) {
 *                 // async code to get some data
 *                 callback(null, 'data', 'converted to array');
 *             },
 *             make_folder: function(callback) {
 *                 // async code to create a directory to store a file in
 *                 // this is run at the same time as getting the data
 *                 callback(null, 'folder');
 *             },
 *             write_file: ['get_data', 'make_folder', function(results, callback) {
 *                 // once there is some data and the directory exists,
 *                 // write the data to a file in the directory
 *                 callback(null, 'filename');
 *             }],
 *             email_link: ['write_file', function(results, callback) {
 *                 // once the file is written let's email a link to it...
 *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *             }]
 *         });
 *         console.log('results = ', results);
 *         // results = {
 *         //     get_data: ['data', 'converted to array']
 *         //     make_folder; 'folder',
 *         //     write_file: 'filename'
 *         //     email_link: { file: 'filename', email: 'user@example.com' }
 *         // }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function auto(tasks, concurrency, callback) {
    if (typeof concurrency !== 'number') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || promiseCallback());
    var numTasks = Object.keys(tasks).length;
    if (!numTasks) {
        return callback(null);
    }
    if (!concurrency) {
        concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var canceled = false;
    var hasError = false;

    var listeners = Object.create(null);

    var readyTasks = [];

    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {};

    Object.keys(tasks).forEach(key => {
        var task = tasks[key];
        if (!Array.isArray(task)) {
            // no dependencies
            enqueueTask(key, [task]);
            readyToCheck.push(key);
            return;
        }

        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;

        dependencies.forEach(dependencyName => {
            if (!tasks[dependencyName]) {
                throw new Error('async.auto task `' + key +
                    '` has a non-existent dependency `' +
                    dependencyName + '` in ' +
                    dependencies.join(', '));
            }
            addListener(dependencyName, () => {
                remainingDependencies--;
                if (remainingDependencies === 0) {
                    enqueueTask(key, task);
                }
            });
        });
    });

    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
        readyTasks.push(() => runTask(key, task));
    }

    function processQueue() {
        if (canceled) return
        if (readyTasks.length === 0 && runningTasks === 0) {
            return callback(null, results);
        }
        while(readyTasks.length && runningTasks < concurrency) {
            var run = readyTasks.shift();
            run();
        }

    }

    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
            taskListeners = listeners[taskName] = [];
        }

        taskListeners.push(fn);
    }

    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        taskListeners.forEach(fn => fn());
        processQueue();
    }


    function runTask(key, task) {
        if (hasError) return;

        var taskCallback = onlyOnce((err, ...result) => {
            runningTasks--;
            if (err === false) {
                canceled = true;
                return
            }
            if (result.length < 2) {
                [result] = result;
            }
            if (err) {
                var safeResults = {};
                Object.keys(results).forEach(rkey => {
                    safeResults[rkey] = results[rkey];
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);
                if (canceled) return
                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });

        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
            taskFn(results, taskCallback);
        } else {
            taskFn(taskCallback);
        }
    }

    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
            currentTask = readyToCheck.pop();
            counter++;
            getDependents(currentTask).forEach(dependent => {
                if (--uncheckedDependencies[dependent] === 0) {
                    readyToCheck.push(dependent);
                }
            });
        }

        if (counter !== numTasks) {
            throw new Error(
                'async.auto cannot execute tasks due to a recursive dependency'
            );
        }
    }

    function getDependents(taskName) {
        var result = [];
        Object.keys(tasks).forEach(key => {
            const task = tasks[key];
            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {
                result.push(key);
            }
        });
        return result;
    }

    return callback[PROMISE_SYMBOL]
}

var FN_ARGS = /^(?:async\s+)?(?:function)?\s*\w*\s*\(\s*([^)]+)\s*\)(?:\s*{)/;
var ARROW_FN_ARGS = /^(?:async\s+)?\(?\s*([^)=]+)\s*\)?(?:\s*=>)/;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;

function stripComments(string) {
    let stripped = '';
    let index = 0;
    let endBlockComment = string.indexOf('*/');
    while (index < string.length) {
        if (string[index] === '/' && string[index+1] === '/') {
            // inline comment
            let endIndex = string.indexOf('\n', index);
            index = (endIndex === -1) ? string.length : endIndex;
        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {
            // block comment
            let endIndex = string.indexOf('*/', index);
            if (endIndex !== -1) {
                index = endIndex + 2;
                endBlockComment = string.indexOf('*/', index);
            } else {
                stripped += string[index];
                index++;
            }
        } else {
            stripped += string[index];
            index++;
        }
    }
    return stripped;
}

function parseParams(func) {
    const src = stripComments(func.toString());
    let match = src.match(FN_ARGS);
    if (!match) {
        match = src.match(ARROW_FN_ARGS);
    }
    if (!match) throw new Error('could not parse args in autoInject\nSource:\n' + src)
    let [, args] = match;
    return args
        .replace(/\s/g, '')
        .split(FN_ARG_SPLIT)
        .map((arg) => arg.replace(FN_ARG, '').trim());
}

/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */
function autoInject(tasks, callback) {
    var newTasks = {};

    Object.keys(tasks).forEach(key => {
        var taskFn = tasks[key];
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps =
            (!fnIsAsync && taskFn.length === 1) ||
            (fnIsAsync && taskFn.length === 0);

        if (Array.isArray(taskFn)) {
            params = [...taskFn];
            taskFn = params.pop();

            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
            // no dependencies, use the function as-is
            newTasks[key] = taskFn;
        } else {
            params = parseParams(taskFn);
            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {
                throw new Error("autoInject task functions require explicit parameters.");
            }

            // remove callback param
            if (!fnIsAsync) params.pop();

            newTasks[key] = params.concat(newTask);
        }

        function newTask(results, taskCb) {
            var newArgs = params.map(name => results[name]);
            newArgs.push(taskCb);
            wrapAsync(taskFn)(...newArgs);
        }
    });

    return auto(newTasks, callback);
}

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
class DLL {
    constructor() {
        this.head = this.tail = null;
        this.length = 0;
    }

    removeLink(node) {
        if (node.prev) node.prev.next = node.next;
        else this.head = node.next;
        if (node.next) node.next.prev = node.prev;
        else this.tail = node.prev;

        node.prev = node.next = null;
        this.length -= 1;
        return node;
    }

    empty () {
        while(this.head) this.shift();
        return this;
    }

    insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next) node.next.prev = newNode;
        else this.tail = newNode;
        node.next = newNode;
        this.length += 1;
    }

    insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev) node.prev.next = newNode;
        else this.head = newNode;
        node.prev = newNode;
        this.length += 1;
    }

    unshift(node) {
        if (this.head) this.insertBefore(this.head, node);
        else setInitial(this, node);
    }

    push(node) {
        if (this.tail) this.insertAfter(this.tail, node);
        else setInitial(this, node);
    }

    shift() {
        return this.head && this.removeLink(this.head);
    }

    pop() {
        return this.tail && this.removeLink(this.tail);
    }

    toArray() {
        return [...this]
    }

    *[Symbol.iterator] () {
        var cur = this.head;
        while (cur) {
            yield cur.data;
            cur = cur.next;
        }
    }

    remove (testFn) {
        var curr = this.head;
        while(curr) {
            var {next} = curr;
            if (testFn(curr)) {
                this.removeLink(curr);
            }
            curr = next;
        }
        return this;
    }
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

function queue$1(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new RangeError('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];
    const events = {
        error: [],
        drain: [],
        saturated: [],
        unsaturated: [],
        empty: []
    };

    function on (event, handler) {
        events[event].push(handler);
    }

    function once (event, handler) {
        const handleAndRemove = (...args) => {
            off(event, handleAndRemove);
            handler(...args);
        };
        events[event].push(handleAndRemove);
    }

    function off (event, handler) {
        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])
        if (!handler) return events[event] = []
        events[event] = events[event].filter(ev => ev !== handler);
    }

    function trigger (event, ...args) {
        events[event].forEach(handler => handler(...args));
    }

    var processingScheduled = false;
    function _insert(data, insertAtFront, rejectOnError, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;

        var res, rej;
        function promiseCallback (err, ...args) {
            // we don't care about the error, let the global error handler
            // deal with it
            if (err) return rejectOnError ? rej(err) : res()
            if (args.length <= 1) return res(args[0])
            res(args);
        }

        var item = q._createTaskItem(
            data,
            rejectOnError ? promiseCallback :
                (callback || promiseCallback)
        );

        if (insertAtFront) {
            q._tasks.unshift(item);
        } else {
            q._tasks.push(item);
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(() => {
                processingScheduled = false;
                q.process();
            });
        }

        if (rejectOnError || !callback) {
            return new Promise((resolve, reject) => {
                res = resolve;
                rej = reject;
            })
        }
    }

    function _createCB(tasks) {
        return function (err, ...args) {
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = workersList.indexOf(task);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback(err, ...args);

                if (err != null) {
                    trigger('error', err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                trigger('unsaturated');
            }

            if (q.idle()) {
                trigger('drain');
            }
            q.process();
        };
    }

    function _maybeDrain(data) {
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            setImmediate$1(() => trigger('drain'));
            return true
        }
        return false
    }

    const eventMethod = (name) => (handler) => {
        if (!handler) {
            return new Promise((resolve, reject) => {
                once(name, (err, data) => {
                    if (err) return reject(err)
                    resolve(data);
                });
            })
        }
        off(name);
        on(name, handler);

    };

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        _createTaskItem (data, callback) {
            return {
                data,
                callback
            };
        },
        *[Symbol.iterator] () {
            yield* q._tasks[Symbol.iterator]();
        },
        concurrency,
        payload,
        buffer: concurrency / 4,
        started: false,
        paused: false,
        push (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, false, callback))
            }
            return _insert(data, false, false, callback);
        },
        pushAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, true, callback))
            }
            return _insert(data, false, true, callback);
        },
        kill () {
            off();
            q._tasks.empty();
        },
        unshift (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, false, callback))
            }
            return _insert(data, true, false, callback);
        },
        unshiftAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, true, callback))
            }
            return _insert(data, true, true, callback);
        },
        remove (testFn) {
            q._tasks.remove(testFn);
        },
        process () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    trigger('empty');
                }

                if (numRunning === q.concurrency) {
                    trigger('saturated');
                }

                var cb = onlyOnce(_createCB(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length () {
            return q._tasks.length;
        },
        running () {
            return numRunning;
        },
        workersList () {
            return workersList;
        },
        idle() {
            return q._tasks.length + numRunning === 0;
        },
        pause () {
            q.paused = true;
        },
        resume () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    // define these as fixed properties, so people get useful errors when updating
    Object.defineProperties(q, {
        saturated: {
            writable: false,
            value: eventMethod('saturated')
        },
        unsaturated: {
            writable: false,
            value: eventMethod('unsaturated')
        },
        empty: {
            writable: false,
            value: eventMethod('empty')
        },
        drain: {
            writable: false,
            value: eventMethod('drain')
        },
        error: {
            writable: false,
            value: eventMethod('error')
        },
    });
    return q;
}

/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * await cargo.push({name: 'baz'});
 * console.log('finished processing baz');
 */
function cargo$1(worker, payload) {
    return queue$1(worker, 1, payload);
}

/**
 * Creates a `cargoQueue` object with the specified payload. Tasks added to the
 * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.
 * If the all `workers` are in progress, the task is queued until one becomes available. Once
 * a `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,
 * the cargoQueue passes an array of tasks to multiple parallel workers.
 *
 * @name cargoQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @see [async.cargo]{@link module:ControlFLow.cargo}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargoQueue and inner queue.
 * @example
 *
 * // create a cargoQueue object with payload 2 and concurrency 2
 * var cargoQueue = async.cargoQueue(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2, 2);
 *
 * // add some items
 * cargoQueue.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargoQueue.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargoQueue.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 * cargoQueue.push({name: 'boo'}, function(err) {
 *     console.log('finished processing boo');
 * });
 */
function cargo(worker, concurrency, payload) {
    return queue$1(worker, concurrency, payload);
}

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];
 *
 * // asynchronous function that computes the file size in bytes
 * // file size is added to the memoized value, then returned
 * function getFileSizeInBytes(memo, file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, memo + stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.reduce(fileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // 6000
 *     // which is the sum of the file sizes of the three files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback);
    var _iteratee = wrapAsync(iteratee);
    return eachOfSeries$1(coll, (x, i, iterCb) => {
        _iteratee(memo, x, (err, v) => {
            memo = v;
            iterCb(err);
        });
    }, err => callback(err, memo));
}
var reduce$1 = awaitify(reduce, 4);

/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */
function seq(...functions) {
    var _functions = functions.map(wrapAsync);
    return function (...args) {
        var that = this;

        var cb = args[args.length - 1];
        if (typeof cb == 'function') {
            args.pop();
        } else {
            cb = promiseCallback();
        }

        reduce$1(_functions, args, (newargs, fn, iterCb) => {
            fn.apply(that, newargs.concat((err, ...nextargs) => {
                iterCb(err, nextargs);
            }));
        },
        (err, results) => cb(err, ...results));

        return cb[PROMISE_SYMBOL]
    };
}

/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * If the last argument to the composed function is not a function, a promise
 * is returned when you call it.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */
function compose(...args) {
    return seq(...args.reverse());
}

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapLimit (coll, limit, iteratee, callback) {
    return _asyncMap(eachOfLimit$2(limit), coll, iteratee, callback)
}
var mapLimit$1 = awaitify(mapLimit, 4);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapLimit
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, ...args) => {
            if (err) return iterCb(err);
            return iterCb(err, args);
        });
    }, (err, mapResults) => {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = result.concat(...mapResults[i]);
            }
        }

        return callback(err, result);
    });
}
var concatLimit$1 = awaitify(concatLimit, 4);

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. The results array will be returned in
 * the original order of `coll` passed to the `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @alias flatMap
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * let directoryList = ['dir1','dir2','dir3'];
 * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];
 *
 * // Using callbacks
 * async.concat(directoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *    }
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *        // [ Error: ENOENT: no such file or directory ]
 *        // since dir4 does not exist
 *    } else {
 *        console.log(results);
 *    }
 * });
 *
 * // Using Promises
 * async.concat(directoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 * }).catch(err => {
 *      console.log(err);
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 * }).catch(err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4 does not exist
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.concat(directoryList, fs.readdir);
 *         console.log(results);
 *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *     } catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.concat(withMissingDirectoryList, fs.readdir);
 *         console.log(results);
 *     } catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4 does not exist
 *     }
 * }
 *
 */
function concat(coll, iteratee, callback) {
    return concatLimit$1(coll, Infinity, iteratee, callback)
}
var concat$1 = awaitify(concat, 3);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapSeries
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatSeries(coll, iteratee, callback) {
    return concatLimit$1(coll, 1, iteratee, callback)
}
var concatSeries$1 = awaitify(concatSeries, 3);

/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */
function constant$1(...args) {
    return function (...ignoredArgs/*, callback*/) {
        var callback = ignoredArgs.pop();
        return callback(null, ...args);
    };
}

function _createTester(check, getResult) {
    return (eachfn, arr, _iteratee, cb) => {
        var testPassed = false;
        var testResult;
        const iteratee = wrapAsync(_iteratee);
        eachfn(arr, (value, _, callback) => {
            iteratee(value, (err, result) => {
                if (err || err === false) return callback(err);

                if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    return callback(null, breakLoop$1);
                }
                callback();
            });
        }, err => {
            if (err) return cb(err);
            cb(null, testPassed ? testResult : getResult(false));
        });
    };
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // dir1/file1.txt
 *        // result now equals the first file in the list that exists
 *    }
 *);
 *
 * // Using Promises
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)
 * .then(result => {
 *     console.log(result);
 *     // dir1/file1.txt
 *     // result now equals the first file in the list that exists
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);
 *         console.log(result);
 *         // dir1/file1.txt
 *         // result now equals the file in the list that exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function detect(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)
}
var detect$1 = awaitify(detect, 3);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */
function detectLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit$2(limit), coll, iteratee, callback)
}
var detectLimit$1 = awaitify(detectLimit, 4);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */
function detectSeries(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit$2(1), coll, iteratee, callback)
}

var detectSeries$1 = awaitify(detectSeries, 3);

function consoleFunc(name) {
    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {
        /* istanbul ignore else */
        if (typeof console === 'object') {
            /* istanbul ignore else */
            if (err) {
                /* istanbul ignore else */
                if (console.error) {
                    console.error(err);
                }
            } else if (console[name]) { /* istanbul ignore else */
                resultArgs.forEach(x => console[name](x));
            }
        }
    })
}

/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */
var dir = consoleFunc('dir');

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results;

    function next(err, ...args) {
        if (err) return callback(err);
        if (err === false) return;
        results = args;
        _test(...args, check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return check(null, true);
}

var doWhilst$1 = awaitify(doWhilst, 3);

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doUntil(iteratee, test, callback) {
    const _test = wrapAsync(test);
    return doWhilst$1(iteratee, (...args) => {
        const cb = args.pop();
        _test(...args, (err, truth) => cb (err, !truth));
    }, callback);
}

function _withoutIndex(iteratee) {
    return (value, index, callback) => iteratee(value, callback);
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
 * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
 *
 * // asynchronous function that deletes a file
 * const deleteFile = function(file, callback) {
 *     fs.unlink(file, callback);
 * };
 *
 * // Using callbacks
 * async.each(fileList, deleteFile, function(err) {
 *     if( err ) {
 *         console.log(err);
 *     } else {
 *         console.log('All files have been deleted successfully');
 *     }
 * });
 *
 * // Error Handling
 * async.each(withMissingFileList, deleteFile, function(err){
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using Promises
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         await async.each(files, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         await async.each(withMissingFileList, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4/file2.txt does not exist
 *         // dir1/file1.txt could have been deleted
 *     }
 * }
 *
 */
function eachLimit$2(coll, iteratee, callback) {
    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

var each = awaitify(eachLimit$2, 3);

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachLimit(coll, limit, iteratee, callback) {
    return eachOfLimit$2(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$1 = awaitify(eachLimit, 4);

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
 * in series and therefore the iteratee functions will complete in order.

 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachSeries(coll, iteratee, callback) {
    return eachLimit$1(coll, 1, iteratee, callback)
}
var eachSeries$1 = awaitify(eachSeries, 3);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return function (...args/*, callback*/) {
        var callback = args.pop();
        var sync = true;
        args.push((...innerArgs) => {
            if (sync) {
                setImmediate$1(() => callback(...innerArgs));
            } else {
                callback(...innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    };
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.every(fileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * });
 *
 * async.every(withMissingFileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * });
 *
 * // Using Promises
 * async.every(fileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.every(withMissingFileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.every(fileList, fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.every(withMissingFileList, fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since NOT every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function every(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)
}
var every$1 = awaitify(every, 3);

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everyLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfLimit$2(limit), coll, iteratee, callback)
}
var everyLimit$1 = awaitify(everyLimit, 4);

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everySeries(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)
}
var everySeries$1 = awaitify(everySeries, 3);

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            truthValues[index] = !!v;
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            if (err) return iterCb(err);
            if (v) {
                results.push({index, value: x});
            }
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        callback(null, results
            .sort((a, b) => a.index - b.index)
            .map(v => v.value));
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    return filter(eachfn, coll, wrapAsync(iteratee), callback);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.filter(files, fileExists, function(err, results) {
 *    if(err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *        // results is now an array of the existing files
 *    }
 * });
 *
 * // Using Promises
 * async.filter(files, fileExists)
 * .then(results => {
 *     console.log(results);
 *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *     // results is now an array of the existing files
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.filter(files, fileExists);
 *         console.log(results);
 *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *         // results is now an array of the existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function filter (coll, iteratee, callback) {
    return _filter(eachOf$1, coll, iteratee, callback)
}
var filter$1 = awaitify(filter, 3);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 */
function filterLimit (coll, limit, iteratee, callback) {
    return _filter(eachOfLimit$2(limit), coll, iteratee, callback)
}
var filterLimit$1 = awaitify(filterLimit, 4);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 * @returns {Promise} a promise, if no callback provided
 */
function filterSeries (coll, iteratee, callback) {
    return _filter(eachOfSeries$1, coll, iteratee, callback)
}
var filterSeries$1 = awaitify(filterSeries, 3);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @returns {Promise} a promise that rejects if an error occurs and an errback
 * is not passed
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        if (err === false) return;
        task(next);
    }
    return next();
}
var forever$1 = awaitify(forever, 2);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupByLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, key) => {
            if (err) return iterCb(err);
            return iterCb(err, {key, val});
        });
    }, (err, mapResults) => {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var {hasOwnProperty} = Object.prototype;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var {key} = mapResults[i];
                var {val} = mapResults[i];

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
}

var groupByLimit$1 = awaitify(groupByLimit, 4);

/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const files = ['dir1/file1.txt','dir2','dir4']
 *
 * // asynchronous function that detects file type as none, file, or directory
 * function detectFile(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(null, 'none');
 *         }
 *         callback(null, stat.isDirectory() ? 'directory' : 'file');
 *     });
 * }
 *
 * //Using callbacks
 * async.groupBy(files, detectFile, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *	       console.log(result);
 *         // {
 *         //     file: [ 'dir1/file1.txt' ],
 *         //     none: [ 'dir4' ],
 *         //     directory: [ 'dir2']
 *         // }
 *         // result is object containing the files grouped by type
 *     }
 * });
 *
 * // Using Promises
 * async.groupBy(files, detectFile)
 * .then( result => {
 *     console.log(result);
 *     // {
 *     //     file: [ 'dir1/file1.txt' ],
 *     //     none: [ 'dir4' ],
 *     //     directory: [ 'dir2']
 *     // }
 *     // result is object containing the files grouped by type
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.groupBy(files, detectFile);
 *         console.log(result);
 *         // {
 *         //     file: [ 'dir1/file1.txt' ],
 *         //     none: [ 'dir4' ],
 *         //     directory: [ 'dir2']
 *         // }
 *         // result is object containing the files grouped by type
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function groupBy (coll, iteratee, callback) {
    return groupByLimit$1(coll, Infinity, iteratee, callback)
}

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whose
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupBySeries (coll, iteratee, callback) {
    return groupByLimit$1(coll, 1, iteratee, callback)
}

/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */
var log = consoleFunc('log');

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    return eachOfLimit$2(limit)(obj, (val, key, next) => {
        _iteratee(val, key, (err, result) => {
            if (err) return next(err);
            newObj[key] = result;
            next(err);
        });
    }, err => callback(err, newObj));
}

var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);

/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileMap = {
 *     f1: 'file1.txt',
 *     f2: 'file2.txt',
 *     f3: 'file3.txt'
 * };
 *
 * const withMissingFileMap = {
 *     f1: 'file1.txt',
 *     f2: 'file2.txt',
 *     f3: 'file4.txt'
 * };
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, key, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // result is now a map of file size in bytes for each file, e.g.
 *         // {
 *         //     f1: 1000,
 *         //     f2: 2000,
 *         //     f3: 3000
 *         // }
 *     }
 * });
 *
 * // Error handling
 * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.mapValues(fileMap, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // result is now a map of file size in bytes for each file, e.g.
 *     // {
 *     //     f1: 1000,
 *     //     f2: 2000,
 *     //     f3: 3000
 *     // }
 * }).catch (err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.mapValues(withMissingFileMap, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch (err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.mapValues(fileMap, getFileSizeInBytes);
 *         console.log(result);
 *         // result is now a map of file size in bytes for each file, e.g.
 *         // {
 *         //     f1: 1000,
 *         //     f2: 2000,
 *         //     f3: 3000
 *         // }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function mapValues(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, Infinity, iteratee, callback)
}

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesSeries(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, 1, iteratee, callback)
}

/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * **Note: if the async function errs, the result will not be cached and
 * subsequent calls will call the wrapped function.**
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */
function memoize(fn, hasher = v => v) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    var _fn = wrapAsync(fn);
    var memoized = initialParams((args, callback) => {
        var key = hasher(...args);
        if (key in memo) {
            setImmediate$1(() => callback(null, ...memo[key]));
        } else if (key in queues) {
            queues[key].push(callback);
        } else {
            queues[key] = [callback];
            _fn(...args, (err, ...resultArgs) => {
                // #1465 don't memoize if an error occurred
                if (!err) {
                    memo[key] = resultArgs;
                }
                var q = queues[key];
                delete queues[key];
                for (var i = 0, l = q.length; i < l; i++) {
                    q[i](err, ...resultArgs);
                }
            });
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}

/* istanbul ignore file */

/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */
var _defer;

if (hasNextTick) {
    _defer = process.nextTick;
} else if (hasSetImmediate) {
    _defer = setImmediate;
} else {
    _defer = fallback;
}

var nextTick = wrap(_defer);

var _parallel = awaitify((eachfn, tasks, callback) => {
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, (task, key, taskCb) => {
        wrapAsync(task)((err, ...result) => {
            if (result.length < 2) {
                [result] = result;
            }
            results[key] = result;
            taskCb(err);
        });
    }, err => callback(err, results));
}, 3);

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 *
 * //Using Callbacks
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ], function(err, results) {
 *     console.log(results);
 *     // results is equal to ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * });
 *
 * //Using Promises
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ]).then(results => {
 *     console.log(results);
 *     // results is equal to ['one','two'] even though
 *     // the second function had a shorter timeout.
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }).then(results => {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.parallel([
 *             function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 'one');
 *                 }, 200);
 *             },
 *             function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 'two');
 *                 }, 100);
 *             }
 *         ]);
 *         console.log(results);
 *         // results is equal to ['one','two'] even though
 *         // the second function had a shorter timeout.
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // an example using an object instead of an array
 * async () => {
 *     try {
 *         let results = await async.parallel({
 *             one: function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 1);
 *                 }, 200);
 *             },
 *            two: function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 2);
 *                 }, 100);
 *            }
 *         });
 *         console.log(results);
 *         // results is equal to: { one: 1, two: 2 }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function parallel(tasks, callback) {
    return _parallel(eachOf$1, tasks, callback);
}

/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 */
function parallelLimit(tasks, limit, callback) {
    return _parallel(eachOfLimit$2(limit), tasks, callback);
}

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Iterable} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {number} payload - an integer that specifies how many items are
 * passed to the worker function at a time. only applies if this is a
 * [cargo]{@link module:ControlFlow.cargo} object
 * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
 * a promise that rejects if an error occurs.
 * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns
 * a promise that rejects if an error occurs.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a function that sets a callback that is
 * called when the number of running workers hits the `concurrency` limit, and
 * further tasks will be queued.  If the callback is omitted, `q.saturated()`
 * returns a promise for the next occurrence.
 * @property {Function} unsaturated - a function that sets a callback that is
 * called when the number of running workers is less than the `concurrency` &
 * `buffer` limits, and further tasks will not be queued. If the callback is
 * omitted, `q.unsaturated()` returns a promise for the next occurrence.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a function that sets a callback that is called
 * when the last item from the `queue` is given to a `worker`. If the callback
 * is omitted, `q.empty()` returns a promise for the next occurrence.
 * @property {Function} drain - a function that sets a callback that is called
 * when the last item from the `queue` has returned from the `worker`. If the
 * callback is omitted, `q.drain()` returns a promise for the next occurrence.
 * @property {Function} error - a function that sets a callback that is called
 * when a task errors. Has the signature `function(error, task)`. If the
 * callback is omitted, `error()` returns a promise that rejects on the next
 * error.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 *
 * @example
 * const q = async.queue(worker, 2)
 * q.push(item1)
 * q.push(item2)
 * q.push(item3)
 * // queues are iterable, spread into an array to inspect
 * const items = [...q] // [item1, item2, item3]
 * // or use for of
 * for (let item of q) {
 *     console.log(item)
 * }
 *
 * q.drain(() => {
 *     console.log('all done')
 * })
 * // or
 * await q.drain()
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain(function() {
 *     console.log('all items have been processed');
 * });
 * // or await the end
 * await q.drain()
 *
 * // assign an error callback
 * q.error(function(err, task) {
 *     console.error('task experienced an error');
 * });
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * // callback is optional
 * q.push({name: 'bar'});
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
function queue (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue$1((items, cb) => {
        _worker(items[0], cb);
    }, concurrency, 1);
}

// Binary min-heap implementation used for priority queue.
// Implementation is stable, i.e. push time is considered for equal priorities
class Heap {
    constructor() {
        this.heap = [];
        this.pushCount = Number.MIN_SAFE_INTEGER;
    }

    get length() {
        return this.heap.length;
    }

    empty () {
        this.heap = [];
        return this;
    }

    percUp(index) {
        let p;

        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {
            let t = this.heap[index];
            this.heap[index] = this.heap[p];
            this.heap[p] = t;

            index = p;
        }
    }

    percDown(index) {
        let l;

        while ((l=leftChi(index)) < this.heap.length) {
            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {
                l = l+1;
            }

            if (smaller(this.heap[index], this.heap[l])) {
                break;
            }

            let t = this.heap[index];
            this.heap[index] = this.heap[l];
            this.heap[l] = t;

            index = l;
        }
    }

    push(node) {
        node.pushCount = ++this.pushCount;
        this.heap.push(node);
        this.percUp(this.heap.length-1);
    }

    unshift(node) {
        return this.heap.push(node);
    }

    shift() {
        let [top] = this.heap;

        this.heap[0] = this.heap[this.heap.length-1];
        this.heap.pop();
        this.percDown(0);

        return top;
    }

    toArray() {
        return [...this];
    }

    *[Symbol.iterator] () {
        for (let i = 0; i < this.heap.length; i++) {
            yield this.heap[i].data;
        }
    }

    remove (testFn) {
        let j = 0;
        for (let i = 0; i < this.heap.length; i++) {
            if (!testFn(this.heap[i])) {
                this.heap[j] = this.heap[i];
                j++;
            }
        }

        this.heap.splice(j);

        for (let i = parent(this.heap.length-1); i >= 0; i--) {
            this.percDown(i);
        }

        return this;
    }
}

function leftChi(i) {
    return (i<<1)+1;
}

function parent(i) {
    return ((i+1)>>1)-1;
}

function smaller(x, y) {
    if (x.priority !== y.priority) {
        return x.priority < y.priority;
    }
    else {
        return x.pushCount < y.pushCount;
    }
}

/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,
 *   except this returns a promise that rejects if an error occurs.
 * * The `unshift` and `unshiftAsync` methods were removed.
 */
function priorityQueue(worker, concurrency) {
    // Start with a normal queue
    var q = queue(worker, concurrency);

    var {
        push,
        pushAsync
    } = q;

    q._tasks = new Heap();
    q._createTaskItem = ({data, priority}, callback) => {
        return {
            data,
            priority,
            callback
        };
    };

    function createDataItems(tasks, priority) {
        if (!Array.isArray(tasks)) {
            return {data: tasks, priority};
        }
        return tasks.map(data => { return {data, priority}; });
    }

    // Override push to accept second parameter representing priority
    q.push = function(data, priority = 0, callback) {
        return push(createDataItems(data, priority), callback);
    };

    q.pushAsync = function(data, priority = 0, callback) {
        return pushAsync(createDataItems(data, priority), callback);
    };

    // Remove unshift functions
    delete q.unshift;
    delete q.unshiftAsync;

    return q;
}

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

var race$1 = awaitify(race, 2);

/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function reduceRight (array, memo, iteratee, callback) {
    var reversed = [...array].reverse();
    return reduce$1(reversed, memo, iteratee, callback);
}

/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */
function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push((error, ...cbArgs) => {
            let retVal = {};
            if (error) {
                retVal.error = error;
            }
            if (cbArgs.length > 0){
                var value = cbArgs;
                if (cbArgs.length <= 1) {
                    [value] = cbArgs;
                }
                retVal.value = value;
            }
            reflectCallback(null, retVal);
        });

        return _fn.apply(this, args);
    });
}

/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */
function reflectAll(tasks) {
    var results;
    if (Array.isArray(tasks)) {
        results = tasks.map(reflect);
    } else {
        results = {};
        Object.keys(tasks).forEach(key => {
            results[key] = reflect.call(this, tasks[key]);
        });
    }
    return results;
}

function reject$2(eachfn, arr, _iteratee, callback) {
    const iteratee = wrapAsync(_iteratee);
    return _filter(eachfn, arr, (value, cb) => {
        iteratee(value, (err, v) => {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.reject(fileList, fileExists, function(err, results) {
 *    // [ 'dir3/file6.txt' ]
 *    // results now equals an array of the non-existing files
 * });
 *
 * // Using Promises
 * async.reject(fileList, fileExists)
 * .then( results => {
 *     console.log(results);
 *     // [ 'dir3/file6.txt' ]
 *     // results now equals an array of the non-existing files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.reject(fileList, fileExists);
 *         console.log(results);
 *         // [ 'dir3/file6.txt' ]
 *         // results now equals an array of the non-existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function reject (coll, iteratee, callback) {
    return reject$2(eachOf$1, coll, iteratee, callback)
}
var reject$1 = awaitify(reject, 3);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectLimit (coll, limit, iteratee, callback) {
    return reject$2(eachOfLimit$2(limit), coll, iteratee, callback)
}
var rejectLimit$1 = awaitify(rejectLimit, 4);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectSeries (coll, iteratee, callback) {
    return reject$2(eachOfSeries$1, coll, iteratee, callback)
}
var rejectSeries$1 = awaitify(rejectSeries, 3);

function constant(value) {
    return function () {
        return value;
    }
}

/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 * @returns {Promise} a promise if no callback provided
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */
const DEFAULT_TIMES = 5;
const DEFAULT_INTERVAL = 0;

function retry(opts, task, callback) {
    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant(DEFAULT_INTERVAL)
    };

    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || promiseCallback();
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || promiseCallback();
    }

    if (typeof task !== 'function') {
        throw new Error("Invalid arguments for async.retry");
    }

    var _task = wrapAsync(task);

    var attempt = 1;
    function retryAttempt() {
        _task((err, ...args) => {
            if (err === false) return
            if (err && attempt++ < options.times &&
                (typeof options.errorFilter != 'function' ||
                    options.errorFilter(err))) {
                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));
            } else {
                callback(err, ...args);
            }
        });
    }

    retryAttempt();
    return callback[PROMISE_SYMBOL]
}

function parseTimes(acc, t) {
    if (typeof t === 'object') {
        acc.times = +t.times || DEFAULT_TIMES;

        acc.intervalFunc = typeof t.interval === 'function' ?
            t.interval :
            constant(+t.interval || DEFAULT_INTERVAL);

        acc.errorFilter = t.errorFilter;
    } else if (typeof t === 'number' || typeof t === 'string') {
        acc.times = +t || DEFAULT_TIMES;
    } else {
        throw new Error("Invalid arguments for async.retry");
    }
}

/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`, except for a `opts.arity` that
 * is the arity of the `task` function, defaulting to `task.length`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */
function retryable (opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    let arity = (opts && opts.arity) || task.length;
    if (isAsync(task)) {
        arity += 1;
    }
    var _task = wrapAsync(task);
    return initialParams((args, callback) => {
        if (args.length < arity - 1 || callback == null) {
            args.push(callback);
            callback = promiseCallback();
        }
        function taskFn(cb) {
            _task(...args, cb);
        }

        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);

        return callback[PROMISE_SYMBOL]
    });
}

/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @return {Promise} a promise, if no callback is passed
 * @example
 *
 * //Using Callbacks
 * async.series([
 *     function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ], function(err, results) {
 *     console.log(results);
 *     // results is equal to ['one','two']
 * });
 *
 * // an example using objects instead of arrays
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * });
 *
 * //Using Promises
 * async.series([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ]).then(results => {
 *     console.log(results);
 *     // results is equal to ['one','two']
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // an example using an object instead of an array
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }).then(results => {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.series([
 *             function(callback) {
 *                 setTimeout(function() {
 *                     // do some async task
 *                     callback(null, 'one');
 *                 }, 200);
 *             },
 *             function(callback) {
 *                 setTimeout(function() {
 *                     // then do another async task
 *                     callback(null, 'two');
 *                 }, 100);
 *             }
 *         ]);
 *         console.log(results);
 *         // results is equal to ['one','two']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // an example using an object instead of an array
 * async () => {
 *     try {
 *         let results = await async.parallel({
 *             one: function(callback) {
 *                 setTimeout(function() {
 *                     // do some async task
 *                     callback(null, 1);
 *                 }, 200);
 *             },
 *            two: function(callback) {
 *                 setTimeout(function() {
 *                     // then do another async task
 *                     callback(null, 2);
 *                 }, 100);
 *            }
 *         });
 *         console.log(results);
 *         // results is equal to: { one: 1, two: 2 }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function series(tasks, callback) {
    return _parallel(eachOfSeries$1, tasks, callback);
}

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // true
 *        // result is true since some file in the list exists
 *    }
 *);
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // false
 *        // result is false since none of the files exists
 *    }
 *);
 *
 * // Using Promises
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since some file in the list exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since none of the files exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since some file in the list exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since none of the files exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function some(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)
}
var some$1 = awaitify(some, 3);

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someLimit(coll, limit, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfLimit$2(limit), coll, iteratee, callback)
}
var someLimit$1 = awaitify(someLimit, 4);

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someSeries(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)
}
var someSeries$1 = awaitify(someSeries, 3);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback passed
 * @example
 *
 * // bigfile.txt is a file that is 251100 bytes in size
 * // mediumfile.txt is a file that is 11000 bytes in size
 * // smallfile.txt is a file that is 121 bytes in size
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) return callback(getFileSizeErr);
 *         callback(null, fileSize);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // descending order
 * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) {
 *             return callback(getFileSizeErr);
 *         }
 *         callback(null, fileSize * -1);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']
 *         }
 *     }
 * );
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *             // [ Error: ENOENT: no such file or directory ]
 *         } else {
 *             console.log(results);
 *         }
 *     }
 * );
 *
 * // Using Promises
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now the original array of files sorted by
 *     // file size (ascending by default), e.g.
 *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *         // results is now the original array of files sorted by
 *         // file size (ascending by default), e.g.
 *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * // Error handling
 * async () => {
 *     try {
 *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return map$1(coll, (x, iterCb) => {
        _iteratee(x, (err, criteria) => {
            if (err) return iterCb(err);
            iterCb(err, {value: x, criteria});
        });
    }, (err, results) => {
        if (err) return callback(err);
        callback(null, results.sort(comparator).map(v => v.value));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}
var sortBy$1 = awaitify(sortBy, 3);

/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */
function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);

    return initialParams((args, callback) => {
        var timedOut = false;
        var timer;

        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error  = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) {
                error.info = info;
            }
            timedOut = true;
            callback(error);
        }

        args.push((...cbArgs) => {
            if (!timedOut) {
                callback(...cbArgs);
                clearTimeout(timer);
            }
        });

        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn(...args);
    });
}

function range(size) {
    var result = Array(size);
    while (size--) {
        result[size] = size;
    }
    return result;
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */
function timesLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(range(count), limit, _iteratee, callback);
}

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */
function times (n, iteratee, callback) {
    return timesLimit(n, Infinity, iteratee, callback)
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */
function timesSeries (n, iteratee, callback) {
    return timesLimit(n, 1, iteratee, callback)
}

/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in parallel, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 *
 * // helper function that returns human-readable size format from bytes
 * function formatBytes(bytes, decimals = 2) {
 *   // implementation not included for brevity
 *   return humanReadbleFilesize;
 * }
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 *
 * // asynchronous function that returns the file size, transformed to human-readable format
 * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
 * function transformFileSize(acc, value, key, callback) {
 *     fs.stat(value, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         acc[key] = formatBytes(stat.size);
 *         callback(null);
 *     });
 * }
 *
 * // Using callbacks
 * async.transform(fileList, transformFileSize, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 *     }
 * });
 *
 * // Using Promises
 * async.transform(fileList, transformFileSize)
 * .then(result => {
 *     console.log(result);
 *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let result = await async.transform(fileList, transformFileSize);
 *         console.log(result);
 *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 *
 * // helper function that returns human-readable size format from bytes
 * function formatBytes(bytes, decimals = 2) {
 *   // implementation not included for brevity
 *   return humanReadbleFilesize;
 * }
 *
 * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };
 *
 * // asynchronous function that returns the file size, transformed to human-readable format
 * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
 * function transformFileSize(acc, value, key, callback) {
 *     fs.stat(value, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         acc[key] = formatBytes(stat.size);
 *         callback(null);
 *     });
 * }
 *
 * // Using callbacks
 * async.transform(fileMap, transformFileSize, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 *     }
 * });
 *
 * // Using Promises
 * async.transform(fileMap, transformFileSize)
 * .then(result => {
 *     console.log(result);
 *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.transform(fileMap, transformFileSize);
 *         console.log(result);
 *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function transform (coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3 && typeof accumulator === 'function') {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = Array.isArray(coll) ? [] : {};
    }
    callback = once(callback || promiseCallback());
    var _iteratee = wrapAsync(iteratee);

    eachOf$1(coll, (v, k, cb) => {
        _iteratee(accumulator, v, k, cb);
    }, err => callback(err, accumulator));
    return callback[PROMISE_SYMBOL]
}

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    return eachSeries$1(tasks, (task, taskCb) => {
        wrapAsync(task)((err, ...args) => {
            if (err === false) return taskCb(err);

            if (args.length < 2) {
                [result] = args;
            } else {
                result = args;
            }
            error = err;
            taskCb(err ? null : {});
        });
    }, () => callback(error, result));
}

var tryEach$1 = awaitify(tryEach);

/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */
function unmemoize(fn) {
    return (...args) => {
        return (fn.unmemoized || fn)(...args);
    };
}

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with (callback).
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function test(cb) { cb(null, count < 5); },
 *     function iter(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results = [];

    function next(err, ...rest) {
        if (err) return callback(err);
        results = rest;
        if (err === false) return;
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return _test(check);
}
var whilst$1 = awaitify(whilst, 3);

/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with (callback).
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 * const results = []
 * let finished = false
 * async.until(function test(cb) {
 *     cb(null, finished)
 * }, function iter(next) {
 *     fetchPage(url, (err, body) => {
 *         if (err) return next(err)
 *         results = results.concat(body.objects)
 *         finished = !!body.next
 *         next(err)
 *     })
 * }, function done (err) {
 *     // all pages have been fetched
 * })
 */
function until(test, iteratee, callback) {
    const _test = wrapAsync(test);
    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);
}

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
function waterfall (tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        task(...args, onlyOnce(next));
    }

    function next(err, ...args) {
        if (err === false) return
        if (err || taskIndex === tasks.length) {
            return callback(err, ...args);
        }
        nextTask(args);
    }

    nextTask([]);
}

var waterfall$1 = awaitify(waterfall);

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */


var index = {
    apply,
    applyEach,
    applyEachSeries,
    asyncify,
    auto,
    autoInject,
    cargo: cargo$1,
    cargoQueue: cargo,
    compose,
    concat: concat$1,
    concatLimit: concatLimit$1,
    concatSeries: concatSeries$1,
    constant: constant$1,
    detect: detect$1,
    detectLimit: detectLimit$1,
    detectSeries: detectSeries$1,
    dir,
    doUntil,
    doWhilst: doWhilst$1,
    each,
    eachLimit: eachLimit$1,
    eachOf: eachOf$1,
    eachOfLimit: eachOfLimit$1,
    eachOfSeries: eachOfSeries$1,
    eachSeries: eachSeries$1,
    ensureAsync,
    every: every$1,
    everyLimit: everyLimit$1,
    everySeries: everySeries$1,
    filter: filter$1,
    filterLimit: filterLimit$1,
    filterSeries: filterSeries$1,
    forever: forever$1,
    groupBy,
    groupByLimit: groupByLimit$1,
    groupBySeries,
    log,
    map: map$1,
    mapLimit: mapLimit$1,
    mapSeries: mapSeries$1,
    mapValues,
    mapValuesLimit: mapValuesLimit$1,
    mapValuesSeries,
    memoize,
    nextTick,
    parallel,
    parallelLimit,
    priorityQueue,
    queue,
    race: race$1,
    reduce: reduce$1,
    reduceRight,
    reflect,
    reflectAll,
    reject: reject$1,
    rejectLimit: rejectLimit$1,
    rejectSeries: rejectSeries$1,
    retry,
    retryable,
    seq,
    series,
    setImmediate: setImmediate$1,
    some: some$1,
    someLimit: someLimit$1,
    someSeries: someSeries$1,
    sortBy: sortBy$1,
    timeout,
    times,
    timesLimit,
    timesSeries,
    transform,
    tryEach: tryEach$1,
    unmemoize,
    until,
    waterfall: waterfall$1,
    whilst: whilst$1,

    // aliases
    all: every$1,
    allLimit: everyLimit$1,
    allSeries: everySeries$1,
    any: some$1,
    anyLimit: someLimit$1,
    anySeries: someSeries$1,
    find: detect$1,
    findLimit: detectLimit$1,
    findSeries: detectSeries$1,
    flatMap: concat$1,
    flatMapLimit: concatLimit$1,
    flatMapSeries: concatSeries$1,
    forEach: each,
    forEachSeries: eachSeries$1,
    forEachLimit: eachLimit$1,
    forEachOf: eachOf$1,
    forEachOfSeries: eachOfSeries$1,
    forEachOfLimit: eachOfLimit$1,
    inject: reduce$1,
    foldl: reduce$1,
    foldr: reduceRight,
    select: filter$1,
    selectLimit: filterLimit$1,
    selectSeries: filterSeries$1,
    wrapSync: asyncify,
    during: whilst$1,
    doDuring: doWhilst$1
};

var async = /*#__PURE__*/Object.freeze({
    __proto__: null,
    all: every$1,
    allLimit: everyLimit$1,
    allSeries: everySeries$1,
    any: some$1,
    anyLimit: someLimit$1,
    anySeries: someSeries$1,
    apply: apply,
    applyEach: applyEach,
    applyEachSeries: applyEachSeries,
    asyncify: asyncify,
    auto: auto,
    autoInject: autoInject,
    cargo: cargo$1,
    cargoQueue: cargo,
    compose: compose,
    concat: concat$1,
    concatLimit: concatLimit$1,
    concatSeries: concatSeries$1,
    constant: constant$1,
    'default': index,
    detect: detect$1,
    detectLimit: detectLimit$1,
    detectSeries: detectSeries$1,
    dir: dir,
    doDuring: doWhilst$1,
    doUntil: doUntil,
    doWhilst: doWhilst$1,
    during: whilst$1,
    each: each,
    eachLimit: eachLimit$1,
    eachOf: eachOf$1,
    eachOfLimit: eachOfLimit$1,
    eachOfSeries: eachOfSeries$1,
    eachSeries: eachSeries$1,
    ensureAsync: ensureAsync,
    every: every$1,
    everyLimit: everyLimit$1,
    everySeries: everySeries$1,
    filter: filter$1,
    filterLimit: filterLimit$1,
    filterSeries: filterSeries$1,
    find: detect$1,
    findLimit: detectLimit$1,
    findSeries: detectSeries$1,
    flatMap: concat$1,
    flatMapLimit: concatLimit$1,
    flatMapSeries: concatSeries$1,
    foldl: reduce$1,
    foldr: reduceRight,
    forEach: each,
    forEachLimit: eachLimit$1,
    forEachOf: eachOf$1,
    forEachOfLimit: eachOfLimit$1,
    forEachOfSeries: eachOfSeries$1,
    forEachSeries: eachSeries$1,
    forever: forever$1,
    groupBy: groupBy,
    groupByLimit: groupByLimit$1,
    groupBySeries: groupBySeries,
    inject: reduce$1,
    log: log,
    map: map$1,
    mapLimit: mapLimit$1,
    mapSeries: mapSeries$1,
    mapValues: mapValues,
    mapValuesLimit: mapValuesLimit$1,
    mapValuesSeries: mapValuesSeries,
    memoize: memoize,
    nextTick: nextTick,
    parallel: parallel,
    parallelLimit: parallelLimit,
    priorityQueue: priorityQueue,
    queue: queue,
    race: race$1,
    reduce: reduce$1,
    reduceRight: reduceRight,
    reflect: reflect,
    reflectAll: reflectAll,
    reject: reject$1,
    rejectLimit: rejectLimit$1,
    rejectSeries: rejectSeries$1,
    retry: retry,
    retryable: retryable,
    select: filter$1,
    selectLimit: filterLimit$1,
    selectSeries: filterSeries$1,
    seq: seq,
    series: series,
    setImmediate: setImmediate$1,
    some: some$1,
    someLimit: someLimit$1,
    someSeries: someSeries$1,
    sortBy: sortBy$1,
    timeout: timeout,
    times: times,
    timesLimit: timesLimit,
    timesSeries: timesSeries,
    transform: transform,
    tryEach: tryEach$1,
    unmemoize: unmemoize,
    until: until,
    waterfall: waterfall$1,
    whilst: whilst$1,
    wrapSync: asyncify
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(async);

var Utils = {};

/**
 * Portions of this file are derived from prior work.
 *
 * See NOTICE.md for full license text.
 *
 * Derived from:
 * - uuid, Copyright (c) 2010-2016 Robert Kieffer and other contributors
 */
Object.defineProperty(Utils, "__esModule", { value: true });
Utils.reviveData = Utils.uuid = Utils.octetCompare = Utils.sleep = Utils.shuffle = Utils.promiseAny = Utils.timeoutPromise = void 0;
// tslint:disable no-bitwise
const platform_1$7 = browser;
const bth = [];
for (let i = 0; i < 256; ++i) {
    bth[i] = (i + 0x100).toString(16).substr(1);
}
async function timeoutPromise(target, delay, rejectValue = () => undefined) {
    let timeoutRef;
    const result = await Promise.race([
        target,
        new Promise((resolve, reject) => {
            timeoutRef = setTimeout(() => reject(rejectValue()), delay);
        })
    ]);
    clearTimeout(timeoutRef);
    return result;
}
Utils.timeoutPromise = timeoutPromise;
async function promiseAny(promises) {
    try {
        const errors = await Promise.all(promises.map(p => {
            return p.then(val => Promise.reject(val), err => Promise.resolve(err));
        }));
        return Promise.reject(errors);
    }
    catch (val) {
        return Promise.resolve(val);
    }
}
Utils.promiseAny = promiseAny;
function shuffle(array) {
    let end = array.length;
    while (end > 0) {
        const selected = Math.floor(Math.random() * end);
        end -= 1;
        const tmp = array[end];
        array[end] = array[selected];
        array[selected] = tmp;
    }
    return array;
}
Utils.shuffle = shuffle;
async function sleep(time) {
    return new Promise(resolve => {
        setTimeout(() => resolve(), time);
    });
}
Utils.sleep = sleep;
function octetCompare(str1, str2) {
    const b1 = typeof str1 === 'string' ? platform_1$7.Buffer.from(str1, 'utf8') : str1;
    const b2 = typeof str2 === 'string' ? platform_1$7.Buffer.from(str2, 'utf8') : str2;
    return b1.compare(b2);
}
Utils.octetCompare = octetCompare;
function uuid() {
    const buf = (0, platform_1$7.randomBytes)(16);
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    buf[6] = (buf[6] & 0x0f) | 0x40;
    buf[8] = (buf[8] & 0x3f) | 0x80;
    let i = 0;
    return [
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i]]
    ].join('');
}
Utils.uuid = uuid;
const DATE_FIELDS = new Set([
    'date',
    'expires',
    'httpUploadRetry',
    'idleSince',
    'published',
    'since',
    'stamp',
    'timestamp',
    'updated',
    'utc'
]);
const ISO_DT = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)(?:Z|((\+|-)([\d|:]*)))?$/;
function reviveData(key, value) {
    if (DATE_FIELDS.has(key) && value && typeof value === 'string' && ISO_DT.test(value)) {
        return new Date(value);
    }
    if (value &&
        typeof value === 'object' &&
        value.type === 'Buffer' &&
        Array.isArray(value.data)) {
        return platform_1$7.Buffer.from(value);
    }
    return value;
}
Utils.reviveData = reviveData;

Object.defineProperty(Session, "__esModule", { value: true });
const async_1$2 = require$$1;
const Constants_1$h = Constants;
const Utils_1$7 = Utils;
const badRequest = { condition: Constants_1$h.StanzaErrorCondition.BadRequest };
const unsupportedInfo = {
    condition: Constants_1$h.StanzaErrorCondition.FeatureNotImplemented,
    jingleError: Constants_1$h.JingleErrorCondition.UnsupportedInfo,
    type: 'modify'
};
class JingleSession {
    constructor(opts) {
        this.parent = opts.parent;
        this.sid = opts.sid || (0, Utils_1$7.uuid)();
        this.peerID = opts.peerID;
        this.role = opts.initiator ? Constants_1$h.JingleSessionRole.Initiator : Constants_1$h.JingleSessionRole.Responder;
        this._sessionState = 'starting';
        this._connectionState = 'starting';
        // We track the intial pending description types in case
        // of the need for a tie-breaker.
        this.pendingApplicationTypes = opts.applicationTypes || [];
        this.pendingAction = undefined;
        // Here is where we'll ensure that all actions are processed
        // in order, even if a particular action requires async handling.
        this.processingQueue = (0, async_1$2.priorityQueue)(async (task, next) => {
            if (this.state === 'ended') {
                // Don't process anything once the session has been ended
                if (task.type === 'local' && task.reject) {
                    task.reject(new Error('Session ended'));
                }
                if (next) {
                    next();
                }
                return;
            }
            if (task.type === 'local') {
                this._log('debug', 'Processing local action:', task.name);
                try {
                    const res = await task.handler();
                    task.resolve(res);
                }
                catch (err) {
                    task.reject(err);
                }
                if (next) {
                    next();
                }
                return;
            }
            const { action, changes, cb } = task;
            this._log('debug', 'Processing remote action:', action);
            return new Promise(resolve => {
                const done = (err, result) => {
                    cb(err, result);
                    if (next) {
                        next();
                    }
                    resolve();
                };
                switch (action) {
                    case Constants_1$h.JingleAction.ContentAccept:
                        return this.onContentAccept(changes, done);
                    case Constants_1$h.JingleAction.ContentAdd:
                        return this.onContentAdd(changes, done);
                    case Constants_1$h.JingleAction.ContentModify:
                        return this.onContentModify(changes, done);
                    case Constants_1$h.JingleAction.ContentReject:
                        return this.onContentReject(changes, done);
                    case Constants_1$h.JingleAction.ContentRemove:
                        return this.onContentRemove(changes, done);
                    case Constants_1$h.JingleAction.DescriptionInfo:
                        return this.onDescriptionInfo(changes, done);
                    case Constants_1$h.JingleAction.SecurityInfo:
                        return this.onSecurityInfo(changes, done);
                    case Constants_1$h.JingleAction.SessionAccept:
                        return this.onSessionAccept(changes, done);
                    case Constants_1$h.JingleAction.SessionInfo:
                        return this.onSessionInfo(changes, done);
                    case Constants_1$h.JingleAction.SessionInitiate:
                        return this.onSessionInitiate(changes, done);
                    case Constants_1$h.JingleAction.SessionTerminate:
                        return this.onSessionTerminate(changes, done);
                    case Constants_1$h.JingleAction.TransportAccept:
                        return this.onTransportAccept(changes, done);
                    case Constants_1$h.JingleAction.TransportInfo:
                        return this.onTransportInfo(changes, done);
                    case Constants_1$h.JingleAction.TransportReject:
                        return this.onTransportReject(changes, done);
                    case Constants_1$h.JingleAction.TransportReplace:
                        return this.onTransportReplace(changes, done);
                    default:
                        this._log('error', 'Invalid or unsupported action: ' + action);
                        done({ condition: Constants_1$h.StanzaErrorCondition.BadRequest });
                }
            });
        }, 1);
    }
    get isInitiator() {
        return this.role === Constants_1$h.JingleSessionRole.Initiator;
    }
    get peerRole() {
        return this.isInitiator ? Constants_1$h.JingleSessionRole.Responder : Constants_1$h.JingleSessionRole.Initiator;
    }
    get state() {
        return this._sessionState;
    }
    set state(value) {
        if (value !== this._sessionState) {
            this._log('info', 'Changing session state to: ' + value);
            this._sessionState = value;
            if (this.parent) {
                this.parent.emit('sessionState', this, value);
            }
        }
    }
    get connectionState() {
        return this._connectionState;
    }
    set connectionState(value) {
        if (value !== this._connectionState) {
            this._log('info', 'Changing connection state to: ' + value);
            this._connectionState = value;
            if (this.parent) {
                this.parent.emit('connectionState', this, value);
            }
        }
    }
    send(action, data) {
        data = data || {};
        data.sid = this.sid;
        data.action = action;
        const requirePending = new Set([
            Constants_1$h.JingleAction.ContentAccept,
            Constants_1$h.JingleAction.ContentAdd,
            Constants_1$h.JingleAction.ContentModify,
            Constants_1$h.JingleAction.ContentReject,
            Constants_1$h.JingleAction.ContentRemove,
            Constants_1$h.JingleAction.SessionAccept,
            Constants_1$h.JingleAction.SessionInitiate,
            Constants_1$h.JingleAction.TransportAccept,
            Constants_1$h.JingleAction.TransportReject,
            Constants_1$h.JingleAction.TransportReplace
        ]);
        if (requirePending.has(action)) {
            this.pendingAction = action;
        }
        else {
            this.pendingAction = undefined;
        }
        this.parent.signal(this, {
            id: (0, Utils_1$7.uuid)(),
            jingle: data,
            to: this.peerID,
            type: 'set'
        });
    }
    processLocal(name, handler) {
        return new Promise((resolve, reject) => {
            this.processingQueue.push({
                handler,
                name,
                reject,
                resolve,
                type: 'local'
            }, 1 // Process local requests first
            );
        });
    }
    process(action, changes, cb) {
        this.processingQueue.push({
            action,
            cb,
            changes,
            type: 'remote'
        }, 2 // Process remote requests second
        );
    }
    start(_opts, _next) {
        this._log('error', 'Can not start base sessions');
        this.end('unsupported-applications', true);
    }
    accept(_opts, _next) {
        this._log('error', 'Can not accept base sessions');
        this.end('unsupported-applications');
    }
    cancel() {
        this.end('cancel');
    }
    decline() {
        this.end('decline');
    }
    end(reason = 'success', silent = false) {
        this.state = 'ended';
        this.processingQueue.kill();
        if (typeof reason === 'string') {
            reason = {
                condition: reason
            };
        }
        if (!silent) {
            this.send('session-terminate', {
                reason
            });
        }
        this.parent.emit('terminated', this, reason);
        this.parent.forgetSession(this);
    }
    _log(level, message, ...data) {
        if (this.parent) {
            message = this.sid + ': ' + message;
            this.parent.emit('log', level, message, ...data);
            this.parent.emit('log:' + level, message, ...data);
        }
    }
    onSessionInitiate(changes, cb) {
        cb();
    }
    onSessionAccept(changes, cb) {
        cb();
    }
    onSessionTerminate(changes, cb) {
        this.end(changes.reason, true);
        cb();
    }
    // It is mandatory to reply to a session-info action with
    // an unsupported-info error if the info isn't recognized.
    //
    // However, a session-info action with no associated payload
    // is acceptable (works like a ping).
    onSessionInfo(changes, cb) {
        if (!changes.info) {
            cb();
        }
        else {
            cb(unsupportedInfo);
        }
    }
    // It is mandatory to reply to a security-info action with
    // an unsupported-info error if the info isn't recognized.
    onSecurityInfo(changes, cb) {
        cb(unsupportedInfo);
    }
    // It is mandatory to reply to a description-info action with
    // an unsupported-info error if the info isn't recognized.
    onDescriptionInfo(changes, cb) {
        cb(unsupportedInfo);
    }
    // It is mandatory to reply to a transport-info action with
    // an unsupported-info error if the info isn't recognized.
    onTransportInfo(changes, cb) {
        cb(unsupportedInfo);
    }
    // It is mandatory to reply to a content-add action with either
    // a content-accept or content-reject.
    onContentAdd(changes, cb) {
        // Allow ack for the content-add to be sent.
        cb();
        this.send(Constants_1$h.JingleAction.ContentReject, {
            reason: {
                condition: Constants_1$h.JingleReasonCondition.FailedApplication,
                text: 'content-add is not supported'
            }
        });
    }
    onContentAccept(changes, cb) {
        cb(badRequest);
    }
    onContentReject(changes, cb) {
        cb(badRequest);
    }
    onContentModify(changes, cb) {
        cb(badRequest);
    }
    onContentRemove(changes, cb) {
        cb(badRequest);
    }
    // It is mandatory to reply to a transport-add action with either
    // a transport-accept or transport-reject.
    onTransportReplace(changes, cb) {
        // Allow ack for the transport-replace be sent.
        cb();
        this.send(Constants_1$h.JingleAction.TransportReject, {
            reason: {
                condition: Constants_1$h.JingleReasonCondition.FailedTransport,
                text: 'transport-replace is not supported'
            }
        });
    }
    onTransportAccept(changes, cb) {
        cb(badRequest);
    }
    onTransportReject(changes, cb) {
        cb(badRequest);
    }
}
Session.default = JingleSession;

Object.defineProperty(ICESession$1, "__esModule", { value: true });
const tslib_1$g = require$$0;
const SDPUtils = (0, tslib_1$g.__importStar)(sdp.exports);
const Constants_1$g = Constants;
const Namespaces_1$1x = Namespaces;
const Intermediate_1$2 = Intermediate;
const Protocol_1$2 = Protocol$1a;
const Session_1$1 = (0, tslib_1$g.__importDefault)(Session);
class ICESession extends Session_1$1.default {
    constructor(opts) {
        super(opts);
        this.bitrateLimit = 0;
        this.candidateBuffer = [];
        this.transportType = Namespaces_1$1x.NS_JINGLE_ICE_UDP_1;
        this.restartingIce = false;
        this.usingRelay = false;
        this.maxRelayBandwidth = opts.maxRelayBandwidth;
        this.pc = this.parent.createPeerConnection(this, {
            ...opts.config,
            iceServers: opts.iceServers
        });
        this.pc.oniceconnectionstatechange = () => {
            this.onIceStateChange();
        };
        this.pc.onicecandidate = e => {
            if (e.candidate) {
                this.onIceCandidate(e);
            }
            else {
                this.onIceEndOfCandidates();
            }
        };
        this.restrictRelayBandwidth();
    }
    end(reason = 'success', silent = false) {
        this.pc.close();
        super.end(reason, silent);
    }
    /* actually do an ice restart */
    async restartIce() {
        // only initiators do an ice-restart to avoid conflicts.
        if (!this.isInitiator) {
            return;
        }
        if (this._maybeRestartingIce !== undefined) {
            clearTimeout(this._maybeRestartingIce);
        }
        this.restartingIce = true;
        try {
            await this.processLocal('restart-ice', async () => {
                const offer = await this.pc.createOffer({ iceRestart: true });
                // extract new ufrag / pwd, send transport-info with just that.
                const json = (0, Intermediate_1$2.importFromSDP)(offer.sdp);
                this.send(Constants_1$g.JingleAction.TransportInfo, {
                    contents: json.media.map(media => ({
                        creator: Constants_1$g.JingleSessionRole.Initiator,
                        name: media.mid,
                        transport: (0, Protocol_1$2.convertIntermediateToTransport)(media, this.transportType)
                    })),
                    sid: this.sid
                });
                await this.pc.setLocalDescription(offer);
            });
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC offer', err);
            this.end(Constants_1$g.JingleReasonCondition.FailedTransport, true);
        }
    }
    // set the maximum bitrate. Only supported in Chrome and Firefox right now.
    async setMaximumBitrate(maximumBitrate) {
        if (this.maximumBitrate) {
            // potentially take into account bandwidth restrictions due to using TURN.
            maximumBitrate = Math.min(maximumBitrate, this.maximumBitrate);
        }
        this.currentBitrate = maximumBitrate;
        // changes the maximum bandwidth using RTCRtpSender.setParameters.
        const sender = this.pc.getSenders().find(s => !!s.track && s.track.kind === 'video');
        if (!sender || !sender.getParameters) {
            return;
        }
        try {
            await this.processLocal('set-bitrate', async () => {
                const parameters = sender.getParameters();
                if (!parameters.encodings || !parameters.encodings.length) {
                    parameters.encodings = [{}];
                }
                if (maximumBitrate === 0) {
                    delete parameters.encodings[0].maxBitrate;
                }
                else {
                    parameters.encodings[0].maxBitrate = maximumBitrate;
                }
                await sender.setParameters(parameters);
            });
        }
        catch (err) {
            this._log('error', 'Set maximumBitrate failed', err);
        }
    }
    // ----------------------------------------------------------------
    // Jingle action handers
    // ----------------------------------------------------------------
    async onTransportInfo(changes, cb) {
        if (changes.contents &&
            changes.contents[0] &&
            changes.contents[0].transport.gatheringComplete) {
            const candidate = { sdpMid: changes.contents[0].name, candidate: '' };
            try {
                if (this.pc.signalingState === 'stable') {
                    await this.pc.addIceCandidate(candidate);
                }
                else {
                    this.candidateBuffer.push(candidate);
                }
            }
            catch (err) {
                this._log('debug', 'Could not add null end-of-candidate');
            }
            finally {
                cb();
            }
            return;
        }
        // detect an ice restart.
        if (this.pc.remoteDescription) {
            const remoteDescription = this.pc.remoteDescription;
            const remoteJSON = (0, Intermediate_1$2.importFromSDP)(remoteDescription.sdp);
            const remoteMedia = remoteJSON.media.find(m => m.mid === changes.contents[0].name);
            const currentUsernameFragment = remoteMedia.iceParameters.usernameFragment;
            const remoteUsernameFragment = changes.contents[0].transport
                .usernameFragment;
            if (remoteUsernameFragment && currentUsernameFragment !== remoteUsernameFragment) {
                for (const [idx, content] of changes.contents.entries()) {
                    const transport = content.transport;
                    remoteJSON.media[idx].iceParameters = {
                        password: transport.password,
                        usernameFragment: transport.usernameFragment
                    };
                    remoteJSON.media[idx].candidates = [];
                }
                try {
                    await this.pc.setRemoteDescription({
                        type: remoteDescription.type,
                        sdp: (0, Intermediate_1$2.exportToSDP)(remoteJSON)
                    });
                    await this.processBufferedCandidates();
                    if (remoteDescription.type === 'offer') {
                        const answer = await this.pc.createAnswer();
                        await this.pc.setLocalDescription(answer);
                        const json = (0, Intermediate_1$2.importFromSDP)(answer.sdp);
                        this.send(Constants_1$g.JingleAction.TransportInfo, {
                            contents: json.media.map(media => ({
                                creator: Constants_1$g.JingleSessionRole.Initiator,
                                name: media.mid,
                                transport: (0, Protocol_1$2.convertIntermediateToTransport)(media, this.transportType)
                            })),
                            sid: this.sid
                        });
                    }
                    else {
                        this.restartingIce = false;
                    }
                }
                catch (err) {
                    this._log('error', 'Could not do remote ICE restart', err);
                    cb(err);
                    this.end(Constants_1$g.JingleReasonCondition.FailedTransport);
                    return;
                }
            }
        }
        const all = (changes.contents || []).map(content => {
            const sdpMid = content.name;
            const results = (content.transport.candidates || []).map(async (json) => {
                const candidate = SDPUtils.writeCandidate((0, Protocol_1$2.convertCandidateToIntermediate)(json));
                if (this.pc.remoteDescription && this.pc.signalingState === 'stable') {
                    try {
                        await this.pc.addIceCandidate({ sdpMid, candidate });
                    }
                    catch (err) {
                        this._log('error', 'Could not add ICE candidate', err);
                    }
                }
                else {
                    this.candidateBuffer.push({ sdpMid, candidate });
                }
            });
            return Promise.all(results);
        });
        try {
            await Promise.all(all);
            cb();
        }
        catch (err) {
            this._log('error', `Could not process transport-info: ${err}`);
            cb(err);
        }
    }
    async onSessionAccept(changes, cb) {
        this.state = 'active';
        const json = (0, Protocol_1$2.convertRequestToIntermediate)(changes, this.peerRole);
        const sdp = (0, Intermediate_1$2.exportToSDP)(json);
        try {
            await this.pc.setRemoteDescription({ type: 'answer', sdp });
            await this.processBufferedCandidates();
            this.parent.emit('accepted', this, undefined);
            cb();
        }
        catch (err) {
            this._log('error', `Could not process WebRTC answer: ${err}`);
            cb({ condition: 'general-error' });
        }
    }
    onSessionTerminate(changes, cb) {
        this._log('info', 'Terminating session');
        this.pc.close();
        super.end(changes.reason, true);
        cb();
    }
    // ----------------------------------------------------------------
    // ICE action handers
    // ----------------------------------------------------------------
    onIceCandidate(e) {
        if (!e.candidate || !e.candidate.candidate) {
            return;
        }
        const candidate = SDPUtils.parseCandidate(e.candidate.candidate);
        const jingle = {
            contents: [
                {
                    creator: Constants_1$g.JingleSessionRole.Initiator,
                    name: e.candidate.sdpMid,
                    transport: {
                        candidates: [(0, Protocol_1$2.convertIntermediateToCandidate)(candidate)],
                        transportType: this.transportType,
                        usernameFragment: candidate.usernameFragment
                    }
                }
            ]
        };
        this._log('info', 'Discovered new ICE candidate', jingle);
        this.send(Constants_1$g.JingleAction.TransportInfo, jingle);
    }
    onIceEndOfCandidates() {
        this._log('info', 'ICE end of candidates');
        const json = (0, Intermediate_1$2.importFromSDP)(this.pc.localDescription.sdp);
        const firstMedia = json.media[0];
        // signal end-of-candidates with our first media mid/ufrag
        this.send(Constants_1$g.JingleAction.TransportInfo, {
            contents: [
                {
                    creator: Constants_1$g.JingleSessionRole.Initiator,
                    name: firstMedia.mid,
                    transport: {
                        gatheringComplete: true,
                        transportType: this.transportType,
                        usernameFragment: firstMedia.iceParameters.usernameFragment
                    }
                }
            ]
        });
    }
    onIceStateChange() {
        switch (this.pc.iceConnectionState) {
            case 'checking':
                this.connectionState = 'connecting';
                break;
            case 'completed':
            case 'connected':
                this.connectionState = 'connected';
                break;
            case 'disconnected':
                if (this.pc.signalingState === 'stable') {
                    this.connectionState = 'interrupted';
                }
                else {
                    this.connectionState = 'disconnected';
                }
                if (this.restartingIce) {
                    this.end(Constants_1$g.JingleReasonCondition.FailedTransport);
                    return;
                }
                this.maybeRestartIce();
                break;
            case 'failed':
                if (this.connectionState === 'failed' || this.restartingIce) {
                    this.end(Constants_1$g.JingleReasonCondition.FailedTransport);
                    return;
                }
                this.connectionState = 'failed';
                this.restartIce();
                break;
            case 'closed':
                this.connectionState = 'disconnected';
                if (this.restartingIce) {
                    this.end(Constants_1$g.JingleReasonCondition.FailedTransport);
                }
                else {
                    this.end();
                }
                break;
        }
    }
    async processBufferedCandidates() {
        for (const candidate of this.candidateBuffer) {
            try {
                await this.pc.addIceCandidate(candidate);
            }
            catch (err) {
                this._log('error', 'Could not add ICE candidate', err);
            }
        }
        this.candidateBuffer = [];
    }
    /* when using TURN, we might want to restrict the bandwidth
     * to the value specified by MAX_RELAY_BANDWIDTH
     * in order to prevent sending excessive traffic through
     * the TURN server.
     */
    restrictRelayBandwidth() {
        this.pc.addEventListener('iceconnectionstatechange', async () => {
            if (this.pc.iceConnectionState !== 'completed' &&
                this.pc.iceConnectionState !== 'connected') {
                return;
            }
            const stats = await this.pc.getStats();
            let activeCandidatePair;
            stats.forEach(report => {
                if (report.type === 'transport') {
                    activeCandidatePair = stats.get(report.selectedCandidatePairId);
                }
            });
            // Fallback for Firefox.
            if (!activeCandidatePair) {
                stats.forEach(report => {
                    if (report.type === 'candidate-pair' && report.selected) {
                        activeCandidatePair = report;
                    }
                });
            }
            if (!activeCandidatePair) {
                return;
            }
            let isRelay = false;
            let localCandidateType = '';
            let remoteCandidateType = '';
            if (activeCandidatePair.remoteCandidateId) {
                const remoteCandidate = stats.get(activeCandidatePair.remoteCandidateId);
                if (remoteCandidate) {
                    remoteCandidateType = remoteCandidate.candidateType;
                }
            }
            if (activeCandidatePair.localCandidateId) {
                const localCandidate = stats.get(activeCandidatePair.localCandidateId);
                if (localCandidate) {
                    localCandidateType = localCandidate.candidateType;
                }
            }
            if (localCandidateType === 'relay' || remoteCandidateType === 'relay') {
                isRelay = true;
            }
            this.usingRelay = isRelay;
            this.parent.emit('iceConnectionType', this, {
                localCandidateType,
                relayed: isRelay,
                remoteCandidateType
            });
            if (isRelay && this.maxRelayBandwidth !== undefined) {
                this.maximumBitrate = this.maxRelayBandwidth;
                if (this.currentBitrate) {
                    this.setMaximumBitrate(Math.min(this.currentBitrate, this.maximumBitrate));
                }
                else {
                    this.setMaximumBitrate(this.maximumBitrate);
                }
            }
        });
    }
    /* determine whether an ICE restart is in order
     * when transitioning to disconnected. Strategy is
     * 'wait 2 seconds for things to repair themselves'
     * 'maybe check if bytes are sent/received' by comparing
     *   getStats measurements
     */
    maybeRestartIce() {
        // only initiators do an ice-restart to avoid conflicts.
        if (!this.isInitiator) {
            return;
        }
        if (this._maybeRestartingIce !== undefined) {
            clearTimeout(this._maybeRestartingIce);
        }
        this._maybeRestartingIce = setTimeout(() => {
            this._maybeRestartingIce = undefined;
            if (this.pc.iceConnectionState === 'disconnected') {
                this.restartIce();
            }
        }, 2000);
    }
}
ICESession$1.default = ICESession;

Object.defineProperty(FileTransferSession$1, "__esModule", { value: true });
FileTransferSession$1.Receiver = FileTransferSession$1.Sender = void 0;
const tslib_1$f = require$$0;
const events_1$3 = require$$2;
const Hashes = (0, tslib_1$f.__importStar)(browser);
const Constants_1$f = Constants;
const Namespaces_1$1w = Namespaces;
const ICESession_1$1 = (0, tslib_1$f.__importDefault)(ICESession$1);
const Intermediate_1$1 = Intermediate;
const Protocol_1$1 = Protocol$1a;
class Sender extends events_1$3.EventEmitter {
    constructor(opts = {}) {
        super();
        this.config = {
            chunkSize: 16384,
            hash: 'sha-1',
            ...opts
        };
        this.file = undefined;
        this.channel = undefined;
        this.hash = Hashes.createHash(this.config.hash);
    }
    send(file, channel) {
        if (this.file && this.channel) {
            return;
        }
        this.file = file;
        this.channel = channel;
        this.channel.binaryType = 'arraybuffer';
        const fileReader = new FileReader();
        let offset = 0;
        let pendingRead = false;
        const sliceFile = () => {
            if (pendingRead || offset >= file.size) {
                return;
            }
            pendingRead = true;
            const slice = file.slice(offset, offset + this.config.chunkSize);
            fileReader.readAsArrayBuffer(slice);
        };
        channel.bufferedAmountLowThreshold = 8 * this.config.chunkSize;
        channel.onbufferedamountlow = () => {
            sliceFile();
        };
        fileReader.addEventListener('load', (event) => {
            const data = event.target.result;
            pendingRead = false;
            offset += data.byteLength;
            this.channel.send(data);
            this.hash.update(new Uint8Array(data));
            this.emit('progress', offset, file.size, data);
            if (offset < file.size) {
                if (this.channel.bufferedAmount <= this.channel.bufferedAmountLowThreshold) {
                    sliceFile();
                }
                // Otherwise wait for bufferedamountlow event to trigger reading more data
            }
            else {
                this.emit('progress', file.size, file.size, null);
                this.emit('sentFile', {
                    algorithm: this.config.hash,
                    name: file.name,
                    size: file.size,
                    value: this.hash.digest()
                });
            }
        });
        sliceFile();
    }
}
FileTransferSession$1.Sender = Sender;
class Receiver extends events_1$3.EventEmitter {
    constructor(opts = {}) {
        super();
        this.config = {
            hash: 'sha-1',
            ...opts
        };
        this.receiveBuffer = [];
        this.received = 0;
        this.channel = undefined;
        this.hash = Hashes.createHash(this.config.hash);
    }
    receive(metadata, channel) {
        this.metadata = metadata;
        this.channel = channel;
        this.channel.binaryType = 'arraybuffer';
        this.channel.onmessage = e => {
            const len = e.data.byteLength;
            this.received += len;
            this.receiveBuffer.push(e.data);
            if (e.data) {
                this.hash.update(new Uint8Array(e.data));
            }
            this.emit('progress', this.received, this.metadata.size, e.data);
            if (this.received === this.metadata.size) {
                this.metadata.actualhash = this.hash.digest('hex');
                this.emit('receivedFile', new Blob(this.receiveBuffer), this.metadata);
                this.receiveBuffer = [];
            }
            else if (this.received > this.metadata.size) {
                // FIXME
                console.error('received more than expected, discarding...');
                this.receiveBuffer = []; // just discard...
            }
        };
    }
}
FileTransferSession$1.Receiver = Receiver;
class FileTransferSession extends ICESession_1$1.default {
    constructor(opts) {
        super(opts);
        this.sender = undefined;
        this.receiver = undefined;
        this.file = undefined;
    }
    async start(file, next) {
        next = next || (() => undefined);
        if (!file || typeof file === 'function') {
            throw new Error('File object required');
        }
        this.state = 'pending';
        this.role = 'initiator';
        this.file = file;
        this.sender = new Sender();
        this.sender.on('progress', (sent, size) => {
            this._log('info', 'Send progress ' + sent + '/' + size);
        });
        this.sender.on('sentFile', meta => {
            this._log('info', 'Sent file', meta.name);
            this.send(Constants_1$f.JingleAction.SessionInfo, {
                info: {
                    creator: Constants_1$f.JingleSessionRole.Initiator,
                    file: {
                        hashes: [
                            {
                                algorithm: meta.algorithm,
                                value: meta.value
                            }
                        ]
                    },
                    infoType: Constants_1$f.JINGLE_INFO_CHECKSUM_5,
                    name: this.contentName
                }
            });
            this.parent.emit('sentFile', this, meta);
        });
        this.channel = this.pc.createDataChannel('filetransfer', {
            ordered: true
        });
        this.channel.onopen = () => {
            this.sender.send(this.file, this.channel);
        };
        try {
            await this.processLocal(Constants_1$f.JingleAction.SessionInitiate, async () => {
                const offer = await this.pc.createOffer({
                    offerToReceiveAudio: false,
                    offerToReceiveVideo: false
                });
                const json = (0, Intermediate_1$1.importFromSDP)(offer.sdp);
                const jingle = (0, Protocol_1$1.convertIntermediateToRequest)(json, this.role, this.transportType);
                this.contentName = jingle.contents[0].name;
                jingle.sid = this.sid;
                jingle.action = Constants_1$f.JingleAction.SessionInitiate;
                jingle.contents[0].application = {
                    applicationType: Namespaces_1$1w.NS_JINGLE_FILE_TRANSFER_5,
                    file: {
                        date: file.lastModified ? new Date(file.lastModified) : undefined,
                        hashesUsed: [
                            {
                                algorithm: 'sha-1'
                            }
                        ],
                        name: file.name,
                        size: file.size
                    }
                };
                this.send('session-initiate', jingle);
                await this.pc.setLocalDescription(offer);
            });
            next();
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC offer', err);
            return this.end('failed-application', true);
        }
    }
    async accept(next) {
        this._log('info', 'Accepted incoming session');
        this.role = 'responder';
        this.state = 'active';
        next = next || (() => undefined);
        try {
            await this.processLocal(Constants_1$f.JingleAction.SessionAccept, async () => {
                const answer = await this.pc.createAnswer();
                const json = (0, Intermediate_1$1.importFromSDP)(answer.sdp);
                const jingle = (0, Protocol_1$1.convertIntermediateToRequest)(json, this.role, this.transportType);
                jingle.sid = this.sid;
                jingle.action = 'session-accept';
                for (const content of jingle.contents) {
                    content.creator = 'initiator';
                }
                this.contentName = jingle.contents[0].name;
                this.send('session-accept', jingle);
                await this.pc.setLocalDescription(answer);
                await this.processBufferedCandidates();
            });
            next();
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC answer', err);
            this.end('failed-application');
        }
    }
    async onSessionInitiate(changes, cb) {
        this._log('info', 'Initiating incoming session');
        this.role = 'responder';
        this.state = 'pending';
        this.transportType = changes.contents[0].transport.transportType;
        const json = (0, Protocol_1$1.convertRequestToIntermediate)(changes, this.peerRole);
        const sdp = (0, Intermediate_1$1.exportToSDP)(json);
        const desc = changes.contents[0].application;
        const hashes = desc.file.hashesUsed ? desc.file.hashesUsed : desc.file.hashes || [];
        this.receiver = new Receiver({ hash: hashes[0] && hashes[0].algorithm });
        this.receiver.on('progress', (received, size) => {
            this._log('info', 'Receive progress ' + received + '/' + size);
        });
        this.receiver.on('receivedFile', file => {
            this.receivedFile = file;
            this._maybeReceivedFile();
        });
        this.receiver.metadata = desc.file;
        this.pc.addEventListener('datachannel', e => {
            this.channel = e.channel;
            this.receiver.receive(this.receiver.metadata, e.channel);
        });
        try {
            await this.pc.setRemoteDescription({ type: 'offer', sdp });
            await this.processBufferedCandidates();
            cb();
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC answer', err);
            cb({ condition: 'general-error' });
        }
    }
    onSessionInfo(changes, cb) {
        const info = changes.info;
        if (!info || !info.file || !info.file.hashes) {
            return;
        }
        this.receiver.metadata.hashes = info.file.hashes;
        if (this.receiver.metadata.actualhash) {
            this._maybeReceivedFile();
        }
        cb();
    }
    _maybeReceivedFile() {
        if (!this.receiver.metadata.hashes || !this.receiver.metadata.hashes.length) {
            // unknown hash, file transfer not completed
            return;
        }
        for (const hash of this.receiver.metadata.hashes || []) {
            if (hash.value && hash.value.toString('hex') === this.receiver.metadata.actualhash) {
                this._log('info', 'File hash matches');
                this.parent.emit('receivedFile', this, this.receivedFile, this.receiver.metadata);
                this.end('success');
                return;
            }
        }
        this._log('error', 'File hash does not match');
        this.end('media-error');
    }
}
FileTransferSession$1.default = FileTransferSession;

var MediaSession$1 = {};

Object.defineProperty(MediaSession$1, "__esModule", { value: true });
const tslib_1$e = require$$0;
const Constants_1$e = Constants;
const ICESession_1 = (0, tslib_1$e.__importDefault)(ICESession$1);
const Intermediate_1 = Intermediate;
const Protocol_1 = Protocol$1a;
function applyStreamsCompatibility(content) {
    const application = content.application;
    /* signal .streams as a=ssrc: msid */
    if (application.streams &&
        application.streams.length &&
        application.sources &&
        application.sources.length) {
        const msid = application.streams[0];
        application.sources[0].parameters.msid = `${msid.id} ${msid.track}`;
        if (application.sourceGroups && application.sourceGroups.length > 0) {
            application.sources.push({
                parameters: {
                    cname: application.sources[0].parameters.cname,
                    msid: `${msid.id} ${msid.track}`
                },
                ssrc: application.sourceGroups[0].sources[1]
            });
        }
    }
}
class MediaSession extends ICESession_1.default {
    constructor(opts) {
        super(opts);
        this.includesAudio = false;
        this.includesVideo = false;
        this._ringing = false;
        this.pc.addEventListener('track', (e) => {
            this.onAddTrack(e.track, e.streams[0]);
        });
        if (opts.stream) {
            for (const track of opts.stream.getTracks()) {
                this.addTrack(track, opts.stream);
            }
        }
    }
    get ringing() {
        return this._ringing;
    }
    set ringing(value) {
        if (value !== this._ringing) {
            this._ringing = value;
        }
    }
    get streams() {
        if (this.pc.signalingState !== 'closed') {
            return this.pc.getRemoteStreams();
        }
        return [];
    }
    // ----------------------------------------------------------------
    // Session control methods
    // ----------------------------------------------------------------
    async start(opts, next) {
        this.state = 'pending';
        if (arguments.length === 1 && typeof opts === 'function') {
            next = opts;
            opts = {};
        }
        next = next || (() => undefined);
        opts = opts || {};
        this.role = 'initiator';
        this.offerOptions = opts;
        try {
            await this.processLocal(Constants_1$e.JingleAction.SessionInitiate, async () => {
                const offer = await this.pc.createOffer(opts);
                const json = (0, Intermediate_1.importFromSDP)(offer.sdp);
                const jingle = (0, Protocol_1.convertIntermediateToRequest)(json, this.role, this.transportType);
                jingle.sid = this.sid;
                jingle.action = Constants_1$e.JingleAction.SessionInitiate;
                for (const content of jingle.contents || []) {
                    content.creator = 'initiator';
                    applyStreamsCompatibility(content);
                }
                await this.pc.setLocalDescription(offer);
                this.send('session-initiate', jingle);
            });
            next();
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC offer', err);
            this.end('failed-application', true);
        }
    }
    async accept(opts, next) {
        // support calling with accept(next) or accept(opts, next)
        if (arguments.length === 1 && typeof opts === 'function') {
            next = opts;
            opts = {};
        }
        next = next || (() => undefined);
        opts = opts || {};
        this._log('info', 'Accepted incoming session');
        this.state = 'active';
        this.role = 'responder';
        try {
            await this.processLocal(Constants_1$e.JingleAction.SessionAccept, async () => {
                const answer = await this.pc.createAnswer(opts);
                const json = (0, Intermediate_1.importFromSDP)(answer.sdp);
                const jingle = (0, Protocol_1.convertIntermediateToRequest)(json, this.role, this.transportType);
                jingle.sid = this.sid;
                jingle.action = Constants_1$e.JingleAction.SessionAccept;
                for (const content of jingle.contents || []) {
                    content.creator = 'initiator';
                }
                await this.pc.setLocalDescription(answer);
                await this.processBufferedCandidates();
                this.send('session-accept', jingle);
            });
            next();
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC answer', err);
            this.end('failed-application');
        }
    }
    end(reason = 'success', silent = false) {
        for (const receiver of this.pc.getReceivers()) {
            this.onRemoveTrack(receiver.track);
        }
        super.end(reason, silent);
    }
    ring() {
        return this.processLocal('ring', async () => {
            this._log('info', 'Ringing on incoming session');
            this.ringing = true;
            this.send(Constants_1$e.JingleAction.SessionInfo, {
                info: {
                    infoType: Constants_1$e.JINGLE_INFO_RINGING
                }
            });
        });
    }
    mute(creator, name) {
        return this.processLocal('mute', async () => {
            this._log('info', 'Muting', name);
            this.send(Constants_1$e.JingleAction.SessionInfo, {
                info: {
                    creator,
                    infoType: Constants_1$e.JINGLE_INFO_MUTE,
                    name
                }
            });
        });
    }
    unmute(creator, name) {
        return this.processLocal('unmute', async () => {
            this._log('info', 'Unmuting', name);
            this.send(Constants_1$e.JingleAction.SessionInfo, {
                info: {
                    creator,
                    infoType: Constants_1$e.JINGLE_INFO_UNMUTE,
                    name
                }
            });
        });
    }
    hold() {
        return this.processLocal('hold', async () => {
            this._log('info', 'Placing on hold');
            this.send('session-info', {
                info: {
                    infoType: Constants_1$e.JINGLE_INFO_HOLD
                }
            });
        });
    }
    resume() {
        return this.processLocal('resume', async () => {
            this._log('info', 'Resuming from hold');
            this.send('session-info', {
                info: {
                    infoType: Constants_1$e.JINGLE_INFO_ACTIVE
                }
            });
        });
    }
    // ----------------------------------------------------------------
    // Track control methods
    // ----------------------------------------------------------------
    addTrack(track, stream, cb) {
        if (track.kind === 'audio') {
            this.includesAudio = true;
        }
        if (track.kind === 'video') {
            this.includesVideo = true;
        }
        return this.processLocal('addtrack', async () => {
            if (this.pc.addTrack) {
                this.pc.addTrack(track, stream);
            }
            else {
                this.pc.addStream(stream);
            }
            if (cb) {
                cb();
            }
        });
    }
    async removeTrack(sender, cb) {
        return this.processLocal('removetrack', async () => {
            this.pc.removeTrack(sender);
            if (cb) {
                return cb();
            }
        });
    }
    // ----------------------------------------------------------------
    // Track event handlers
    // ----------------------------------------------------------------
    onAddTrack(track, stream) {
        this._log('info', 'Track added');
        this.parent.emit('peerTrackAdded', this, track, stream);
    }
    onRemoveTrack(track) {
        this._log('info', 'Track removed');
        this.parent.emit('peerTrackRemoved', this, track);
    }
    // ----------------------------------------------------------------
    // Jingle action handers
    // ----------------------------------------------------------------
    async onSessionInitiate(changes, cb) {
        this._log('info', 'Initiating incoming session');
        this.state = 'pending';
        this.role = 'responder';
        this.transportType = changes.contents[0].transport.transportType;
        const json = (0, Protocol_1.convertRequestToIntermediate)(changes, this.peerRole);
        for (const media of json.media) {
            if (media.kind === 'audio') {
                this.includesAudio = true;
            }
            if (media.kind === 'video') {
                this.includesVideo = true;
            }
            if (!media.streams) {
                media.streams = [{ stream: 'legacy', track: media.kind }];
            }
        }
        const sdp = (0, Intermediate_1.exportToSDP)(json);
        try {
            await this.pc.setRemoteDescription({ type: 'offer', sdp });
            await this.processBufferedCandidates();
            return cb();
        }
        catch (err) {
            this._log('error', 'Could not create WebRTC answer', err);
            return cb({ condition: 'general-error' });
        }
    }
    onSessionTerminate(changes, cb) {
        for (const receiver of this.pc.getReceivers()) {
            this.onRemoveTrack(receiver.track);
        }
        super.onSessionTerminate(changes, cb);
    }
    onSessionInfo(changes, cb) {
        const info = changes.info || { infoType: '' };
        switch (info.infoType) {
            case Constants_1$e.JINGLE_INFO_RINGING:
                this._log('info', 'Outgoing session is ringing');
                this.ringing = true;
                this.parent.emit('ringing', this);
                return cb();
            case Constants_1$e.JINGLE_INFO_HOLD:
                this._log('info', 'On hold');
                this.parent.emit('hold', this);
                return cb();
            case Constants_1$e.JINGLE_INFO_UNHOLD:
            case Constants_1$e.JINGLE_INFO_ACTIVE:
                this._log('info', 'Resuming from hold');
                this.parent.emit('resumed', this);
                return cb();
            case Constants_1$e.JINGLE_INFO_MUTE:
                this._log('info', 'Muting', info);
                this.parent.emit('mute', this, info);
                return cb();
            case Constants_1$e.JINGLE_INFO_UNMUTE:
                this._log('info', 'Unmuting', info);
                this.parent.emit('unmute', this, info);
                return cb();
        }
        return cb();
    }
}
MediaSession$1.default = MediaSession;

var SessionManager$1 = {};

Object.defineProperty(SessionManager$1, "__esModule", { value: true });
const tslib_1$d = require$$0;
const events_1$2 = require$$2;
const Constants_1$d = Constants;
const Namespaces_1$1v = Namespaces;
const platform_1$6 = browser;
const Utils_1$6 = Utils;
const FileTransferSession_1 = (0, tslib_1$d.__importDefault)(FileTransferSession$1);
const MediaSession_1 = (0, tslib_1$d.__importDefault)(MediaSession$1);
const Session_1 = (0, tslib_1$d.__importDefault)(Session);
const MAX_RELAY_BANDWIDTH = 768 * 1024; // maximum bandwidth used via TURN.
function isICEServer(val) {
    return !val.type && (val.urls || val.url);
}
class SessionManager extends events_1$2.EventEmitter {
    constructor(conf = {}) {
        super();
        conf = conf || {};
        this.selfID = conf.selfID;
        this.sessions = {};
        this.peers = {};
        this.iceServers = conf.iceServers || [];
        this.prepareSession =
            conf.prepareSession ||
                (opts => {
                    if (!this.config.hasRTCPeerConnection) {
                        return;
                    }
                    if (opts.applicationTypes.indexOf(Namespaces_1$1v.NS_JINGLE_RTP_1) >= 0) {
                        return new MediaSession_1.default(opts);
                    }
                    if (opts.applicationTypes.indexOf(Namespaces_1$1v.NS_JINGLE_FILE_TRANSFER_5) >= 0) {
                        return new FileTransferSession_1.default(opts);
                    }
                });
        this.performTieBreak =
            conf.performTieBreak ||
                ((sess, req) => {
                    const applicationTypes = (req.jingle.contents || []).map(content => {
                        if (content.application) {
                            return content.application.applicationType;
                        }
                    });
                    const intersection = (sess.pendingApplicationTypes || []).filter(appType => applicationTypes.includes(appType));
                    return intersection.length > 0;
                });
        this.createPeerConnection =
            conf.createPeerConnection ||
                ((session, opts) => {
                    if (platform_1$6.RTCPeerConnection) {
                        return new platform_1$6.RTCPeerConnection(opts);
                    }
                });
        this.config = {
            debug: false,
            hasRTCPeerConnection: !!platform_1$6.RTCPeerConnection,
            peerConnectionConfig: {
                bundlePolicy: conf.bundlePolicy || 'balanced',
                iceTransportPolicy: conf.iceTransportPolicy || 'all',
                rtcpMuxPolicy: conf.rtcpMuxPolicy || 'require',
                sdpSemantics: conf.sdpSemantics
            },
            peerConnectionConstraints: {
                optional: [{ DtlsSrtpKeyAgreement: true }, { RtpDataChannels: false }]
            },
            ...conf
        };
    }
    addICEServer(server) {
        if (typeof server === 'string') {
            this.iceServers.push({ urls: server });
            return;
        }
        if (isICEServer(server)) {
            this.iceServers.push(server);
            return;
        }
        let host = server.host || '';
        if (host.indexOf(':') >= 0) {
            host = `[${host}]`;
        }
        let uri = `${server.type}:${host}`;
        if (server.port) {
            uri += `:${server.port}`;
        }
        if (server.transport) {
            uri += `?transport=${server.transport}`;
        }
        if (server.type === 'turn' || server.type === 'turns') {
            this.iceServers.push({
                credential: server.password,
                urls: [uri],
                username: server.username
            });
        }
        else if (server.type === 'stun' || server.type === 'stuns') {
            this.iceServers.push({ urls: [uri] });
        }
    }
    resetICEServers() {
        this.iceServers = [];
    }
    addSession(session) {
        session.parent = this;
        const sid = session.sid;
        const peer = session.peerID;
        this.sessions[sid] = session;
        if (!this.peers[peer]) {
            this.peers[peer] = [];
        }
        this.peers[peer].push(session);
        this.emit('createdSession', session);
        return session;
    }
    forgetSession(session) {
        const peers = this.peers[session.peerID] || [];
        if (peers.length) {
            peers.splice(peers.indexOf(session), 1);
        }
        delete this.sessions[session.sid];
    }
    createMediaSession(peer, sid, stream) {
        const session = new MediaSession_1.default({
            config: this.config.peerConnectionConfig,
            constraints: this.config.peerConnectionConstraints,
            iceServers: this.iceServers,
            initiator: true,
            maxRelayBandwidth: MAX_RELAY_BANDWIDTH,
            parent: this,
            peerID: peer,
            sid,
            stream
        });
        this.addSession(session);
        return session;
    }
    createFileTransferSession(peer, sid) {
        const session = new FileTransferSession_1.default({
            config: this.config.peerConnectionConfig,
            constraints: this.config.peerConnectionConstraints,
            iceServers: this.iceServers,
            initiator: true,
            maxRelayBandwidth: MAX_RELAY_BANDWIDTH,
            parent: this,
            peerID: peer,
            sid
        });
        this.addSession(session);
        return session;
    }
    endPeerSessions(peer, reason, silent = false) {
        const sessions = this.peers[peer] || [];
        delete this.peers[peer];
        for (const session of sessions) {
            session.end(reason || 'gone', silent);
        }
    }
    endAllSessions(reason, silent = false) {
        for (const peer of Object.keys(this.peers)) {
            this.endPeerSessions(peer, reason, silent);
        }
    }
    process(req) {
        // Extract the request metadata that we need to verify
        const sid = req.jingle ? req.jingle.sid : undefined;
        let session = sid ? this.sessions[sid] : undefined;
        const rid = req.id;
        const sender = req.from;
        if (!sender) {
            return;
        }
        if (req.type === 'error') {
            this._log('error', 'Received error response', req);
            if (session && req.error && req.error.jingleError === 'unknown-session') {
                return session.end('gone', true);
            }
            const isTieBreak = req.error && req.error.jingleError === 'tie-break';
            if (session && session.state === 'pending' && isTieBreak) {
                return session.end('alternative-session', true);
            }
            else {
                if (session) {
                    session.pendingAction = undefined;
                }
                return;
            }
        }
        if (req.type === 'result') {
            if (session) {
                session.pendingAction = undefined;
            }
            return;
        }
        const action = req.jingle.action;
        const contents = req.jingle.contents || [];
        const applicationTypes = contents.map(content => {
            return content.application ? content.application.applicationType : undefined;
        });
        const transportTypes = contents.map(content => {
            return content.transport ? content.transport.transportType : undefined;
        });
        // Now verify that we are allowed to actually process the
        // requested action
        if (action !== Constants_1$d.JingleAction.SessionInitiate) {
            // Can't modify a session that we don't have.
            if (!session) {
                if (action === 'session-terminate') {
                    this.emit('send', {
                        id: rid,
                        to: sender,
                        type: 'result'
                    });
                    return;
                }
                this._log('error', 'Unknown session', sid);
                return this._sendError(sender, rid, {
                    condition: 'item-not-found',
                    jingleError: 'unknown-session'
                });
            }
            // Check if someone is trying to hijack a session.
            if (session.peerID !== sender || session.state === 'ended') {
                this._log('error', 'Session has ended, or action has wrong sender');
                return this._sendError(sender, rid, {
                    condition: 'item-not-found',
                    jingleError: 'unknown-session'
                });
            }
            // Can't accept a session twice
            if (action === 'session-accept' && session.state !== 'pending') {
                this._log('error', 'Tried to accept session twice', sid);
                return this._sendError(sender, rid, {
                    condition: 'unexpected-request',
                    jingleError: 'out-of-order'
                });
            }
            // Can't process two requests at once, need to tie break
            if (action !== 'session-terminate' && action === session.pendingAction) {
                this._log('error', 'Tie break during pending request');
                if (session.isInitiator) {
                    return this._sendError(sender, rid, {
                        condition: 'conflict',
                        jingleError: 'tie-break'
                    });
                }
            }
        }
        else if (session) {
            // Don't accept a new session if we already have one.
            if (session.peerID !== sender) {
                this._log('error', 'Duplicate sid from new sender');
                return this._sendError(sender, rid, {
                    condition: 'service-unavailable'
                });
            }
            // Check if we need to have a tie breaker because both parties
            // happened to pick the same random sid.
            if (session.state === 'pending') {
                if (this.selfID &&
                    this.selfID > session.peerID &&
                    this.performTieBreak(session, req)) {
                    this._log('error', 'Tie break new session because of duplicate sids');
                    return this._sendError(sender, rid, {
                        condition: 'conflict',
                        jingleError: 'tie-break'
                    });
                }
            }
            else {
                // The other side is just doing it wrong.
                this._log('error', 'Someone is doing this wrong');
                return this._sendError(sender, rid, {
                    condition: 'unexpected-request',
                    jingleError: 'out-of-order'
                });
            }
        }
        else if (this.peers[sender] && this.peers[sender].length) {
            // Check if we need to have a tie breaker because we already have
            // a different session with this peer that is using the requested
            // content application types.
            for (let i = 0, len = this.peers[sender].length; i < len; i++) {
                const sess = this.peers[sender][i];
                if (sess &&
                    sess.state === 'pending' &&
                    sid &&
                    (0, Utils_1$6.octetCompare)(sess.sid, sid) > 0 &&
                    this.performTieBreak(sess, req)) {
                    this._log('info', 'Tie break session-initiate');
                    return this._sendError(sender, rid, {
                        condition: 'conflict',
                        jingleError: 'tie-break'
                    });
                }
            }
        }
        // We've now weeded out invalid requests, so we can process the action now.
        if (action === 'session-initiate') {
            if (!contents.length) {
                return this._sendError(sender, rid, {
                    condition: 'bad-request'
                });
            }
            session = this._createIncomingSession({
                applicationTypes,
                config: this.config.peerConnectionConfig,
                constraints: this.config.peerConnectionConstraints,
                iceServers: this.iceServers,
                initiator: false,
                parent: this,
                peerID: sender,
                sid,
                transportTypes
            }, req);
        }
        session.process(action, req.jingle, (err) => {
            if (err) {
                this._log('error', 'Could not process request', req, err);
                this._sendError(sender, rid, err);
            }
            else {
                this.emit('send', {
                    id: rid,
                    to: sender,
                    type: 'result'
                });
                // Wait for the initial action to be processed before emitting
                // the session for the user to accept/reject.
                if (action === 'session-initiate') {
                    this.emit('incoming', session);
                }
            }
        });
    }
    signal(session, data) {
        const action = data.jingle && data.jingle.action;
        if (session.isInitiator && action === Constants_1$d.JingleAction.SessionInitiate) {
            this.emit('outgoing', session);
        }
        this.emit('send', data);
    }
    _createIncomingSession(meta, req) {
        let session;
        if (this.prepareSession) {
            session = this.prepareSession(meta, req);
        }
        // Fallback to a generic session type, which can
        // only be used to end the session.
        if (!session) {
            session = new Session_1.default(meta);
        }
        this.addSession(session);
        return session;
    }
    _sendError(to, id, data) {
        if (!data.type) {
            data.type = 'cancel';
        }
        this.emit('send', {
            error: data,
            id,
            to,
            type: 'error'
        });
    }
    _log(level, message, ...args) {
        this.emit('log', level, message, ...args);
        this.emit('log:' + level, message, ...args);
    }
}
SessionManager$1.default = SessionManager;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SessionManager = exports.FileSession = exports.MediaSession = exports.ICESession = exports.Session = exports.exportToSDP = exports.importFromSDP = void 0;
	const tslib_1 = require$$0;
	const FileTransferSession_1 = (0, tslib_1.__importDefault)(FileTransferSession$1);
	exports.FileSession = FileTransferSession_1.default;
	const ICESession_1 = (0, tslib_1.__importDefault)(ICESession$1);
	exports.ICESession = ICESession_1.default;
	const MediaSession_1 = (0, tslib_1.__importDefault)(MediaSession$1);
	exports.MediaSession = MediaSession_1.default;
	const Session_1 = (0, tslib_1.__importDefault)(Session);
	exports.Session = Session_1.default;
	const SessionManager_1 = (0, tslib_1.__importDefault)(SessionManager$1);
	exports.SessionManager = SessionManager_1.default;
	var Intermediate_1 = Intermediate;
	Object.defineProperty(exports, "importFromSDP", { enumerable: true, get: function () { return Intermediate_1.importFromSDP; } });
	Object.defineProperty(exports, "exportToSDP", { enumerable: true, get: function () { return Intermediate_1.exportToSDP; } });
} (jingle$1));

var dist = {};

var interfaces = {};

Object.defineProperty(interfaces, "__esModule", { value: true });

(function (exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var events_1 = require$$2;
	__exportStar(interfaces, exports);
	var IS_BROWSER;
	var MAX_CANDIDATE_WAIT_ATTEMPTS = 3;
	var StatsGatherer = /** @class */ (function (_super) {
	    __extends(StatsGatherer, _super);
	    function StatsGatherer(peerConnection, opts) {
	        if (opts === void 0) { opts = {}; }
	        var _this = _super.call(this) || this;
	        _this.peerConnection = peerConnection;
	        /* eslint-enable @typescript-eslint/no-explicit-any */
	        _this.haveConnectionMetrics = false;
	        _this.statsArr = [];
	        IS_BROWSER = typeof window !== 'undefined';
	        _this.session = opts.session;
	        _this.initiator = opts.initiator;
	        _this.conference = opts.conference;
	        _this.statsInterval = (opts.interval || 5) * 1000;
	        _this.logger = opts.logger || console;
	        if (['new', 'checking'].includes(peerConnection.iceConnectionState)) {
	            if (peerConnection.iceConnectionState === 'checking') {
	                _this.logger.warn("iceConnectionState is already in checking state so ice connect time may not be accurate");
	                _this.handleIceStateChange();
	            }
	            peerConnection.addEventListener('iceconnectionstatechange', _this.handleIceStateChange.bind(_this));
	        }
	        peerConnection.addEventListener('connectionstatechange', _this.handleConnectionStateChange.bind(_this));
	        if (peerConnection.connectionState === 'connected') {
	            _this.pollForStats();
	        }
	        return _this;
	    }
	    StatsGatherer.prototype.handleIceStateChange = function () {
	        var _this = this;
	        var state = this.peerConnection.iceConnectionState;
	        if (state === 'checking') {
	            if (IS_BROWSER) {
	                this.iceStartTime = window.performance.now();
	            }
	        }
	        if (state === 'connected') {
	            if (this.haveConnectionMetrics) {
	                return;
	            }
	            this.haveConnectionMetrics = true;
	            var userAgent = void 0;
	            var platform = void 0;
	            var cores = void 0;
	            if (IS_BROWSER) {
	                this.iceConnectionTime = window.performance.now() - this.iceStartTime;
	                userAgent = window.navigator.userAgent;
	                platform = window.navigator.platform;
	                cores = window.navigator.hardwareConcurrency;
	            }
	            var event_1 = {
	                name: 'connect',
	                userAgent: userAgent,
	                platform: platform,
	                cores: cores,
	                session: this.session,
	                conference: this.conference,
	                connectTime: this.iceConnectionTime,
	            };
	            return this.waitForSelectedCandidatePair().then(function (stats) {
	                _this.gatherSelectedCandidateInfo(stats, event_1);
	                _this.emit('stats', event_1);
	            });
	        }
	        if (state === 'failed') {
	            if (IS_BROWSER) {
	                this.iceFailedTime = window.performance.now() - this.iceStartTime;
	            }
	            return this.gatherStats().then(function () {
	                var event = {
	                    name: 'failure',
	                    session: _this.session,
	                    initiator: _this.initiator,
	                    conference: _this.conference,
	                    failTime: _this.iceFailedTime,
	                    iceRW: 0,
	                    numLocalHostCandidates: 0,
	                    numLocalSrflxCandidates: 0,
	                    numLocalRelayCandidates: 0,
	                    numRemoteHostCandidates: 0,
	                    numRemoteSrflxCandidates: 0,
	                    numRemoteRelayCandidates: 0,
	                };
	                var localCandidates = _this.peerConnection.localDescription.sdp.split('\r\n').filter(function (line) {
	                    return line.indexOf('a=candidate:') > -1;
	                });
	                var remoteCandidates = _this.peerConnection.remoteDescription.sdp.split('\r\n').filter(function (line) {
	                    return line.indexOf('a=candidate:') > -1;
	                });
	                ['Host', 'Srflx', 'Relay'].forEach(function (type) {
	                    event['numLocal' + type + 'Candidates'] = localCandidates.filter(function (line) {
	                        return line.split(' ')[7] === type.toLowerCase();
	                    }).length;
	                    event['numRemote' + type + 'Candidates'] = remoteCandidates.filter(function (line) {
	                        return line.split(' ')[7] === type.toLowerCase();
	                    }).length;
	                });
	                _this.emit('stats', event);
	            });
	        }
	    };
	    StatsGatherer.prototype.waitForSelectedCandidatePair = function (delay, attempt) {
	        var _this = this;
	        if (delay === void 0) { delay = 300; }
	        if (attempt === void 0) { attempt = 1; }
	        return this.gatherStats().then(function (reports) {
	            if (!_this.getSelectedCandidatePair(reports)) {
	                if (attempt > MAX_CANDIDATE_WAIT_ATTEMPTS) {
	                    return Promise.reject(new Error('Max wait attempts for connected candidate info reached'));
	                }
	                return new Promise(function (resolve, reject) {
	                    setTimeout(function () { return _this.waitForSelectedCandidatePair(delay, attempt + 1).then(resolve, reject); }, delay);
	                });
	            }
	            else {
	                return reports;
	            }
	        });
	    };
	    StatsGatherer.prototype.getSelectedCandidatePair = function (reports) {
	        var activeCandidatePair = null;
	        reports.forEach(function (_a) {
	            var value = _a.value;
	            var report = value;
	            var selected = report.type === 'candidate-pair' && report.nominated && report.state === 'succeeded';
	            if (selected) {
	                activeCandidatePair = report;
	            }
	        });
	        return activeCandidatePair;
	    };
	    StatsGatherer.prototype.gatherSelectedCandidateInfo = function (reports, event) {
	        var activeCandidatePair = this.getSelectedCandidatePair(reports);
	        if (activeCandidatePair) {
	            var localId_1 = activeCandidatePair.localCandidateId;
	            var remoteId_1 = activeCandidatePair.remoteCandidateId;
	            var localCandidate_1;
	            var remoteCandidate_1;
	            reports.forEach(function (_a) {
	                var value = _a.value;
	                var report = value;
	                if (localId_1 && report.type === 'local-candidate' && report.id === localId_1) {
	                    localCandidate_1 = report;
	                    event.localCandidateType = report.candidateType;
	                }
	                if (remoteId_1 && report.type === 'remote-candidate' && report.id === remoteId_1) {
	                    remoteCandidate_1 = report;
	                    event.remoteCandidateType = report.candidateType;
	                }
	            });
	            if (localCandidate_1 && remoteCandidate_1) {
	                event.candidatePair = localCandidate_1.candidateType + ';' + remoteCandidate_1.candidateType;
	                event.candidatePairDetails = {
	                    local: localCandidate_1,
	                    remote: remoteCandidate_1,
	                    pair: activeCandidatePair,
	                };
	            }
	            if (localCandidate_1) {
	                event.transport = localCandidate_1.transport || localCandidate_1.protocol;
	                if (localCandidate_1.priority) {
	                    // Chrome-specific mapping;
	                    // but only chrome has priority set on the candidate currently.
	                    var turnTypes = {
	                        2: 'udp',
	                        1: 'tcp',
	                        0: 'tls',
	                    };
	                    var priority = parseInt(localCandidate_1.priority, 10);
	                    event.turnType = turnTypes[priority >> 24];
	                    event.networkType = localCandidate_1.networkType;
	                }
	                event.usingIPv6 = localCandidate_1.ipAddress && localCandidate_1.ipAddress.indexOf('[') === 0;
	            }
	        }
	    };
	    StatsGatherer.prototype.handleConnectionStateChange = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var state;
	            var _this = this;
	            return __generator(this, function (_a) {
	                state = this.peerConnection.connectionState;
	                if (state === 'connected') {
	                    this.pollForStats();
	                }
	                else if (state === 'disconnected') {
	                    if (this.peerConnection.signalingState !== 'stable') {
	                        return [2 /*return*/];
	                    }
	                    return [2 /*return*/, this.gatherStats().then(function (reports) {
	                            var event = _this.createStatsReport(reports);
	                            event.type = 'disconnected';
	                            _this.emit('stats', event);
	                        })];
	                }
	                else if (['closed', 'failed'].includes(state) && this.pollingInterval) {
	                    if (IS_BROWSER) {
	                        window.clearInterval(this.pollingInterval);
	                    }
	                    this.pollingInterval = null;
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    StatsGatherer.prototype.pollForStats = function () {
	        var _this = this;
	        if (this.pollingInterval) {
	            return;
	        }
	        var statsPoll = function () {
	            return _this.gatherStats().then(function (reports) {
	                if (reports.length === 0) {
	                    _this.logger.warn('Empty stats gathered, ignoring and not emitting stats');
	                    return;
	                }
	                var event = _this.createStatsReport(reports, true);
	                if (event.tracks.length > 0 || event.remoteTracks.length > 0) {
	                    // If the last five stat events have a remote bitrate of 0, stop emitting.
	                    if (_this.checkBitrate(event)) {
	                        _this.emit('stats', event);
	                    }
	                }
	            });
	        };
	        if (IS_BROWSER) {
	            window.setTimeout(statsPoll, 0);
	            this.pollingInterval = window.setInterval(statsPoll, this.statsInterval);
	        }
	    };
	    StatsGatherer.prototype.checkBitrate = function (stat) {
	        var _a;
	        // If the stat does not have a bitrate of zero, automatically emit and clear the array.
	        if (stat.remoteTracks.length && ((_a = stat.remoteTracks[0]) === null || _a === void 0 ? void 0 : _a.bitrate) !== 0) {
	            this.statsArr = [];
	            return true;
	        }
	        // If we get five consecutive stats with zero bitrate, stop emitting.
	        if (this.statsArr.length >= 5) {
	            return false;
	        }
	        // Record stat with zero bitrate to array.
	        this.statsArr.push(stat);
	        return true;
	    };
	    StatsGatherer.prototype.polyFillStats = function (results) {
	        if (!results) {
	            return [];
	        }
	        if (Array.isArray(results)) {
	            return results;
	        }
	        var betterResults = [];
	        if (this.isNativeStatsReport(results)) {
	            results.forEach(function (value, key) {
	                betterResults.push({ key: key, value: value });
	            });
	        }
	        else if (Object.keys(results).length > 0) {
	            Object.keys(results).forEach(function (key) {
	                betterResults.push({
	                    key: key,
	                    value: results[key],
	                });
	            });
	        }
	        else {
	            this.logger.warn('Unknown stats results format, returning unmodified', results);
	            return [];
	        }
	        return betterResults;
	    };
	    StatsGatherer.prototype.isNativeStatsReport = function (results) {
	        return typeof window.RTCStatsReport !== 'undefined' && results instanceof window.RTCStatsReport;
	    };
	    StatsGatherer.prototype.gatherStats = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var stats, e_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 4, , 5]);
	                        if (!['connecting', 'connected'].includes(this.peerConnection.connectionState)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.peerConnection.getStats(null).then(this.polyFillStats.bind(this))];
	                    case 1:
	                        stats = _a.sent();
	                        return [2 /*return*/, stats];
	                    case 2:
	                        if (this.peerConnection.connectionState === 'closed') {
	                            if (this.pollingInterval) {
	                                if (IS_BROWSER) {
	                                    window.clearInterval(this.pollingInterval);
	                                }
	                                this.pollingInterval = null;
	                            }
	                            return [2 /*return*/, []];
	                        }
	                        else {
	                            return [2 /*return*/, []];
	                        }
	                    case 3: return [3 /*break*/, 5];
	                    case 4:
	                        e_1 = _a.sent();
	                        this.logger.error('Failed to gather stats. Are you using RTCPeerConnection as your connection? {expect peerconnection.getStats}', { peerConnection: this.peerConnection, err: e_1 });
	                        return [2 /*return*/, Promise.reject(e_1)];
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /* eslint-disable @typescript-eslint/no-explicit-any */
	    StatsGatherer.prototype.createStatsReport = function (results, updateLastResult) {
	        var _this = this;
	        if (updateLastResult === void 0) { updateLastResult = true; }
	        /* eslint-enable @typescript-eslint/no-explicit-any */
	        var event = {
	            name: 'getStats',
	            session: this.session,
	            initiator: this.initiator,
	            conference: this.conference,
	            tracks: [],
	            remoteTracks: [],
	        };
	        if (results.length === 0) {
	            return event;
	        }
	        var sources = results.filter(function (r) { return ['inbound-rtp', 'outbound-rtp'].indexOf(r.value.type) > -1; });
	        sources.forEach(function (source) {
	            _this.processSource({
	                source: source.value,
	                event: event,
	                results: results,
	            });
	        });
	        var candidatePair = results.find(function (r) { return r.value.type === 'candidate-pair' && r.value.state === 'succeeded' && r.value.nominated === true; });
	        if (candidatePair) {
	            this.processSelectedCandidatePair({
	                report: candidatePair.value,
	                event: event,
	                results: results,
	            });
	        }
	        if (updateLastResult) {
	            this.lastResult = results;
	        }
	        return event;
	    };
	    // todo source should be RTCInboundRTPStreamStats | RTCOutboundRTPStreamStats but the lib.dom definitions are out of date or not accurate
	    /* eslint-disable @typescript-eslint/no-explicit-any */
	    StatsGatherer.prototype.processSource = function (_a) {
	        var source = _a.source, results = _a.results, event = _a.event;
	        /* eslint-enable @typescript-eslint/no-explicit-any */
	        var now = new Date(source.timestamp);
	        // todo lastResultSource should be RTCInboundRTPStreamStats | RTCOutboundRTPStreamStats
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        var lastResultSource = this.lastResult && this.lastResult.find(function (r) { return r.key === source.id; });
	        lastResultSource = lastResultSource && lastResultSource.value;
	        var lastResultRemoteSource;
	        if (lastResultSource) {
	            lastResultRemoteSource = this.lastResult && this.lastResult.find(function (r) { return r.value.localId === lastResultSource.id; });
	            lastResultRemoteSource = lastResultRemoteSource && lastResultRemoteSource.value;
	        }
	        // for outbound-rtp, the correspondingRemoteSource will be remote-inbound-rtp
	        // for inbound-rtp, the correspondingRemoteSource will be remote-outbound-rtp
	        var correspondingRemoteSource;
	        var transport;
	        var candidatePair;
	        var track;
	        var mediaSource;
	        var codec;
	        results.forEach(function (r) {
	            if (r.value.localId === source.id) {
	                correspondingRemoteSource = r.value;
	            }
	            else if (r.key === source.transportId) {
	                transport = r.value;
	            }
	            else if (r.key === source.trackId) {
	                track = r.value;
	            }
	            else if (r.key === source.mediaSourceId) {
	                mediaSource = r.value;
	            }
	            else if (r.key === source.codecId) {
	                codec = r.value;
	            }
	        });
	        if (transport) {
	            candidatePair = results.find(function (r) { return r.key === transport.selectedCandidatePairId; });
	            candidatePair = candidatePair && candidatePair.value;
	        }
	        if (candidatePair) {
	            event.candidatePairHadActiveSource = true;
	        }
	        var kind = source.kind || source.mediaType;
	        var isOutbound = source.type === 'outbound-rtp';
	        var trackInfo = {
	            track: track && track.trackIdentifier,
	            kind: kind,
	            jitter: getDefinedValue('jitter', source, correspondingRemoteSource),
	            roundTripTime: getDefinedValue('roundTripTime', source, correspondingRemoteSource),
	            packetsLost: getDefinedValue('packetsLost', source, correspondingRemoteSource) || 0,
	            packetLoss: 0,
	            bytes: parseInt(isOutbound ? source.bytesSent : source.bytesReceived, 10) || 0,
	        };
	        if (codec) {
	            trackInfo.codec = "".concat(codec.payloadType, " ").concat(codec.mimeType, " ").concat(codec.clockRate);
	        }
	        if (lastResultSource) {
	            var previousBytesTotal = parseInt(isOutbound ? lastResultSource.bytesSent : lastResultSource.bytesReceived, 10) || 0;
	            var deltaTime = now.getTime() - new Date(lastResultSource.timestamp).getTime();
	            trackInfo.bitrate = Math.floor((8 * (trackInfo.bytes - previousBytesTotal)) / deltaTime);
	        }
	        var lastPacketsLost = getDefinedValue('packetsLost', lastResultSource, lastResultRemoteSource);
	        if (isOutbound) {
	            trackInfo.packetsSent = source.packetsSent;
	            trackInfo.packetLoss = (trackInfo.packetsLost / (trackInfo.packetsSent || 1)) * 100;
	            if (lastResultSource) {
	                trackInfo.intervalPacketsSent = trackInfo.packetsSent - (lastResultSource.packetsSent || 0);
	                trackInfo.intervalPacketsLost = trackInfo.packetsLost - (lastPacketsLost || 0);
	                trackInfo.intervalPacketLoss = (trackInfo.intervalPacketsLost / (trackInfo.intervalPacketsSent || 1)) * 100;
	            }
	            trackInfo.retransmittedBytesSent = source.retransmittedBytesSent;
	            trackInfo.retransmittedPacketsSent = source.retransmittedPacketsSent;
	        }
	        else {
	            trackInfo.packetsReceived = source.packetsReceived;
	            trackInfo.packetLoss = (trackInfo.packetsLost / (trackInfo.packetsReceived || 1)) * 100;
	            if (lastResultSource) {
	                trackInfo.intervalPacketsReceived = trackInfo.packetsReceived - lastResultSource.packetsReceived;
	                trackInfo.intervalPacketsLost = trackInfo.packetsLost - lastPacketsLost;
	                trackInfo.intervalPacketLoss = (trackInfo.intervalPacketsLost / (trackInfo.intervalPacketsReceived || 1)) * 100;
	            }
	        }
	        if (track && kind === 'audio') {
	            if (track.remoteSource) {
	                trackInfo.audioLevel = track.audioLevel;
	                trackInfo.totalAudioEnergy = track.totalAudioEnergy;
	            }
	            else {
	                trackInfo.echoReturnLoss = track.echoReturnLoss;
	                trackInfo.echoReturnLossEnhancement = track.echoReturnLossEnhancement;
	            }
	        }
	        if (kind === 'audio' && mediaSource && (!track || !track.remoteSource)) {
	            trackInfo.audioLevel = mediaSource.audioLevel;
	            trackInfo.totalAudioEnergy = mediaSource.totalAudioEnergy;
	        }
	        // remove undefined properties from trackInfo
	        Object.keys(trackInfo).forEach(function (key) { return trackInfo[key] === undefined && delete trackInfo[key]; });
	        if (isOutbound) {
	            event.tracks.push(trackInfo);
	        }
	        else {
	            event.remoteTracks.push(trackInfo);
	        }
	    };
	    StatsGatherer.prototype.processSelectedCandidatePair = function (_a) {
	        var _this = this;
	        var report = _a.report, event = _a.event, results = _a.results;
	        // this is the active candidate pair, check if it's the same id as last one
	        var localId = report.localCandidateId;
	        var remoteId = report.remoteCandidateId;
	        event.localCandidateChanged = !!this.lastActiveLocalCandidate && localId !== this.lastActiveLocalCandidate.id;
	        event.remoteCandidateChanged = !!this.lastActiveRemoteCandidate && remoteId !== this.lastActiveRemoteCandidate.id;
	        if (!this.lastActiveLocalCandidate || event.localCandidateChanged || event.remoteCandidateChanged) {
	            results.forEach(function (result) {
	                _this.checkLastActiveCandidate({
	                    localId: localId,
	                    remoteId: remoteId,
	                    report: result.value,
	                });
	            });
	        }
	        if (this.lastActiveLocalCandidate) {
	            event.networkType = this.lastActiveLocalCandidate.networkType;
	            if (this.lastActiveRemoteCandidate) {
	                event.candidatePair =
	                    this.lastActiveLocalCandidate.candidateType + ';' + this.lastActiveRemoteCandidate.candidateType;
	            }
	        }
	        event.bytesSent = report.bytesSent;
	        event.bytesReceived = report.bytesReceived;
	        event.requestsReceived = report.requestsReceived;
	        event.requestsSent = report.requestsSent;
	        event.responsesReceived = report.responsesReceived;
	        event.responsesSent = report.responsesSent;
	        event.consentRequestsSent = report.consentRequestsSent;
	        event.totalRoundTripTime = report.totalRoundTripTime;
	    };
	    StatsGatherer.prototype.checkLastActiveCandidate = function (_a) {
	        var localId = _a.localId, remoteId = _a.remoteId, report = _a.report;
	        if (localId && report.type === 'local-candidate' && report.id === localId) {
	            this.lastActiveLocalCandidate = report;
	        }
	        if (remoteId && report.type === 'remote-candidate' && report.id === remoteId) {
	            this.lastActiveRemoteCandidate = report;
	        }
	    };
	    return StatsGatherer;
	}(events_1.EventEmitter));
	exports.default = StatsGatherer;
	// returns the first value in the list of objects that is not undefined or null
	function getDefinedValue(propertyName) {
	    var objects = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        objects[_i - 1] = arguments[_i];
	    }
	    var item = objects.find(function (obj) { return obj && (obj[propertyName] || obj[propertyName] === 0); });
	    return item && item[propertyName];
	}
	
} (dist));

var StatsGatherer = /*@__PURE__*/getDefaultExportFromCjs(dist);

const loggingOverrides = {
    'Discovered new ICE candidate': { skipMessage: true }
};
// because we are trying to unify the interfaces between stanza and genesys media session
// we kind of have to hack the stanza one so it works with typescript
class StanzaMediaSession extends jingle$1.MediaSession {
    constructor(params) {
        super(params.options);
        this.iceCandidatesDiscovered = 0;
        this.iceCandidatesReceivedFromPeer = 0;
        this.reinvite = false;
        this.logger = params.logger;
        this.conversationId = params.conversationId;
        this.peerConnection = this.pc;
        this.fromUserId = params.fromUserId;
        this.meetingId = params.meetingId;
        this.id = this.sid;
        this.originalRoomJid = params.originalRoomJid;
        this.sessionType = SessionTypes[params.sessionType];
        this.ignoreHostCandidatesFromRemote = !!params.ignoreHostCandidatesFromRemote;
        this.allowIPv6 = !!params.allowIPv6;
        this.allowTCP = !!params.allowTCP;
        this.privAnswerMode = params.privAnswerMode;
        // babel does not like the typescript recipe for multiple extends so we are hacking this one
        // referencing https://github.com/babel/babel/issues/798
        const eventEmitter = new EventEmitter();
        Object.keys(eventEmitter.__proto__).forEach((name) => {
            this[name] = eventEmitter[name];
        });
        if (!params.optOutOfWebrtcStatsTelemetry) {
            this.setupStatsGatherer();
        }
        this.pc.addEventListener('connectionstatechange', this.onConnectionStateChange.bind(this));
        this.pc.addEventListener('icecandidateerror', this.onIceCandidateError.bind(this));
    }
    getLogDetails() {
        return {
            conversationId: this.conversationId,
            sessionId: this.id,
            sessionType: this.sessionType
        };
    }
    onTransportInfo(changes, cb) {
        const _super = Object.create(null, {
            onTransportInfo: { get: () => super.onTransportInfo }
        });
        var _a, _b;
        return __awaiter$5(this, void 0, void 0, function* () {
            const transport = (_a = changes.contents) === null || _a === void 0 ? void 0 : _a[0].transport;
            const candidates = transport === null || transport === void 0 ? void 0 : transport.candidates;
            if (this.ignoreHostCandidatesFromRemote) {
                const nonHostCandidates = candidates === null || candidates === void 0 ? void 0 : candidates.filter(candidate => candidate.type !== 'host');
                if ((nonHostCandidates === null || nonHostCandidates === void 0 ? void 0 : nonHostCandidates.length) !== ((_b = transport === null || transport === void 0 ? void 0 : transport.candidates) === null || _b === void 0 ? void 0 : _b.length)) {
                    this._log('info', 'Ignoring remote host ice candidates');
                    transport.candidates = nonHostCandidates;
                }
            }
            if (candidates) {
                for (const candidate of candidates) {
                    this._log('info', 'Received candidate from peer', { candidateType: candidate.type });
                    this.iceCandidatesReceivedFromPeer++;
                }
            }
            return _super.onTransportInfo.call(this, changes, cb);
        });
    }
    _log(level, message, ...data) {
        const redactionInfo = loggingOverrides[message];
        if (redactionInfo === null || redactionInfo === void 0 ? void 0 : redactionInfo.skipMessage) {
            return;
        }
        let details;
        if (data.length) {
            const firstItem = data[0];
            // if first item is an object, merge the details, else wrap them
            if (typeof firstItem === 'object' &&
                !Array.isArray(firstItem) &&
                firstItem !== null) {
                Object.assign(data[0], this.getLogDetails());
                details = data;
            }
            else {
                details = Object.assign(Object.assign({}, this.getLogDetails()), { data: firstItem });
            }
        }
        else {
            details = [...data, this.getLogDetails()];
        }
        this.logger[level](message, details);
    }
    end(reason = 'success', silent = false) {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.state = 'ended';
            this.processingQueue.kill();
            if (typeof reason === 'string') {
                reason = { condition: reason };
            }
            if (!silent) {
                this._log('info', 'sending jingle session-terminate');
                this.send('session-terminate', { reason });
            }
            // After sending session-terminate, wait for the peer connection to die -> if it doesn't, we will manually close it.
            setTimeout(() => {
                if (this.pc.connectionState === 'connected' || this.pc.connectionState === 'connecting') {
                    this.pc.close();
                }
            }, 2000);
            this.parent.emit('terminated', this, reason);
            this.parent.forgetSession(this);
        });
    }
    setupStatsGatherer() {
        this.statsGatherer = new StatsGatherer(this.pc);
        this.statsGatherer.on('stats', this.emit.bind(this, 'stats'));
    }
    onIceStateChange() {
        const iceState = this.pc.iceConnectionState;
        const sessionId = this.id;
        const conversationId = this.conversationId;
        const sessionType = this.sessionType;
        this._log('info', 'ICE state changed: ', { iceState, sessionId, conversationId });
        if (iceState === 'disconnected') {
            // this means we actually connected at one point
            if (this.pc.signalingState === 'stable') {
                this.interruptionStart = new Date();
                this._log('info', 'Connection state is interrupted', { sessionId, conversationId, sessionType });
            }
        }
        else if (iceState === 'connected') {
            this._log('info', 'sending session-info: active');
            this.send(Constants.JingleAction.SessionInfo, {
                info: {
                    infoType: Constants.JINGLE_INFO_ACTIVE
                }
            });
            this._setupDataChannel();
        }
        else if (iceState === 'failed') {
            this._log('info', 'ICE connection failed', {
                candidatesDiscovered: this.iceCandidatesDiscovered,
                candidatesReceivedFromPeer: this.iceCandidatesReceivedFromPeer
            });
        }
        super.onIceStateChange();
    }
    onConnectionStateChange() {
        const connectionState = this.pc.connectionState;
        const sessionId = this.id;
        const conversationId = this.conversationId;
        const sessionType = this.sessionType;
        this._log('info', 'Connection state changed: ', { connectionState, sessionId, conversationId, sessionType });
        if (this.interruptionStart) {
            if (connectionState === 'connected') {
                const diff = new Date().getTime() - this.interruptionStart.getTime();
                this._log('info', 'Connection was interrupted but was successfully recovered/connected', { sessionId, conversationId, sessionType, timeToRecover: diff });
                this.interruptionStart = undefined;
            }
            else if (connectionState === 'failed') {
                this._log('info', 'Connection was interrupted and failed to recover', { sessionId, conversationId, sessionType });
            }
        }
    }
    onIceCandidateError(ev) {
        const event = ev;
        this._log('error', 'IceCandidateError', {
            errorCode: event.errorCode,
            errorText: event.errorText,
            url: event.url
        });
        console.error('IceCandidateError', event);
    }
    onIceCandidate(e) {
        if (e.candidate) {
            if (!this.allowTCP && e.candidate.protocol === 'tcp') {
                return;
            }
            if (!this.allowIPv6) {
                const addressRegex = /.+udp [^ ]+ ([^ ]+).*typ host/;
                const matches = addressRegex.exec(e.candidate.candidate);
                const ipv4Regex = /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/;
                if (matches && !matches[1].match(ipv4Regex)) {
                    this._log('debug', 'Filtering out IPv6 candidate', e.candidate.candidate);
                    return;
                }
            }
            // this has too much information and can only be logged locally (debug)
            this._log('debug', 'Processing ice candidate', e.candidate.candidate);
            // this one is info level so it can go to the server
            this._log('info', 'Discovered ice candidate to send to peer', { type: e.candidate.type });
            this.iceCandidatesDiscovered++;
        }
        return super.onIceCandidate(e);
    }
    onIceEndOfCandidates() {
        super.onIceEndOfCandidates();
        this.emit('endOfCandidates');
    }
    addTrack(track, stream) {
        if (track.kind === 'audio') {
            this.includesAudio = true;
        }
        if (track.kind === 'video') {
            this.includesVideo = true;
        }
        return this.processLocal('addtrack', () => __awaiter$5(this, void 0, void 0, function* () {
            // find an available sender with the correct type
            const availableTransceiver = this.pc.getTransceivers().find((transceiver) => {
                var _a;
                return !transceiver.sender.track && ((_a = transceiver.receiver.track) === null || _a === void 0 ? void 0 : _a.kind) === track.kind;
            });
            if (availableTransceiver) {
                return availableTransceiver.sender.replaceTrack(track);
            }
            this.pc.addTrack(track, stream);
            return;
        }));
    }
    _setupDataChannel() {
        var _a;
        // this shouldn't happen, but we shouldn't set the datachannel up more than once
        if (this.dataChannel) {
            return;
        }
        // do nothing if a datachannel wasn't offered
        if ((_a = this.pc.localDescription) === null || _a === void 0 ? void 0 : _a.sdp.includes('webrtc-datachannel')) {
            this._log('info', 'creating data channel');
            this.dataChannel = this.pc.createDataChannel('videoConferenceControl');
            this.dataChannel.addEventListener('open', () => {
                this._log('info', 'data channel opened');
            });
            this.dataChannel.addEventListener('message', this._handleDataChannelMessage.bind(this));
            this.dataChannel.addEventListener('close', () => {
                this._log('info', 'closing data channel');
            });
            this.dataChannel.addEventListener('error', (error) => {
                this._log('error', 'Error occurred with the data channel', error);
            });
        }
    }
    _handleDataChannelMessage(event) {
        try {
            const message = JSON.parse(event.data);
            this.emit('dataChannelMessage', message);
        }
        catch (e) {
            this._log('error', 'Failed to parse data channel message', { error: e });
        }
    }
}

class GenesysCloudMediaSession {
    constructor(webrtcExtension, params) {
        this.webrtcExtension = webrtcExtension;
        this.iceCandidatesDiscovered = 0;
        this.iceCandidatesReceivedFromPeer = 0;
        this.state = 'pending';
        this.connectionState = 'starting';
        this.id = params.id;
        this.fromJid = params.fromJid;
        this.peerID = params.peerID;
        this.logger = params.logger;
        this.conversationId = params.conversationId;
        this.fromUserId = params.fromUserId;
        this.pc = this.peerConnection = new RTCPeerConnection({
            iceServers: params.iceServers,
            iceTransportPolicy: params.iceTransportPolicy
        });
        this.originalRoomJid = params.originalRoomJid;
        this.sessionType = SessionTypes[params.sessionType];
        this.ignoreHostCandidatesFromRemote = !!params.ignoreHostCandidatesFromRemote;
        this.allowIPv6 = !!params.allowIPv6;
        this.allowTCP = !!params.allowTCP;
        this.reinvite = !!params.reinvite;
        this.privAnswerMode = params.privAnswerMode;
        // babel does not like the typescript recipe for multiple extends so we are hacking this one
        // referencing https://github.com/babel/babel/issues/798
        const eventEmitter = new EventEmitter();
        Object.keys(eventEmitter.__proto__).forEach((name) => {
            this[name] = eventEmitter[name];
        });
        if (!params.optOutOfWebrtcStatsTelemetry) {
            this.setupStatsGatherer();
        }
        this.peerConnection.addEventListener('icecandidate', this.onIceCandidate.bind(this));
        this.peerConnection.addEventListener('iceconnectionstatechange', this.onIceStateChange.bind(this));
        this.peerConnection.addEventListener('connectionstatechange', this.onConnectionStateChange.bind(this));
        this.peerConnection.addEventListener('icecandidateerror', this.onIceCandidateError.bind(this));
        // sync the session state after a silent disconnect, like putting the system to sleep.
    }
    keepStateInSyncWithPeerConnection() {
        if (this.stateSyncTimeout) {
            clearTimeout(this.stateSyncTimeout);
            this.stateSyncTimeout = undefined;
        }
        const lastTime = Date.now();
        const checkInterval = 2000;
        const threshold = 2000;
        this.stateSyncTimeout = setTimeout(() => {
            const currentTime = Date.now();
            const timeDiff = currentTime - lastTime;
            if (timeDiff > checkInterval + threshold) {
                this.log('warn', 'MediaSession detected timer anomally. Reasons include taxed resources or system sleep.');
                // if we have a state mismatch
                if (this.state !== 'ended' && ['failed', 'closed'].includes(this.peerConnection.connectionState)) {
                    this.log('warn', 'state mismatch between session.state and peerConnection.connectionState, manually terminating the session', { sessionId: this.id, conversationId: this.conversationId, sessionType: this.sessionType });
                    this.state = 'ended';
                    this.onSessionTerminate();
                }
            }
            if (this.state !== 'ended') {
                this.keepStateInSyncWithPeerConnection();
            }
        }, checkInterval);
    }
    setRemoteDescription(sdp) {
        return __awaiter$5(this, void 0, void 0, function* () {
            return this.peerConnection.setRemoteDescription({ sdp, type: 'offer' });
        });
    }
    getLogDetails() {
        return {
            conversationId: this.conversationId,
            sessionId: this.id,
            sessionType: this.sessionType
        };
    }
    log(level, message, details, options) {
        if (!details) {
            details = {};
        }
        const logDetails = Object.assign(Object.assign({}, details), this.getLogDetails());
        this.logger[level](message, logDetails, options);
    }
    sendGenesysWebrtc(info) {
        return __awaiter$5(this, void 0, void 0, function* () {
            info.id = info.id || v4();
            info.jsonrpc = info.jsonrpc || '2.0';
            const iq = {
                type: 'set',
                genesysWebrtc: info,
                from: this.webrtcExtension.jid,
                to: this.peerID
            };
            return this.webrtcExtension.sendIq(iq);
        });
    }
    end(reason = 'success', silent = false) {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.state = 'ended';
            const params = {
                sessionId: this.id,
                reason: reason.condition || reason
            };
            if (!silent) {
                yield timeoutPromise$1((resolve, reject) => {
                    this.log('info', 'sending sdp terminate');
                    this.sendGenesysWebrtc({ jsonrpc: '2.0', method: 'terminate', params }).then(resolve, reject);
                }, 2000, 'Timeout waiting for response to termination request', { sessionId: this.id, conversationId: this.conversationId, sessionType: this.sessionType }).catch((e) => this.logger.error(e));
            }
            this.onSessionTerminate(params.reason);
        });
    }
    setupStatsGatherer() {
        this.statsGatherer = new StatsGatherer(this.peerConnection);
        this.statsGatherer.on('stats', this.emit.bind(this, 'stats'));
    }
    onIceStateChange() {
        return __awaiter$5(this, void 0, void 0, function* () {
            const iceState = this.peerConnection.iceConnectionState;
            const sessionId = this.id;
            const conversationId = this.conversationId;
            const sessionType = this.sessionType;
            this.log('info', 'ICE state changed: ', { iceState, sessionId, conversationId });
            if (iceState === 'disconnected') {
                // this means we actually connected at one point
                if (this.peerConnection.signalingState === 'stable') {
                    this.interruptionStart = new Date();
                    this.log('info', 'Connection state is interrupted', { sessionId, conversationId, sessionType });
                }
            }
            else if (iceState === 'connected') {
                this.log('info', 'sending session-info: active');
                const params = {
                    sessionId: this.id,
                    status: 'active'
                };
                yield this.sendGenesysWebrtc({
                    jsonrpc: '2.0',
                    params,
                    method: 'info',
                });
                this._setupDataChannel();
            }
            else if (iceState === 'failed') {
                this.log('info', 'ICE connection failed', {
                    candidatesDiscovered: this.iceCandidatesDiscovered,
                    candidatesReceivedFromPeer: this.iceCandidatesReceivedFromPeer
                });
            }
        });
    }
    onConnectionStateChange() {
        const connectionState = this.connectionState = this.peerConnection.connectionState;
        const sessionId = this.id;
        const conversationId = this.conversationId;
        const sessionType = this.sessionType;
        if (connectionState === 'connected') {
            this.keepStateInSyncWithPeerConnection();
        }
        this.log('info', 'Connection state changed: ', { connectionState, sessionId, conversationId, sessionType });
        if (this.interruptionStart) {
            if (connectionState === 'connected') {
                const diff = new Date().getTime() - this.interruptionStart.getTime();
                this.log('info', 'Connection was interrupted but was successfully recovered/connected', { sessionId, conversationId, sessionType, timeToRecover: diff });
                this.interruptionStart = undefined;
            }
            else if (connectionState === 'failed') {
                this.log('info', 'Connection was interrupted and failed to recover, cleaning up', { sessionId, conversationId, sessionType });
                this.state = 'ended';
                this.onSessionTerminate();
            }
        }
    }
    onIceCandidateError(ev) {
        const event = ev;
        this.log('error', 'IceCandidateError', {
            errorCode: event.errorCode,
            errorText: event.errorText,
            url: event.url
        });
    }
    /* istanbul ignore next */
    createIceCandidate(sdpMid, candidateStr) {
        return new RTCIceCandidate({
            sdpMid,
            candidate: candidateStr
        });
    }
    addRemoteIceCandidate(sdpFragment) {
        return __awaiter$5(this, void 0, void 0, function* () {
            // matches the mline type. example: "m=video 9 RTP/AVP 0" should result in "video"
            const sdpMid = sdpFragment.match(/m=([^\s]+)/)[1];
            // matches the entire a= line without the "a="
            const candidate = sdpFragment.match(/a=([^\\\r]+)/)[1];
            const iceCandidate = this.createIceCandidate(sdpMid, candidate);
            yield this.peerConnection.addIceCandidate(iceCandidate);
        });
    }
    // this is for ice candidates we harvest for ourself
    onIceCandidate(e) {
        var _a, _b;
        let candidateString = (_a = e.candidate) === null || _a === void 0 ? void 0 : _a.candidate;
        let sdpMid = (_b = e.candidate) === null || _b === void 0 ? void 0 : _b.sdpMid;
        let sdpStr;
        if (e.candidate) {
            if (!this.allowTCP && e.candidate.protocol === 'tcp') {
                return;
            }
            if (!this.allowIPv6) {
                const addressRegex = /.+udp [^ ]+ ([^ ]+).*typ host/;
                const matches = addressRegex.exec(e.candidate.candidate);
                const ipv4Regex = /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/;
                if (matches && !matches[1].match(ipv4Regex)) {
                    this.log('debug', 'Filtering out IPv6 candidate', e.candidate.candidate);
                    return;
                }
            }
            // this has too much information and can only be logged locally (debug)
            this.log('debug', 'Processing ice candidate', e.candidate);
            // this one is info level so it can go to the server
            this.log('info', 'Discovered ice candidate to send to peer', { type: e.candidate.type });
            this.iceCandidatesDiscovered++;
            // media team asked us to send the mline and prefix the candidate with "a="
            sdpStr = `m=${sdpMid} 9 RTP/AVP 0\r\na=${candidateString}`;
        }
        else {
            sdpStr = 'a=end-of-candidates';
            this.emit('endOfCandidates');
        }
        return this.sendGenesysWebrtc({
            jsonrpc: '2.0',
            method: 'iceCandidate',
            params: {
                sessionId: this.id,
                sdp: sdpStr
            }
        });
    }
    onSessionTerminate(reason) {
        if (this.peerConnection) {
            this.peerConnection.close();
        }
        this.logger.info('emitting sdp media-session (terminate)');
        this.emit('terminated', { condition: reason || 'success' });
    }
    addTrack(track, stream) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const availableTransceiver = this.peerConnection.getTransceivers().find((transceiver) => {
                var _a;
                return !transceiver.sender.track && ((_a = transceiver.receiver.track) === null || _a === void 0 ? void 0 : _a.kind) === track.kind;
            });
            if (availableTransceiver) {
                return availableTransceiver.sender.replaceTrack(track);
            }
            this.peerConnection.addTrack(track, stream);
        });
    }
    _setupDataChannel() {
        var _a;
        // this shouldn't happen, but we shouldn't set the datachannel up more than once
        if (this.dataChannel) {
            return;
        }
        // do nothing if a datachannel wasn't offered
        if ((_a = this.peerConnection.remoteDescription) === null || _a === void 0 ? void 0 : _a.sdp.includes('webrtc-datachannel')) {
            this.log('info', 'creating data channel');
            this.dataChannel = this.peerConnection.createDataChannel('videoConferenceControl');
            this.dataChannel.addEventListener('open', () => {
                this.log('info', 'data channel opened');
            });
            this.dataChannel.addEventListener('message', this._handleDataChannelMessage.bind(this));
            this.dataChannel.addEventListener('close', () => {
                this.log('info', 'closing data channel');
            });
            this.dataChannel.addEventListener('error', (error) => {
                this.log('error', 'Error occurred with the data channel', error);
            });
        }
    }
    _handleDataChannelMessage(event) {
        try {
            const message = JSON.parse(event.data);
            this.emit('dataChannelMessage', message);
        }
        catch (e) {
            this.log('error', 'Failed to parse data channel message', { error: e });
        }
    }
    accept() {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.state = 'active';
            const answer = yield this.peerConnection.createAnswer();
            yield this.peerConnection.setLocalDescription(answer);
            const params = {
                sdp: answer.sdp,
                sessionId: this.id
            };
            this.logger.info('sending sdp answer', params);
            return this.sendGenesysWebrtc({
                jsonrpc: '2.0',
                method: 'answer',
                params
            });
        });
    }
    mute(userId, type) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const params = {
                sessionId: this.id,
                type
            };
            return this.sendGenesysWebrtc({
                jsonrpc: '2.0',
                method: 'mute',
                params
            });
        });
    }
    unmute(userId, type) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const params = {
                sessionId: this.id,
                type
            };
            return this.sendGenesysWebrtc({
                jsonrpc: '2.0',
                method: 'unmute',
                params
            });
        });
    }
    /* istanbul ignore next */
    removeTrack() {
        return __awaiter$5(this, void 0, void 0, function* () {
            throw new Error('Not Implemented');
        });
    }
    /* istanbul ignore next */
    hold() {
        return __awaiter$5(this, void 0, void 0, function* () {
            throw new Error('Not Implemented');
        });
    }
    /* istanbul ignore next */
    resume() {
        return __awaiter$5(this, void 0, void 0, function* () {
            throw new Error('Not Implemented');
        });
    }
    toString() {
        return {
            connectionState: this.connectionState,
            state: this.state,
            sessionType: this.sessionType,
            fromJid: this.fromJid,
            conversationId: this.conversationId,
            id: this.id,
            peerConnection: this.peerConnection
        };
    }
}

const correlationIdHeaderName = 'inin-correlation-id';
class HttpClient {
    constructor() {
        this._httpRetryingRequests = new Map();
    }
    requestApiWithRetry(path, opts, retryInterval) {
        const retry = retryPromise(this.requestApi.bind(this, path, opts), (error) => {
            var _a, _b, _c;
            let retryValue = false;
            if (error === null || error === void 0 ? void 0 : error.response) {
                retryValue = HttpClient.retryStatusCodes.has(error.response.status || 0);
                // This *should* be an axios error according to typings, but it appears this could be an AxiosError *or* and XmlHttpRequest
                // we'll check both to be safe
                const retryAfter = ((_a = error.response.headers) === null || _a === void 0 ? void 0 : _a['retry-after']) || ((_c = (_b = error.response).getResponseHeader) === null || _c === void 0 ? void 0 : _c.call(_b, 'retry-after'));
                if (retryAfter) {
                    (opts.logger || console).debug('retry-after header found on response. setting retry delay', { retryAfter });
                    // retry after comes in seconds, we need to return milliseconds
                    retryValue = parseInt(retryAfter, 10) * 1000;
                }
            }
            return retryValue;
        }, retryInterval, opts.logger);
        this._httpRetryingRequests.set(retry._id, retry);
        /* tslint:disable:no-floating-promises */
        retry.promise.then(() => this.cancelRetryRequest(retry._id), () => this.cancelRetryRequest(retry._id));
        return retry;
    }
    requestApi(path, opts) {
        const logger = opts.logger || console;
        const start = new Date().getTime();
        const url = this._buildUri(opts.host, path, opts.version);
        const headers = Object.assign({ 'content-type': opts.contentType || 'application/json' }, (opts.customHeaders || {}));
        const params = {
            method: opts.method,
            url,
            data: opts.data,
            responseType: opts.responseType,
            timeout: opts.requestTimeout || 30000,
            headers
        };
        // default to include auth header
        if (!opts.noAuthHeader) {
            params.headers['Authorization'] = `Bearer ${opts.authToken}`;
        }
        const boundHandler = this.handleResponse.bind(this, logger, start, params);
        return axios$1(params)
            .then(boundHandler, boundHandler);
    }
    handleResponse(logger, start, params, res) {
        var _a, _b, _c;
        let now = new Date().getTime();
        let elapsed = (now - start) + 'ms';
        if (res instanceof AxiosError) {
            // sanitize the auth token
            if ((_b = (_a = res.config) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.Authorization) {
                res.config.headers.Authorization = 'redacted';
            }
            // handles request timeout
            if (res.code === 'ECONNABORTED') {
                logger.debug(`request error: ${params.url}`, {
                    message: res.message,
                    now,
                    elapsed
                }, { skipServer: true });
                return Promise.reject(res);
            }
            /* istanbul ignore next */
            const response = res.response || {};
            let status = response.status;
            let correlationId = response.headers && response.headers[correlationIdHeaderName];
            let body = response.data;
            let error = Object.assign(Object.assign({}, res), { text: (_c = response.request) === null || _c === void 0 ? void 0 : _c.response });
            logger.debug(`request error: ${params.url}`, {
                message: res.message,
                now,
                elapsed,
                status,
                correlationId,
                body
            }, { skipServer: true });
            return Promise.reject(error);
        }
        let status = res.status;
        let correlationId = res.headers[correlationIdHeaderName];
        let body = JSON.stringify(res.data);
        logger.debug(`response: ${params.method.toUpperCase()} ${params.url}`, {
            now,
            status,
            elapsed,
            correlationId,
            body
        }, { skipServer: true });
        return Promise.resolve(res);
    }
    stopAllRetries() {
        Array.from(this._httpRetryingRequests.keys())
            .forEach(key => this.cancelRetryRequest(key));
    }
    cancelRetryRequest(retryId) {
        const value = this._httpRetryingRequests.get(retryId);
        if (value) {
            /* if the promise has already completed, this will do nothing. Still need to remove it from the map */
            value.cancel(new Error('Retry request cancelled'));
            this._httpRetryingRequests.delete(retryId);
        }
        return true;
    }
    formatRequestError(error) {
        /* if network error */
        if (this.isSuperagentNetworkError(error)) {
            return {
                status: error.status,
                method: error.method,
                url: error.url,
                crossDomain: error.crossDomain,
                message: error.message,
                name: error.name,
                stack: error.stack
            };
        }
        /* if superagent response error */
        if (this.isSuperagentResponseError(error)) {
            const res = error.response;
            return {
                status: error.status,
                correlationId: res.headers['inin-correlation-id'],
                // Potentially could contain PII
                // responseBody: res.text,
                // requestBody: res.req._data,
                // url: res.error.url,
                message: 'Error making HTTP request',
                method: res.req.method,
                name: res.error.name,
                stack: res.error.stack
            };
        }
        /* if we don't have a superagent error */
        return error;
    }
    isSuperagentNetworkError(error) {
        return (error &&
            // these properties may have the value of `undefined` but they will still be set
            error.hasOwnProperty('status') &&
            error.hasOwnProperty('method') &&
            error.hasOwnProperty('url'));
    }
    isSuperagentResponseError(error) {
        return !!(error &&
            error.response &&
            error.response.body &&
            error.response.req);
    }
    _buildUri(host, path, version = 'v2') {
        path = path.replace(/^\/+|\/+$/g, ''); // trim leading/trailing /
        if (host.indexOf('http') === 0) {
            return `${host}/api/${version}/${path}`;
        }
        return `https://api.${host}/api/${version}/${path}`;
    }
}
HttpClient.retryStatusCodes = new Set([
    408,
    413,
    429,
    500,
    502,
    503,
    504
]);

const events = {
    REQUEST_WEBRTC_DUMP: 'requestWebrtcDump',
    /* jingle messaging */
    REQUEST_INCOMING_RTCSESSION: 'requestIncomingRtcSession',
    CANCEL_INCOMING_RTCSESSION: 'cancelIncomingRtcSession',
    HANDLED_INCOMING_RTCSESSION: 'handledIncomingRtcSession',
    OUTGOING_RTCSESSION_PROCEED: 'outgoingRtcSessionProceed',
    OUTGOING_RTCSESSION_REJECTED: 'outgoingRtcSessionRejected',
    // /* jingle */
    // RTC_ICESERVERS: 'rtcIceServers', // ice servers have been discovered
    INCOMING_RTCSESSION: 'incomingRtcSession',
    OUTGOING_RTCSESSION: 'outgoingRtcSession',
    RTCSESSION_ERROR: 'rtcSessionError' // jingle error occurred
    // TRACE_RTCSESSION: 'traceRtcSession', // trace messages for logging, etc
    // UPGRADE_MEDIA_ERROR: 'upgradeMediaError', // error occurred joining conference
    // /* other  */
    // UPDATE_MEDIA_PRESENCE: 'updateMediaPresence',
    // LASTN_CHANGE: 'lastNChange'
};
const desiredMaxStatsSize = 15000;
const MAX_DISCO_RETRIES = 2;
const ICE_SERVER_TIMEOUT = 15000; // 15 seconds
const ICE_SERVER_REFRESH_PERIOD = 1000 * 60 * 60 * 6; // 6 hours
class WebrtcExtension extends EventEmitter {
    constructor(client, clientOptions) {
        super();
        this.ignoredSessions = new lruCache({ max: 10, maxAge: 10 * 60 * 60 * 6 });
        this.pendingSessions = {};
        this.statsArr = [];
        this.throttleSendStatsInterval = 25000;
        this.currentMaxStatSize = desiredMaxStatsSize;
        this.statsSizeDecreaseAmount = 3000;
        this.statBuffer = 0;
        this.discoRetries = 0;
        this.iceServers = [];
        this.webrtcSessions = [];
        this.client = client;
        this.config = {
            allowIPv6: clientOptions.allowIPv6 === true,
            optOutOfWebrtcStatsTelemetry: clientOptions.optOutOfWebrtcStatsTelemetry
        };
        this.logger = client.logger;
        this.addEventListeners();
        this.throttledSendStats = lodash_throttle(this.sendStats.bind(this), this.throttleSendStatsInterval, { leading: false, trailing: true });
        this.client.on('jingle:outgoing', (session) => {
            this.logger.info('Emitting jingle:outgoing media-session (session-init)', session.sid);
            return this.emit(events.OUTGOING_RTCSESSION, session);
        });
        this.client.on('jingle:incoming', (session) => {
            this.logger.info('Emitting jingle:incoming media-session (session-init)', session.sid);
            return this.emit(events.INCOMING_RTCSESSION, session);
        });
        this.client.on('jingle:created', (session) => {
            // if this is not a JingleSession, this is a generic BaseSession from jingle, aka dummy session.
            // in this case, we can just kill this session because we will be using
            if (!(session instanceof StanzaMediaSession)) {
                session.end('cancel', true);
            }
        });
        window.addEventListener('offline', () => this.onOnlineStatusChange(false));
        window.addEventListener('online', () => this.onOnlineStatusChange(true));
    }
    get jid() {
        var _a;
        return (_a = this.stanzaInstance) === null || _a === void 0 ? void 0 : _a.jid;
    }
    onOnlineStatusChange(online) {
        this.addStatToQueue({
            actionName: 'WebrtcStats',
            details: {
                _eventType: 'onlineStatus',
                _eventTimestamp: new Date().getTime(),
                online,
            }
        });
    }
    handleStanzaInstanceChange(stanzaInstance) {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.stanzaInstance = stanzaInstance;
            if (this.refreshIceServersTimer) {
                clearInterval(this.refreshIceServersTimer);
                this.refreshIceServersTimer = null;
            }
            stanzaInstance.on('iq:set:genesysWebrtc', this.handleGenesysWebrtcStanza.bind(this));
            this.refreshIceServersTimer = setInterval(this.refreshIceServers.bind(this), ICE_SERVER_REFRESH_PERIOD);
            this.client.emit('sessionManagerChange', stanzaInstance);
        });
    }
    configureNewStanzaInstance(stanzaInstance) {
        return __awaiter$5(this, void 0, void 0, function* () {
            Object.assign(stanzaInstance.jingle.config.peerConnectionConfig, {
                sdpSemantics: 'unified-plan'
            });
            yield this.configureStanzaIceServers(stanzaInstance);
            stanzaInstance.stanzas.define(definitions);
            stanzaInstance.jingle.prepareSession = this.prepareSession.bind(this);
            stanzaInstance.jingle.on('log', (level, message, data) => {
                this.logger[level](message, data);
            });
            const eventsToProxy = [
                'iceConnectionType',
                'peerTrackAdded',
                'peerTrackRemoved',
                'mute',
                'unmute',
                'sessionState',
                'connectionState',
                'terminated',
                'stats',
                'endOfCandidates'
            ];
            for (const e of eventsToProxy) {
                stanzaInstance.jingle.on(e, (session, ...data) => {
                    if (!(session instanceof StanzaMediaSession)) {
                        return;
                    }
                    session.emit(e, ...data);
                });
            }
        });
    }
    configureStanzaIceServers(stanzaInstance) {
        /* clear out stanzas default use of google's stun server */
        stanzaInstance.jingle.config.iceServers = [];
        /**
         * NOTE: calling this here should not interfere with the `webrtc.ts` extension
         *  refreshingIceServers since that is async and this constructor is sync
         */
        this.setIceServers([], stanzaInstance);
        return this._refreshIceServers(stanzaInstance);
    }
    handleGenesysOffer(iq) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const message = iq.genesysWebrtc;
            const params = message.params;
            const ignoreHostCandidatesForForceTurnFF = this.getIceTransportPolicy() === 'relay' && browserama_min.exports.isFirefox;
            const commonParams = {
                id: params.sessionId,
                logger: this.logger,
                peerID: iq.from,
                fromJid: iq.from,
                sessionType: this.getSessionTypeByJid(iq.from),
                conversationId: params.conversationId,
                ignoreHostCandidatesFromRemote: ignoreHostCandidatesForForceTurnFF,
                optOutOfWebrtcStatsTelemetry: !!this.config.optOutOfWebrtcStatsTelemetry,
                allowIPv6: this.config.allowIPv6,
                iceServers: this.iceServers,
                reinvite: !!params.reinvite,
                iceTransportPolicy: this.getIceTransportPolicy()
            };
            let mediaSessionParams;
            // we should only do something if the pending session tells us to
            const pendingSession = this.pendingSessions[params.sessionId];
            if (pendingSession) {
                mediaSessionParams = Object.assign(Object.assign({}, commonParams), { meetingId: pendingSession.meetingId, fromUserId: pendingSession.fromUserId, originalRoomJid: pendingSession.originalRoomJid, privAnswerMode: pendingSession.privAnswerMode });
            }
            else {
                mediaSessionParams = commonParams;
            }
            // if we receive an offer for an existing session and the ice info has not changed, this is
            // a renogotiate. If the ice has changed, it's a re-invite and we need to create a new session.
            const existingSession = this.webrtcSessions.find(s => s.id === mediaSessionParams.id);
            this.logger.info('offer received', { existingSession: !!existingSession, mediaSessionParams });
            if (existingSession) {
                existingSession.conversationId = params.conversationId;
                // renego
                if (!iceIsDifferent(existingSession.peerConnection.remoteDescription.sdp, params.sdp)) {
                    return this.handleGenesysRenegotiate(existingSession, params.sdp);
                }
            }
            // reinvite/new session handled the same way here
            const session = new GenesysCloudMediaSession(this, mediaSessionParams);
            yield session.setRemoteDescription(params.sdp);
            this.proxyStatsForSession(session);
            session.on('sendIq', (iq) => { var _a; return (_a = this.stanzaInstance) === null || _a === void 0 ? void 0 : _a.sendIQ(iq); });
            session.on('terminated', () => {
                this.webrtcSessions = this.webrtcSessions.filter(s => s.id !== session.id);
            });
            this.webrtcSessions.push(session);
            this.logger.info('emitting sdp media-session (offer)');
            return this.emit(events.INCOMING_RTCSESSION, session);
        });
    }
    handleGenesysRenegotiate(existingSession, newSdp) {
        return __awaiter$5(this, void 0, void 0, function* () {
            yield existingSession.peerConnection.setRemoteDescription({ sdp: newSdp, type: 'offer' });
            yield existingSession.accept();
        });
    }
    handleGenesysIceCandidate(iq) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const message = iq.genesysWebrtc;
            const params = message.params;
            const session = this.getSessionById(params.sessionId);
            yield session.addRemoteIceCandidate(params.sdp);
        });
    }
    handleGenesysTerminate(iq) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const message = iq.genesysWebrtc;
            const params = message.params;
            const session = this.getSessionById(params.sessionId);
            session.onSessionTerminate(params.reason);
        });
    }
    getSessionById(id) {
        const session = this.getAllSessions().find(session => session.id === id);
        if (!session) {
            const error = new Error('Failed to find session by id');
            this.logger.error(error, { sessionId: id });
            throw error;
        }
        return session;
    }
    sendIq(iq) {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (!this.stanzaInstance) {
                throw new Error('Failed to send iq because there was no stanza instance');
            }
            return this.stanzaInstance.sendIQ(iq);
        });
    }
    handleMessage(msg) {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (msg.propose) {
                yield this.handlePropose(msg);
            }
            else if (msg.retract) {
                this.handleRetract(msg.retract.sessionId);
            }
            else if (msg.accept) {
                this.handledIncomingRtcSession(msg.accept.sessionId, msg);
            }
            else if (msg.reject) {
                this.handledIncomingRtcSession(msg.reject.sessionId, msg);
            }
        });
    }
    handleGenesysWebrtcStanza(iq) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const webrtcInfo = iq.genesysWebrtc;
            if (webrtcInfo.method === 'offer') {
                return this.handleGenesysOffer(iq);
            }
            else if (webrtcInfo.method === 'iceCandidate') {
                return this.handleGenesysIceCandidate(iq);
            }
            else if (webrtcInfo.method === 'terminate') {
                return this.handleGenesysTerminate(iq);
            }
        });
    }
    prepareSession(options) {
        const pendingSession = this.pendingSessions[options.sid];
        // TODO: when we can safely remove the jingle session handling, this pending session
        // will need to be deleted in the `handleGenesysOffer` fn.
        if (pendingSession) {
            delete this.pendingSessions[pendingSession.sessionId];
        }
        if (pendingSession === null || pendingSession === void 0 ? void 0 : pendingSession.sdpOverXmpp) {
            this.logger.debug('skipping creation of jingle webrtc session due to sdpOverXmpp on the pendingSession');
            return;
        }
        const ignoreHostCandidatesForForceTurnFF = this.getIceTransportPolicy() === 'relay' && browserama_min.exports.isFirefox;
        const gcSessionOpts = {
            options,
            logger: this.logger,
            id: options.sid,
            fromJid: options.peerID,
            peerID: options.peerID,
            optOutOfWebrtcStatsTelemetry: !!this.config.optOutOfWebrtcStatsTelemetry,
            conversationId: pendingSession === null || pendingSession === void 0 ? void 0 : pendingSession.conversationId,
            fromUserId: pendingSession === null || pendingSession === void 0 ? void 0 : pendingSession.fromJid,
            originalRoomJid: pendingSession === null || pendingSession === void 0 ? void 0 : pendingSession.originalRoomJid,
            sessionType: pendingSession === null || pendingSession === void 0 ? void 0 : pendingSession.sessionType,
            allowIPv6: this.config.allowIPv6,
            ignoreHostCandidatesFromRemote: ignoreHostCandidatesForForceTurnFF,
            meetingId: pendingSession === null || pendingSession === void 0 ? void 0 : pendingSession.meetingId
        };
        const session = new StanzaMediaSession(gcSessionOpts);
        this.proxyStatsForSession(session);
        return session;
    }
    // This should probably go into the webrtc sdk, but for now I'm putting here so it's in a central location.
    // This should be moved when the sdk is the primary consumer
    proxyStatsForSession(session) {
        session.on('stats', (statsEvent) => {
            const statsCopy = JSON.parse(JSON.stringify(statsEvent));
            const extraDetails = {
                conversationId: session.conversationId,
                sessionId: session.id,
                sessionType: session.sessionType
            };
            // format the event to what the api expects
            const event = formatStatsEvent(statsCopy, extraDetails);
            this.addStatToQueue(event);
        });
    }
    // this fn checks to see if the new stat fits inside the buffer. If not, send the queue;
    addStatToQueue(stat) {
        if (this.config.optOutOfWebrtcStatsTelemetry) {
            return;
        }
        if (!stat.details._appId) {
            stat.details._appId = this.logger.clientId;
            stat.details._appName = 'streamingclient';
            stat.details._appVersion = Client.version;
        }
        stat.details._originAppId = this.client.config.appId;
        // nr only accepts single level objects so we must flatten everything just in case
        const flattenedDetails = deepFlatten(stat.details);
        // new relic doesn't accept booleans so we convert them to strings
        Object.keys(flattenedDetails).forEach((key) => {
            const val = flattenedDetails[key];
            if (typeof val === 'boolean') {
                flattenedDetails[key] = `${val}`;
            }
        });
        const formattedStat = Object.assign(Object.assign({}, stat), { details: flattenedDetails });
        const currentEventSize = calculatePayloadSize(formattedStat);
        // Check if the size of the current event plus the size of the previous stats exceeds max size.
        const exceedsMaxStatSize = this.statBuffer + currentEventSize > this.currentMaxStatSize;
        this.statsArr.push(formattedStat);
        this.statBuffer += currentEventSize;
        // If it exceeds max size, don't append just send current payload.
        if (exceedsMaxStatSize) {
            this.sendStatsImmediately();
        }
        else {
            this.throttledSendStats();
        }
    }
    getLogDetailsForPendingSessionId(sessionId) {
        const logDetails = {
            sessionId
        };
        const pendingSession = this.pendingSessions[sessionId];
        if (pendingSession) {
            logDetails.sessionType = pendingSession.sessionType;
            logDetails.conversationId = pendingSession.conversationId;
        }
        return logDetails;
    }
    sendStatsImmediately() {
        // `throttledSendStats` needs to have a scheduled exeuction for `flush` to invoke the throttled function
        this.throttledSendStats();
        this.throttledSendStats.flush();
    }
    sendStats() {
        var _a, _b;
        return __awaiter$5(this, void 0, void 0, function* () {
            if (!navigator.onLine) {
                return;
            }
            const statsToSend = [];
            let currentSize = 0;
            for (const stats of this.statsArr) {
                const statSize = calculatePayloadSize(stats);
                if (currentSize + statSize < this.currentMaxStatSize) {
                    statsToSend.push(stats);
                    currentSize += statSize;
                }
                else {
                    break;
                }
            }
            this.statsArr.splice(0, statsToSend.length);
            this.statBuffer = this.statsArr.reduce((currentSize, stats) => currentSize + calculatePayloadSize(stats), 0);
            if (!statsToSend.length || this.client.isGuest) {
                return;
            }
            const data = {
                appName: 'streamingclient',
                appVersion: Client.version,
                originAppName: this.client.config.appName,
                originAppVersion: this.client.config.appVersion,
                actions: statsToSend
            };
            // At least for now, we'll just fire and forget. Since this is non-critical, we'll not retry failures
            try {
                let authToken = this.client.config.authToken;
                let url = 'diagnostics/newrelic/insights';
                if (this.client.backgroundAssistantMode) {
                    authToken = this.client.config.jwt;
                    url += '/backgroundassistant';
                }
                yield this.client.http.requestApi(url, {
                    method: 'post',
                    responseType: 'text',
                    host: this.client.config.apiHost,
                    authToken,
                    logger: this.client.logger,
                    data
                });
                this.currentMaxStatSize = desiredMaxStatsSize;
            }
            catch (err) {
                // re-add the stats to the buffer
                if (HttpClient.retryStatusCodes.has((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) || !navigator.onLine) {
                    this.statsArr = [...statsToSend, ...this.statsArr];
                    this.statBuffer = this.statsArr.reduce((currentSize, stats) => currentSize + calculatePayloadSize(stats), 0);
                }
                if (((_b = err.response) === null || _b === void 0 ? void 0 : _b.status) === 413) {
                    const attemptedPayloadSize = this.currentMaxStatSize;
                    this.currentMaxStatSize -= this.statsSizeDecreaseAmount;
                    this.logger.info('Failed to send stats due to 413, retrying with smaller set', { attemptedPayloadSize, newPayloadSize: this.currentMaxStatSize });
                    yield this.sendStats();
                }
                else {
                    this.logger.error('Failed to send stats', {
                        err,
                        numberOfFailedStats: statsToSend.length
                    }, { skipServer: !navigator.onLine });
                }
            }
        });
    }
    addEventListeners() {
        this.client.on('connected', () => {
            if (this.refreshIceServersTimer) {
                clearInterval(this.refreshIceServersTimer);
                this.refreshIceServersTimer = null;
            }
            this.refreshIceServersTimer = setInterval(this.refreshIceServers.bind(this), ICE_SERVER_REFRESH_PERIOD);
            return this.refreshIceServers()
                .catch((error) => this.logger.error('Error fetching ice servers after streaming-client connected', {
                error,
                channelId: this.client.config.channelId
            }));
        });
        this.client.on('disconnected', () => {
            clearInterval(this.refreshIceServersTimer);
            this.refreshIceServersTimer = null;
        });
    }
    /**
     * Stanza Handlers
     */
    handlePropose(msg) {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (msg.from === this.jid) {
                return;
            }
            const sessionId = msg.propose.sessionId;
            let sessionInfo = this.pendingSessions[sessionId];
            const isDuplicatePropose = !!sessionInfo;
            const sessionType = this.getSessionTypeByJid(msg.from);
            const loggingParams = { sessionId: sessionId, conversationId: msg.propose.conversationId, sessionType, isDuplicatePropose };
            this.logger.info('propose received', loggingParams);
            if (!isDuplicatePropose) {
                this.client.config;
                const proposeStat = {
                    actionName: 'WebrtcStats',
                    details: {
                        _eventTimestamp: new Date().getTime(),
                        _eventType: 'firstPropose',
                        conversationId: loggingParams.conversationId,
                        sdpViaXmppRequested: !!msg.propose.sdpOverXmpp,
                        sessionId: sessionId,
                        sessionType: sessionType,
                    }
                };
                this.addStatToQueue(proposeStat);
                // TODO: is ofrom used?
                // const roomJid = (msg.ofrom && msg.ofrom.full) || msg.from.full || msg.from;
                const fromJid = msg.from;
                const roomJid = fromJid;
                msg.propose.originalRoomJid = msg.propose.originalRoomJid || roomJid;
                sessionInfo = Object.assign(Object.assign({}, msg.propose), { toJid: msg.to, fromJid,
                    sessionType,
                    roomJid, id: sessionId, sdpOverXmpp: msg.propose.sdpOverXmpp, privAnswerMode: msg.propose.privAnswerMode });
                this.pendingSessions[sessionId] = sessionInfo;
            }
            if (sessionInfo.accepted) {
                this.logger.info('proceed already sent for this session, but sending another', loggingParams);
                yield this.acceptRtcSession(sessionId);
                return;
            }
            this.emit(events.REQUEST_INCOMING_RTCSESSION, Object.assign(sessionInfo));
        });
    }
    handleRetract(sessionId) {
        this.logger.info('retract received', this.getLogDetailsForPendingSessionId(sessionId));
        delete this.pendingSessions[sessionId];
        return this.emit(events.CANCEL_INCOMING_RTCSESSION, sessionId);
    }
    /**
     * Inform the client that another client has already taken care of the pendingSession
     */
    handledIncomingRtcSession(sessionId, msg) {
        let acceptedOrRejected = msg.accept ? 'accept' : 'reject';
        this.logger.info(`${acceptedOrRejected} received`, this.getLogDetailsForPendingSessionId(sessionId));
        return this.emit(events.HANDLED_INCOMING_RTCSESSION, sessionId);
    }
    /**
     * Exposed Api
     */
    initiateRtcSession(opts) {
        return __awaiter$5(this, void 0, void 0, function* () {
            // send media presence to join conference or screen screenRecording
            // or send propose to single client for 1:1 video chat
            const session = {
                to: opts.jid,
                propose: {
                    id: v4(),
                    descriptions: []
                }
            };
            if (opts.stream) {
                for (let track of Array.from(opts.stream.getTracks())) {
                    session.propose.descriptions.push({ media: track.kind });
                }
            }
            if (opts.provideVideo) {
                const videoDescriptionAlreadyExists = session.propose.descriptions.filter((desciption) => desciption.media === 'video').length > 0;
                if (!videoDescriptionAlreadyExists) {
                    session.propose.descriptions.push({ media: 'video' });
                }
            }
            if (opts.provideAudio) {
                const audioDescriptionAlreadyExists = session.propose.descriptions.filter((desciption) => desciption.media === 'audio').length > 0;
                if (!audioDescriptionAlreadyExists) {
                    session.propose.descriptions.push({ media: 'audio' });
                }
            }
            if (opts.mediaPurpose) {
                session.propose.descriptions.push({ media: opts.mediaPurpose });
            }
            if (opts.jid && opts.jid.match(/@conference/)) {
                let mediaDescriptions = session.propose.descriptions;
                if (mediaDescriptions.length === 0) {
                    mediaDescriptions = [{ media: 'listener' }];
                }
                const mediaPresence = {
                    type: 'upgradeMedia',
                    to: opts.jid,
                    id: v4(),
                    from: this.jid,
                    media: {
                        conversationId: opts.conversationId,
                        sourceCommunicationId: opts.sourceCommunicationId
                    }
                };
                // TODO? can't set last-n on parent element because it invalidates presence root schema
                for (const mediaDescription of mediaDescriptions) {
                    mediaPresence.media[mediaDescription.media] = true;
                }
                yield this.stanzaInstance.send('presence', mediaPresence);
            }
            else {
                yield this.stanzaInstance.send('message', session); // send as Message
                this.pendingSessions[session.propose.id] = session;
            }
            return session.propose.id;
        });
    }
    // jingle proceed
    acceptRtcSession(sessionId) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const session = this.pendingSessions[sessionId];
            if (!session) {
                this.emit(events.RTCSESSION_ERROR, 'Cannot accept session because it is not pending or does not exist');
                return;
            }
            const proceed = {
                to: session.fromJid,
                proceed: {
                    sessionId
                }
            };
            session.accepted = true;
            const details = this.getLogDetailsForPendingSessionId(sessionId);
            this.logger.info('sending jingle proceed', details);
            yield this.stanzaInstance.send('message', proceed); // send as Message
            this.logger.info('sent jingle proceed', details);
        });
    }
    rejectRtcSession(sessionId, ignore = false) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const logDetails = this.getLogDetailsForPendingSessionId(sessionId);
            const session = this.pendingSessions[sessionId];
            if (!session) {
                this.emit(events.RTCSESSION_ERROR, 'Cannot reject session because it is not pending or does not exist');
                return;
            }
            delete this.pendingSessions[sessionId];
            if (ignore) {
                this.ignoredSessions.set(sessionId, true);
            }
            else {
                const reject1 = {
                    to: toBare_1(this.jid),
                    reject: {
                        sessionId
                    }
                };
                const firstMessage = this.stanzaInstance.send('message', reject1); // send as Message
                const reject2 = {
                    to: session.fromJid,
                    reject: {
                        sessionId
                    }
                };
                const secondMessage = this.stanzaInstance.send('message', reject2); // send as Message
                this.logger.info('sending jingle reject', logDetails);
                yield Promise.all([firstMessage, secondMessage]);
                this.logger.info('sent jingle reject', logDetails);
            }
        });
    }
    rtcSessionAccepted(sessionId) {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.pendingSessions[sessionId];
            const logDetails = this.getLogDetailsForPendingSessionId(sessionId);
            const accept = {
                to: toBare_1(this.jid),
                accept: {
                    sessionId
                }
            };
            this.logger.info('sending session-info:accept', logDetails);
            yield this.stanzaInstance.send('message', accept); // send as Message
            this.logger.info('sent session-info:accept', logDetails);
        });
    }
    notifyScreenShareStart(session) {
        return __awaiter$5(this, void 0, void 0, function* () {
            return this.stanzaInstance.send('iq', {
                to: `${session.peerID}`,
                from: this.jid,
                type: 'set',
                jingle: {
                    action: Constants.JingleAction.SessionInfo,
                    sid: session.id,
                    screenstart: {}
                }
            });
        });
    }
    notifyScreenShareStop(session) {
        return __awaiter$5(this, void 0, void 0, function* () {
            return this.stanzaInstance.send('iq', {
                to: `${session.peerID}`,
                from: this.jid,
                type: 'set',
                jingle: {
                    action: Constants.JingleAction.SessionInfo,
                    sid: session.id,
                    screenstop: {}
                }
            });
        });
    }
    cancelRtcSession(sessionId) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const session = this.pendingSessions[sessionId];
            const logDetails = this.getLogDetailsForPendingSessionId(sessionId);
            if (!session) {
                this.emit(events.RTCSESSION_ERROR, 'Cannot cancel session because it is not pending or does not exist');
                return;
            }
            const retract = {
                to: session.toJid,
                retract: {
                    sessionId
                }
            };
            delete this.pendingSessions[sessionId];
            this.logger.info('sending jingle retract', logDetails);
            yield this.stanzaInstance.send('message', retract); // send as Message
            this.logger.info('sent jingle retract', logDetails);
        });
    }
    refreshIceServers() {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (!this.refreshIceServersRetryPromise) {
                this.refreshIceServersRetryPromise = retryPromise(this._refreshIceServers.bind(this, this.stanzaInstance), (error) => {
                    if (++this.discoRetries > MAX_DISCO_RETRIES) {
                        this.logger.warn('fetching ice servers failed. max retries reached.', {
                            retryAttempt: this.discoRetries,
                            MAX_DISCO_RETRIES,
                            error,
                            channelId: this.client.config.channelId
                        });
                        return false;
                    }
                    this.logger.warn('fetching ice servers failed. retrying', {
                        retryAttempt: this.discoRetries,
                        error,
                        channelId: this.client.config.channelId
                    });
                    return true;
                }, 0, this.client.logger);
            }
            return this.refreshIceServersRetryPromise.promise
                .finally(() => {
                this.discoRetries = 0;
                this.refreshIceServersRetryPromise = undefined;
            });
        });
    }
    _refreshIceServers(stanzaInstance) {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (!stanzaInstance) {
                throw new Error('No stanza instance to refresh ice servers');
            }
            const server = stanzaInstance.config.server;
            const turnServersPromise = stanzaInstance.getServices(server, 'turn', '1');
            const stunServersPromise = stanzaInstance.getServices(server, 'stun', '1');
            const servicesPromise = new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject(new Error('Timeout waiting for refresh ice servers to finish'));
                }, ICE_SERVER_TIMEOUT);
                Promise.all([
                    turnServersPromise,
                    stunServersPromise
                ])
                    .then(([turn, stun]) => {
                    resolve([turn, stun]);
                })
                    .catch(reject);
            });
            const [turnServers, stunServers] = yield servicesPromise;
            const iceServers = [
                ...turnServers.services,
                ...stunServers.services
            ].map((service) => {
                const port = service.port ? `:${service.port}` : '';
                const ice = {
                    type: service.type,
                    urls: `${service.type}:${service.host}${port}`
                };
                if (['turn', 'turns'].includes(service.type)) {
                    if (service.transport && service.transport !== 'udp') {
                        ice.urls += `?transport=${service.transport}`;
                    }
                    if (service.username) {
                        ice.username = service.username;
                    }
                    if (service.password) {
                        ice.credential = service.password;
                    }
                }
                return ice;
            });
            this.setIceServers(iceServers, stanzaInstance);
            if (!stunServers.services.length) {
                this.logger.info('No stun servers received, setting iceTransportPolicy to "relay"');
                this.setIceTransportPolicy('relay', stanzaInstance);
            }
            else {
                this.setIceTransportPolicy('all', stanzaInstance);
            }
            return iceServers;
        });
    }
    setIceServers(iceServers, stanzaInstance) {
        stanzaInstance.jingle.iceServers = iceServers;
        this.iceServers = iceServers;
    }
    getIceTransportPolicy() {
        var _a;
        return (_a = this.stanzaInstance) === null || _a === void 0 ? void 0 : _a.jingle.config.peerConnectionConfig.iceTransportPolicy;
    }
    setIceTransportPolicy(policy, stanzaInstance) {
        stanzaInstance.jingle.config.peerConnectionConfig.iceTransportPolicy = policy;
    }
    getSessionTypeByJid(jid) {
        if (isAcdJid(jid)) {
            return SessionTypes.acdScreenShare;
        }
        else if (isScreenRecordingJid(jid)) {
            return SessionTypes.screenRecording;
        }
        else if (isSoftphoneJid(jid)) {
            return SessionTypes.softphone;
        }
        else if (isVideoJid(jid)) {
            return SessionTypes.collaborateVideo;
        }
        else {
            return SessionTypes.unknown;
        }
    }
    getSessionManager() {
        var _a;
        return (_a = this.stanzaInstance) === null || _a === void 0 ? void 0 : _a.jingle;
    }
    getAllSessions() {
        var _a;
        const stanzaSessionsObj = (_a = this.stanzaInstance) === null || _a === void 0 ? void 0 : _a.jingle.sessions;
        const stanzaSessions = stanzaSessionsObj && Object.values(stanzaSessionsObj) || [];
        return [...stanzaSessions, ...this.webrtcSessions];
    }
    proxyNRStat(stat) {
        this.addStatToQueue(stat);
    }
    get expose() {
        return {
            on: this.on.bind(this),
            once: this.once.bind(this),
            off: this.off.bind(this),
            removeAllListeners: this.removeAllListeners.bind(this),
            removeListener: this.removeListener.bind(this),
            refreshIceServers: this.refreshIceServers.bind(this),
            acceptRtcSession: this.acceptRtcSession.bind(this),
            rejectRtcSession: this.rejectRtcSession.bind(this),
            cancelRtcSession: this.cancelRtcSession.bind(this),
            notifyScreenShareStart: this.notifyScreenShareStart.bind(this),
            notifyScreenShareStop: this.notifyScreenShareStop.bind(this),
            rtcSessionAccepted: this.rtcSessionAccepted.bind(this),
            initiateRtcSession: this.initiateRtcSession.bind(this),
            getSessionTypeByJid: this.getSessionTypeByJid.bind(this),
            getSessionManager: this.getSessionManager.bind(this),
            getAllSessions: this.getAllSessions.bind(this),
            proxyNRStat: this.proxyNRStat.bind(this)
        };
    }
}

const DEFAULT_PING_INTERVAL = 14 * 1000;
const DEFAULT_MAXIMUM_FAILED_PINGS_BEFORE_DISCONNECT = 1;
class Ping {
    constructor(client, stanzaInstance, options = {}) {
        this.client = client;
        this.stanzaInstance = stanzaInstance;
        this.options = options;
        this.pingInterval = options.pingInterval || DEFAULT_PING_INTERVAL;
        this.failedPingsBeforeDisconnect = options.failedPingsBeforeDisconnect || DEFAULT_MAXIMUM_FAILED_PINGS_BEFORE_DISCONNECT;
        this.numberOfFailedPings = 0;
        this.nextPingTimeoutId = undefined;
        this.start();
    }
    start() {
        if (!this.nextPingTimeoutId) {
            this.nextPingTimeoutId = -1;
            this.queueNextPing();
        }
    }
    stop() {
        clearTimeout(this.nextPingTimeoutId);
        this.nextPingTimeoutId = undefined;
        this.numberOfFailedPings = 0;
    }
    performPing() {
        var _a;
        return __awaiter$5(this, void 0, void 0, function* () {
            try {
                yield this.stanzaInstance.ping(this.options.jid);
                this.numberOfFailedPings = 0;
                this.queueNextPing();
            }
            catch (err) {
                const info = {
                    channelId: this.client.config.channelId,
                    jid: this.stanzaInstance.jid,
                    stanzaInstanceId: this.stanzaInstance.id
                };
                this.client.logger.warn('Missed a ping.', Object.assign({ error: err }, info));
                /* if we have reached max number of missed pings, disconnect */
                if (++this.numberOfFailedPings > this.failedPingsBeforeDisconnect) {
                    this.client.logger.error('Missed too many pings, disconnecting', Object.assign({ numberOfFailedPings: this.numberOfFailedPings }, info));
                    this.stanzaInstance.sendStreamError({ text: 'too many missed pongs', condition: 'connection-timeout' });
                    this.stop();
                    (_a = this.stanzaInstance.transport) === null || _a === void 0 ? void 0 : _a.disconnect(false);
                }
                else {
                    this.queueNextPing();
                }
            }
        });
    }
    queueNextPing() {
        if (this.nextPingTimeoutId) {
            this.nextPingTimeoutId = setTimeout(this.performPing.bind(this), this.pingInterval);
        }
    }
}

const DEFAULT_STANZA_TIMEOUT = 70 * 1000;
class ServerMonitor {
    constructor(client, stanzaInstance, options = {}) {
        this.client = client;
        this.stanzaInstance = stanzaInstance;
        this.stanzaTimeout = options.stanzaTimeout || DEFAULT_STANZA_TIMEOUT;
        this.timeoutId = undefined;
        this.start();
    }
    start() {
        this.boundSetupStanzaTimeout = this.setupStanzaTimeout.bind(this);
        this.client.on('connected', this.boundSetupStanzaTimeout);
        this.stanzaInstance.on('raw:incoming', this.boundSetupStanzaTimeout);
    }
    stop() {
        clearTimeout(this.timeoutId);
        this.timeoutId = undefined;
        if (this.boundSetupStanzaTimeout) {
            this.client.off('connected', this.boundSetupStanzaTimeout);
            this.stanzaInstance.off('raw:incoming', this.boundSetupStanzaTimeout);
            this.boundSetupStanzaTimeout = undefined;
        }
    }
    setupStanzaTimeout() {
        clearTimeout(this.timeoutId);
        this.timeoutId = setTimeout(() => {
            var _a;
            const info = {
                channelId: this.client.config.channelId,
                jid: this.stanzaInstance.jid,
                stanzaInstanceId: this.stanzaInstance.id,
                timeout: this.stanzaTimeout
            };
            this.client.logger.error('Time between XMPP stanzas exceeded timeout, disconnecting', info);
            this.stanzaInstance.sendStreamError({ text: 'time between stanzas exceeded timeout', condition: 'connection-timeout' });
            this.stop();
            (_a = this.stanzaInstance.transport) === null || _a === void 0 ? void 0 : _a.disconnect(false);
        }, this.stanzaTimeout);
    }
}

var stanza = {};

var Client$2 = {};

var StreamManagement$1 = {};

Object.defineProperty(StreamManagement$1, "__esModule", { value: true });
const events_1$1 = require$$2;
const MAX_SEQ = Math.pow(2, 32);
const mod = (v, n) => ((v % n) + n) % n;
class StreamManagement extends events_1$1.EventEmitter {
    constructor() {
        super();
        this.allowResume = true;
        this.lastAck = 0;
        this.handled = 0;
        this.unacked = [];
        this.inboundStarted = false;
        this.outboundStarted = false;
        this.id = undefined;
        this.jid = undefined;
        this.allowResume = true;
        this.started = false;
        this.cacheHandler = () => undefined;
        this._reset();
    }
    get started() {
        return this.outboundStarted && this.inboundStarted;
    }
    set started(value) {
        if (!value) {
            this.outboundStarted = false;
            this.inboundStarted = false;
        }
    }
    get resumable() {
        return this.started && this.allowResume;
    }
    load(opts) {
        var _a;
        this.id = opts.id;
        this.allowResume = (_a = opts.allowResume) !== null && _a !== void 0 ? _a : true;
        this.handled = opts.handled;
        this.lastAck = opts.lastAck;
        this.unacked = opts.unacked;
        this.emit('prebound', opts.jid);
    }
    cache(handler) {
        this.cacheHandler = handler;
    }
    async bind(jid) {
        this.jid = jid;
        await this._cache();
    }
    async enable() {
        this.emit('send', {
            allowResumption: this.allowResume,
            type: 'enable'
        });
    }
    async resume() {
        this.emit('send', {
            handled: this.handled,
            previousSession: this.id,
            type: 'resume'
        });
    }
    async enabled(resp) {
        this.id = resp.id;
        this.allowResume = resp.resume || false;
        this.handled = 0;
        this.inboundStarted = true;
        await this._cache();
    }
    async resumed(resp) {
        this.id = resp.previousSession;
        this.inboundStarted = true;
        await this.process(resp, true);
        await this._cache();
    }
    async failed(resp) {
        // Resumption might fail, but the server can still tell us how far
        // the old session progressed.
        await this.process(resp);
        // We alert that any remaining unacked stanzas failed to send. It has
        // been too long for auto-retrying these to be the right thing to do.
        for (const [kind, stanza] of this.unacked) {
            this.emit('failed', { kind, stanza });
        }
        this._reset();
        await this._cache();
    }
    ack() {
        this.emit('send', {
            handled: this.handled,
            type: 'ack'
        });
    }
    request() {
        this.emit('send', {
            type: 'request'
        });
    }
    async process(ack, resend = false) {
        if (ack.handled === undefined) {
            return;
        }
        const numAcked = mod(ack.handled - this.lastAck, MAX_SEQ);
        for (let i = 0; i < numAcked && this.unacked.length > 0; i++) {
            const [kind, stanza] = this.unacked.shift();
            this.emit('acked', { kind, stanza });
        }
        this.lastAck = ack.handled;
        if (resend) {
            const resendUnacked = this.unacked;
            this.unacked = [];
            if (resendUnacked.length) {
                this.emit('begin-resend');
                for (const [kind, stanza] of resendUnacked) {
                    this.emit('resend', { kind, stanza });
                }
                this.emit('end-resend');
            }
        }
        await this._cache();
    }
    async track(kind, stanza) {
        const isStanzaEnable = stanza.type === 'enable';
        if (kind === 'sm' && (isStanzaEnable || stanza.type === 'resume')) {
            if (isStanzaEnable) {
                this.handled = 0;
            }
            this.outboundStarted = true;
            await this._cache();
            return false;
        }
        if (!this.outboundStarted) {
            return false;
        }
        if (kind !== 'message' && kind !== 'presence' && kind !== 'iq') {
            return false;
        }
        this.unacked.push([kind, stanza]);
        await this._cache();
        return true;
    }
    async handle() {
        if (this.inboundStarted) {
            this.handled = mod(this.handled + 1, MAX_SEQ);
            await this._cache();
        }
    }
    async hibernate() {
        if (!this.resumable) {
            return this.shutdown();
        }
        for (const [kind, stanza] of this.unacked) {
            this.emit('hibernated', { kind, stanza });
        }
    }
    async shutdown() {
        return this.failed({ type: 'failed' });
    }
    async _cache() {
        try {
            await this.cacheHandler({
                allowResume: this.allowResume,
                handled: this.handled,
                id: this.id,
                jid: this.jid,
                lastAck: this.lastAck,
                unacked: this.unacked
            });
        }
        catch (err) {
            // TODO: Is there a good way to handle this?
            // istanbul ignore next
            console.error('Failed to cache stream state', err);
        }
    }
    _reset() {
        this.id = '';
        this.inboundStarted = false;
        this.outboundStarted = false;
        this.lastAck = 0;
        this.handled = 0;
        this.unacked = [];
    }
}
StreamManagement$1.default = StreamManagement;

var sasl$1 = {};

Object.defineProperty(sasl$1, "__esModule", { value: true });
sasl$1.SCRAM = sasl$1.DIGEST = sasl$1.OAUTH = sasl$1.PLAIN = sasl$1.EXTERNAL = sasl$1.ANONYMOUS = sasl$1.Hi = sasl$1.HMAC = sasl$1.H = sasl$1.XOR = sasl$1.createClientNonce = sasl$1.Factory = sasl$1.SimpleMech = void 0;
const platform_1$5 = browser;
const stringprep_1 = stringprep;
class SimpleMech {
    constructor(name) {
        this.authenticated = false;
        this.mutuallyAuthenticated = false;
        this.name = name;
    }
    getCacheableCredentials() {
        return null;
    }
    // istanbul ignore next
    processChallenge(_challenge) {
        return;
    }
    processSuccess(_success) {
        this.authenticated = true;
    }
    finalize() {
        const result = {
            authenticated: this.authenticated,
            mutuallyAuthenticated: this.mutuallyAuthenticated
        };
        if (this.errorData) {
            result.errorData = this.errorData;
        }
        return result;
    }
}
sasl$1.SimpleMech = SimpleMech;
class Factory {
    constructor() {
        this.mechanisms = [];
    }
    register(name, constructor, priority) {
        this.mechanisms.push({
            constructor,
            name: name.toUpperCase(),
            priority: priority
        });
        // We want mechanisms with highest priority at the start of the list
        this.mechanisms.sort((a, b) => b.priority - a.priority);
    }
    disable(name) {
        const mechName = name.toUpperCase();
        this.mechanisms = this.mechanisms.filter(mech => mech.name !== mechName);
    }
    createMechanism(names) {
        const availableNames = names.map(name => name.toUpperCase());
        for (const knownMech of this.mechanisms) {
            for (const availableMechName of availableNames) {
                if (availableMechName === knownMech.name) {
                    return new knownMech.constructor(knownMech.name);
                }
            }
        }
        return null;
    }
}
sasl$1.Factory = Factory;
// ====================================================================
// Utility helpers
// ====================================================================
// istanbul ignore next
function createClientNonce(length = 32) {
    return (0, platform_1$5.randomBytes)(length).toString('hex');
}
sasl$1.createClientNonce = createClientNonce;
// tslint:disable no-bitwise
function XOR(a, b) {
    const res = [];
    for (let i = 0; i < a.length; i++) {
        res.push(a[i] ^ b[i]);
    }
    return platform_1$5.Buffer.from(res);
}
sasl$1.XOR = XOR;
// tslint:enable no-bitwise
function H(text, alg) {
    return (0, platform_1$5.createHash)(alg).update(text).digest();
}
sasl$1.H = H;
function HMAC(key, msg, alg) {
    return (0, platform_1$5.createHmac)(alg, key).update(msg).digest();
}
sasl$1.HMAC = HMAC;
function Hi(text, salt, iterations, alg) {
    let ui1 = HMAC(text, platform_1$5.Buffer.concat([salt, platform_1$5.Buffer.from('00000001', 'hex')]), alg);
    let ui = ui1;
    for (let i = 0; i < iterations - 1; i++) {
        ui1 = HMAC(text, ui1, alg);
        ui = XOR(ui, ui1);
    }
    return ui;
}
sasl$1.Hi = Hi;
function parse(challenge) {
    const directives = {};
    const tokens = challenge.toString().split(/,(?=(?:[^"]|"[^"]*")*$)/);
    for (let i = 0, len = tokens.length; i < len; i++) {
        const directive = /(\w+)=["]?([^"]+)["]?$/.exec(tokens[i]);
        if (directive) {
            directives[directive[1]] = directive[2];
        }
    }
    return directives;
}
function escapeUsername(name) {
    const escaped = [];
    for (const curr of name) {
        if (curr === ',') {
            escaped.push('=2C');
        }
        else if (curr === '=') {
            escaped.push('=3D');
        }
        else {
            escaped.push(curr);
        }
    }
    return escaped.join('');
}
// ====================================================================
// ANONYMOUS
// ====================================================================
class ANONYMOUS extends SimpleMech {
    getExpectedCredentials() {
        return { optional: ['trace'], required: [] };
    }
    createResponse(credentials) {
        return platform_1$5.Buffer.from(credentials.trace || '');
    }
}
sasl$1.ANONYMOUS = ANONYMOUS;
// ====================================================================
// EXTERNAL
// ====================================================================
class EXTERNAL extends SimpleMech {
    getExpectedCredentials() {
        return { optional: ['authzid'], required: [] };
    }
    createResponse(credentials) {
        return platform_1$5.Buffer.from(credentials.authzid || '');
    }
}
sasl$1.EXTERNAL = EXTERNAL;
// ====================================================================
// PLAIN
// ====================================================================
class PLAIN extends SimpleMech {
    getExpectedCredentials() {
        return {
            optional: ['authzid'],
            required: ['username', 'password']
        };
    }
    createResponse(credentials) {
        return platform_1$5.Buffer.from((credentials.authzid || '') +
            '\x00' +
            credentials.username +
            '\x00' +
            (credentials.password || credentials.token));
    }
}
sasl$1.PLAIN = PLAIN;
// ====================================================================
// OAUTHBEARER
// ====================================================================
class OAUTH extends SimpleMech {
    constructor(name) {
        super(name);
        this.failed = false;
        this.name = name;
    }
    getExpectedCredentials() {
        return {
            optional: ['authzid'],
            required: ['token']
        };
    }
    createResponse(credentials) {
        if (this.failed) {
            return platform_1$5.Buffer.from('\u0001');
        }
        const gs2header = `n,${escapeUsername((0, stringprep_1.saslprep)(credentials.authzid))},`;
        const auth = `auth=Bearer ${credentials.token}\u0001`;
        return platform_1$5.Buffer.from(gs2header + '\u0001' + auth + '\u0001', 'utf8');
    }
    processChallenge(challenge) {
        this.failed = true;
        this.errorData = JSON.parse(challenge.toString('utf8'));
    }
}
sasl$1.OAUTH = OAUTH;
// ====================================================================
// DIGEST-MD5
// ====================================================================
class DIGEST extends SimpleMech {
    constructor(name) {
        super(name);
        this.providesMutualAuthentication = false;
        this.state = 'INITIAL';
        this.name = name;
    }
    processChallenge(challenge) {
        this.state = 'CHALLENGE';
        const values = parse(challenge);
        this.authenticated = !!values.rspauth;
        this.realm = values.realm;
        this.nonce = values.nonce;
        this.charset = values.charset;
    }
    getExpectedCredentials() {
        return {
            optional: ['authzid', 'clientNonce', 'realm'],
            required: ['host', 'password', 'serviceName', 'serviceType', 'username']
        };
    }
    createResponse(credentials) {
        if (this.state === 'INITIAL' || this.authenticated) {
            return null;
        }
        let uri = credentials.serviceType + '/' + credentials.host;
        if (credentials.serviceName && credentials.host !== credentials.serviceName) {
            uri += '/' + credentials.serviceName;
        }
        const realm = credentials.realm || this.realm || '';
        const cnonce = credentials.clientNonce || createClientNonce(16);
        const nc = '00000001';
        const qop = 'auth';
        let str = '';
        str += 'username="' + credentials.username + '"';
        if (realm) {
            str += ',realm="' + realm + '"';
        }
        str += ',nonce="' + this.nonce + '"';
        str += ',cnonce="' + cnonce + '"';
        str += ',nc=' + nc;
        str += ',qop=' + qop;
        str += ',digest-uri="' + uri + '"';
        const base = (0, platform_1$5.createHash)('md5')
            .update(credentials.username)
            .update(':')
            .update(realm)
            .update(':')
            .update(credentials.password)
            .digest();
        const ha1 = (0, platform_1$5.createHash)('md5')
            .update(base)
            .update(':')
            .update(this.nonce)
            .update(':')
            .update(cnonce);
        if (credentials.authzid) {
            ha1.update(':').update(credentials.authzid);
        }
        const dha1 = ha1.digest('hex');
        const ha2 = (0, platform_1$5.createHash)('md5').update('AUTHENTICATE:').update(uri);
        const dha2 = ha2.digest('hex');
        const digest = (0, platform_1$5.createHash)('md5')
            .update(dha1)
            .update(':')
            .update(this.nonce)
            .update(':')
            .update(nc)
            .update(':')
            .update(cnonce)
            .update(':')
            .update(qop)
            .update(':')
            .update(dha2)
            .digest('hex');
        str += ',response=' + digest;
        if (this.charset === 'utf-8') {
            str += ',charset=utf-8';
        }
        if (credentials.authzid) {
            str += ',authzid="' + credentials.authzid + '"';
        }
        return platform_1$5.Buffer.from(str);
    }
}
sasl$1.DIGEST = DIGEST;
// ====================================================================
// SCRAM-SHA-1(-PLUS)
// ====================================================================
class SCRAM {
    constructor(name) {
        this.providesMutualAuthentication = true;
        this.name = name;
        this.state = 'INITIAL';
        this.useChannelBinding = this.name.toLowerCase().endsWith('-plus');
        this.algorithm = this.name.toLowerCase().split('scram-')[1].split('-plus')[0];
    }
    getExpectedCredentials() {
        const optional = ['authzid', 'clientNonce'];
        const required = ['username', 'password'];
        if (this.useChannelBinding) {
            required.push('tlsUnique');
        }
        return {
            optional,
            required
        };
    }
    getCacheableCredentials() {
        return this.cache;
    }
    createResponse(credentials) {
        if (this.state === 'INITIAL') {
            return this.initialResponse(credentials);
        }
        return this.challengeResponse(credentials);
    }
    processChallenge(challenge) {
        const values = parse(challenge);
        this.salt = platform_1$5.Buffer.from(values.s || '', 'base64');
        this.iterationCount = parseInt(values.i, 10);
        this.nonce = values.r;
        this.verifier = values.v;
        this.error = values.e;
        this.challenge = challenge;
    }
    processSuccess(success) {
        this.processChallenge(success);
    }
    finalize() {
        if (!this.verifier) {
            return {
                authenticated: false,
                error: this.error,
                mutuallyAuthenticated: false
            };
        }
        if (this.serverSignature.toString('base64') !== this.verifier) {
            return {
                authenticated: false,
                error: 'Mutual authentication failed',
                mutuallyAuthenticated: false
            };
        }
        return {
            authenticated: true,
            mutuallyAuthenticated: true
        };
    }
    initialResponse(credentials) {
        const authzid = escapeUsername((0, stringprep_1.saslprep)(credentials.authzid));
        const username = escapeUsername((0, stringprep_1.saslprep)(credentials.username));
        this.clientNonce = credentials.clientNonce || createClientNonce();
        let cbindHeader = 'n';
        if (credentials.tlsUnique) {
            if (!this.useChannelBinding) {
                cbindHeader = 'y';
            }
            else {
                cbindHeader = 'p=tls-unique';
            }
        }
        this.gs2Header = platform_1$5.Buffer.from(authzid ? `${cbindHeader},a=${authzid},` : `${cbindHeader},,`);
        this.clientFirstMessageBare = platform_1$5.Buffer.from(`n=${username},r=${this.clientNonce}`);
        const result = platform_1$5.Buffer.concat([this.gs2Header, this.clientFirstMessageBare]);
        this.state = 'CHALLENGE';
        return result;
    }
    challengeResponse(credentials) {
        const CLIENT_KEY = platform_1$5.Buffer.from('Client Key');
        const SERVER_KEY = platform_1$5.Buffer.from('Server Key');
        const cbindData = platform_1$5.Buffer.concat([
            this.gs2Header,
            credentials.tlsUnique || platform_1$5.Buffer.from('')
        ]).toString('base64');
        const clientFinalMessageWithoutProof = platform_1$5.Buffer.from(`c=${cbindData},r=${this.nonce}`);
        let saltedPassword;
        let clientKey;
        let serverKey;
        // If our cached salt is the same, we can reuse cached credentials to speed
        // up the hashing process.
        const cached = credentials.salt && platform_1$5.Buffer.compare(credentials.salt, this.salt) === 0;
        if (cached && credentials.clientKey && credentials.serverKey) {
            clientKey = platform_1$5.Buffer.from(credentials.clientKey);
            serverKey = platform_1$5.Buffer.from(credentials.serverKey);
        }
        else if (cached && credentials.saltedPassword) {
            saltedPassword = platform_1$5.Buffer.from(credentials.saltedPassword);
            clientKey = HMAC(saltedPassword, CLIENT_KEY, this.algorithm);
            serverKey = HMAC(saltedPassword, SERVER_KEY, this.algorithm);
        }
        else {
            saltedPassword = Hi(platform_1$5.Buffer.from((0, stringprep_1.saslprep)(credentials.password)), this.salt, this.iterationCount, this.algorithm);
            clientKey = HMAC(saltedPassword, CLIENT_KEY, this.algorithm);
            serverKey = HMAC(saltedPassword, SERVER_KEY, this.algorithm);
        }
        const storedKey = H(clientKey, this.algorithm);
        const separator = platform_1$5.Buffer.from(',');
        const authMessage = platform_1$5.Buffer.concat([
            this.clientFirstMessageBare,
            separator,
            this.challenge,
            separator,
            clientFinalMessageWithoutProof
        ]);
        const clientSignature = HMAC(storedKey, authMessage, this.algorithm);
        const clientProof = XOR(clientKey, clientSignature).toString('base64');
        this.serverSignature = HMAC(serverKey, authMessage, this.algorithm);
        const result = platform_1$5.Buffer.concat([
            clientFinalMessageWithoutProof,
            platform_1$5.Buffer.from(`,p=${clientProof}`)
        ]);
        this.state = 'FINAL';
        this.cache = {
            clientKey,
            salt: this.salt,
            saltedPassword,
            serverKey
        };
        return result;
    }
}
sasl$1.SCRAM = SCRAM;

var plugins = {};

var account = {};

Object.defineProperty(account, "__esModule", { value: true });
const Namespaces_1$1u = Namespaces;
function default_1$h(client) {
    client.getAccountInfo = async (jid) => {
        const resp = await client.sendIQ({
            account: {},
            to: jid,
            type: 'get'
        });
        return resp.account;
    };
    client.updateAccount = (jid, data) => {
        return client.sendIQ({
            account: data,
            to: jid,
            type: 'set'
        });
    };
    client.deleteAccount = (jid) => {
        return client.sendIQ({
            account: {
                remove: true
            },
            to: jid,
            type: 'set'
        });
    };
    client.getPrivateData = async (key) => {
        const res = await client.sendIQ({
            privateStorage: {
                [key]: {}
            },
            type: 'get'
        });
        return res.privateStorage[key];
    };
    client.setPrivateData = async (key, value) => {
        return client.sendIQ({
            privateStorage: {
                [key]: value
            },
            type: 'set'
        });
    };
    client.getVCard = async (jid) => {
        const resp = await client.sendIQ({
            to: jid,
            type: 'get',
            vcard: {
                format: Namespaces_1$1u.NS_VCARD_TEMP
            }
        });
        return resp.vcard;
    };
    client.publishVCard = async (vcard) => {
        await client.sendIQ({
            type: 'set',
            vcard
        });
    };
    client.enableNotifications = (jid, node, fieldList = []) => {
        return client.sendIQ({
            push: {
                action: 'enable',
                form: {
                    fields: [
                        {
                            name: 'FORM_TYPE',
                            type: 'hidden',
                            value: 'http://jabber.org/protocol/pubsub#publish-options'
                        },
                        ...fieldList
                    ],
                    type: 'submit'
                },
                jid,
                node
            },
            type: 'set'
        });
    };
    client.disableNotifications = (jid, node) => {
        return client.sendIQ({
            push: {
                action: 'disable',
                jid,
                node
            },
            type: 'set'
        });
    };
}
account.default = default_1$h;

var avatar = {};

Object.defineProperty(avatar, "__esModule", { value: true });
const Namespaces_1$1t = Namespaces;
function default_1$g(client) {
    client.disco.addFeature((0, Namespaces_1$1t.NS_PEP_NOTIFY)(Namespaces_1$1t.NS_AVATAR_METADATA));
    client.on('pubsub:published', msg => {
        if (msg.pubsub.items.node !== Namespaces_1$1t.NS_AVATAR_METADATA) {
            return;
        }
        const info = msg.pubsub.items.published[0].content;
        client.emit('avatar', {
            avatars: info.versions || [],
            jid: msg.from,
            source: 'pubsub'
        });
    });
    client.on('presence', pres => {
        if (pres.vcardAvatar && typeof pres.vcardAvatar === 'string') {
            client.emit('avatar', {
                avatars: [
                    {
                        id: pres.vcardAvatar
                    }
                ],
                jid: pres.from,
                source: 'vcard'
            });
        }
    });
    client.publishAvatar = (id, data) => {
        return client.publish('', Namespaces_1$1t.NS_AVATAR_DATA, {
            data,
            itemType: Namespaces_1$1t.NS_AVATAR_DATA
        }, id);
    };
    client.useAvatars = (versions, pointers = []) => {
        return client.publish('', Namespaces_1$1t.NS_AVATAR_METADATA, {
            itemType: Namespaces_1$1t.NS_AVATAR_METADATA,
            pointers,
            versions
        }, 'current');
    };
    client.getAvatar = (jid, id) => {
        return client.getItem(jid, Namespaces_1$1t.NS_AVATAR_DATA, id);
    };
}
avatar.default = default_1$g;

var bind = {};

Object.defineProperty(bind, "__esModule", { value: true });
function default_1$f(client) {
    client.registerFeature('bind', 300, async (features, cb) => {
        try {
            const resp = await client.sendIQ({
                bind: {
                    resource: client.config.resource
                },
                type: 'set'
            });
            client.features.negotiated.bind = true;
            client.emit('session:prebind', resp.bind.jid);
            const canStartSession = !features.legacySession ||
                (features.legacySession && features.legacySession.optional);
            if (!client.sessionStarted && canStartSession) {
                client.emit('session:started', client.jid);
            }
            return cb();
        }
        catch (err) {
            console.error(err);
            return cb('disconnect', 'JID binding failed');
        }
    });
    client.registerFeature('legacySession', 1000, async (features, cb) => {
        if (client.sessionStarted || (features.legacySession && features.legacySession.optional)) {
            client.features.negotiated.session = true;
            return cb();
        }
        try {
            await client.sendIQ({
                legacySession: true,
                type: 'set'
            });
            client.features.negotiated.session = true;
            if (!client.sessionStarted) {
                client.sessionStarted = true;
                client.emit('session:started', client.jid);
            }
            return cb();
        }
        catch (err) {
            return cb('disconnect', 'Session requeset failed');
        }
    });
    client.on('session:started', () => {
        client.sessionStarted = true;
    });
    client.on('session:prebind', boundJID => {
        client.jid = boundJID;
        client.emit('session:bound', client.jid);
    });
    client.on('--reset-stream-features', () => {
        client.sessionStarted = false;
        client.features.negotiated.bind = false;
        client.features.negotiated.session = false;
    });
}
bind.default = default_1$f;

var command = {};

Object.defineProperty(command, "__esModule", { value: true });
const Namespaces_1$1s = Namespaces;
function default_1$e(client) {
    client.disco.addFeature(Namespaces_1$1s.NS_ADHOC_COMMANDS);
    client.disco.addItem({
        name: 'Ad-Hoc Commands',
        node: Namespaces_1$1s.NS_ADHOC_COMMANDS
    });
    client.getCommands = (jid) => {
        return client.getDiscoItems(jid, Namespaces_1$1s.NS_ADHOC_COMMANDS);
    };
}
command.default = default_1$e;

var connection = {};

Object.defineProperty(connection, "__esModule", { value: true });
const Namespaces_1$1r = Namespaces;
const Utils_1$5 = Utils;
async function checkConnection(client) {
    if (client.sm.started) {
        return new Promise(resolve => {
            client.once('stream:management:ack', () => resolve());
            client.sm.request();
        });
    }
    try {
        await client.ping();
    }
    catch (err) {
        if (err.error && err.error.condition !== 'timeout') {
            return;
        }
        else {
            throw err;
        }
    }
}
function sendCSI(client, type) {
    if (client.features.negotiated.clientStateIndication) {
        client.send('csi', {
            type
        });
    }
}
function default_1$d(client) {
    client.disco.addFeature(Namespaces_1$1r.NS_PING);
    client.on('iq:get:ping', iq => {
        client.sendIQResult(iq);
    });
    client.on('--reset-stream-features', () => {
        client._stopKeepAliveInterval();
        client.features.negotiated.streamManagement = false;
        client.features.negotiated.clientStateIndication = false;
    });
    client.markActive = () => sendCSI(client, 'active');
    client.markInactive = () => sendCSI(client, 'inactive');
    client.ping = async (jid) => {
        await client.sendIQ({
            ping: true,
            to: jid,
            type: 'get'
        });
    };
    client.enableKeepAlive = (opts = {}) => {
        client._keepAliveOptions = opts;
        // Ping every 5 minutes
        const interval = opts.interval || 300;
        // Disconnect if no response in 15 seconds
        const timeout = opts.timeout || client.config.timeout || 15;
        async function keepalive() {
            if (client.sessionStarted) {
                try {
                    await (0, Utils_1$5.timeoutPromise)(checkConnection(client), timeout * 1000);
                }
                catch (err) {
                    // Kill the apparently dead connection without closing
                    // the stream itself so we can reconnect and potentially
                    // resume the session.
                    client.emit('stream:error', {
                        condition: 'connection-timeout',
                        text: 'Server did not respond in ' + timeout + ' seconds'
                    });
                    if (client.transport) {
                        client.transport.hasStream = false;
                        client.transport.disconnect(false);
                    }
                }
            }
        }
        clearInterval(client._keepAliveInterval);
        client._keepAliveInterval = setInterval(keepalive, interval * 1000);
    };
    client._stopKeepAliveInterval = () => {
        if (client._keepAliveInterval) {
            clearInterval(client._keepAliveInterval);
            delete client._keepAliveInterval;
        }
    };
    client.disableKeepAlive = () => {
        delete client._keepAliveOptions;
        client._stopKeepAliveInterval();
    };
    client.on('stream:management:resumed', () => {
        client._keepAliveOptions && client.enableKeepAlive(client._keepAliveOptions);
    });
    client.on('stream:start', () => {
        client._keepAliveOptions && client.enableKeepAlive(client._keepAliveOptions);
    });
    const smacks = async (features, done) => {
        if (!client.config.useStreamManagement) {
            return done();
        }
        const smHandler = async (sm) => {
            switch (sm.type) {
                case 'enabled':
                    await client.sm.enabled(sm);
                    client.features.negotiated.streamManagement = true;
                    client.off('sm', smHandler);
                    return done();
                case 'resumed':
                    await client.sm.resumed(sm);
                    client.features.negotiated.streamManagement = true;
                    client.features.negotiated.bind = true;
                    client.sessionStarted = true;
                    client.sessionStarting = false;
                    client.off('sm', smHandler);
                    client.emit('stream:management:resumed', sm);
                    return done('break'); // Halt further processing of stream features
                case 'failed':
                    await client.sm.failed(sm);
                    client.off('sm', smHandler);
                    client.emit('session:end');
                    done();
            }
        };
        client.on('sm', smHandler);
        if (!client.sm.id) {
            if (client.features.negotiated.bind) {
                await client.sm.enable();
            }
            else {
                client.off('sm', smHandler);
                done();
            }
        }
        else if (client.sm.id && client.sm.allowResume) {
            await client.sm.resume();
        }
        else {
            client.off('sm', smHandler);
            done();
        }
    };
    client.registerFeature('streamManagement', 200, smacks);
    client.registerFeature('streamManagement', 500, smacks);
    client.registerFeature('clientStateIndication', 400, (features, cb) => {
        client.features.negotiated.clientStateIndication = true;
        cb();
    });
}
connection.default = default_1$d;

var disco = {};

var DiscoManager = {};

var LegacyEntityCapabilities = {};

Object.defineProperty(LegacyEntityCapabilities, "__esModule", { value: true });
LegacyEntityCapabilities.verify = LegacyEntityCapabilities.generate = void 0;
const platform_1$4 = browser;
const Utils_1$4 = Utils;
function escape(value) {
    return platform_1$4.Buffer.from(value.replace(/</g, '&lt;'), 'utf-8');
}
function encodeIdentities(identities = []) {
    const result = [];
    const existing = new Set();
    for (const { category, type, lang, name } of identities) {
        const encoded = `${category}/${type}/${lang || ''}/${name || ''}`;
        if (existing.has(encoded)) {
            return null;
        }
        existing.add(encoded);
        result.push(escape(encoded));
    }
    result.sort(Utils_1$4.octetCompare);
    return result;
}
function encodeFeatures(features = []) {
    const result = [];
    const existing = new Set();
    for (const feature of features) {
        if (existing.has(feature)) {
            return null;
        }
        existing.add(feature);
        result.push(escape(feature));
    }
    result.sort(Utils_1$4.octetCompare);
    return result;
}
function encodeFields(fields = []) {
    const sortedFields = [];
    for (const field of fields) {
        if (field.name === 'FORM_TYPE') {
            continue;
        }
        if (field.rawValues) {
            sortedFields.push({
                name: escape(field.name),
                values: field.rawValues.map(val => escape(val)).sort(Utils_1$4.octetCompare)
            });
        }
        else if (Array.isArray(field.value)) {
            sortedFields.push({
                name: escape(field.name),
                values: field.value.map(val => escape(val)).sort(Utils_1$4.octetCompare)
            });
        }
        else if (field.value === true || field.value === false) {
            sortedFields.push({
                name: escape(field.name),
                values: [escape(field.value ? '1' : '0')]
            });
        }
        else {
            sortedFields.push({
                name: escape(field.name),
                values: [escape(field.value || '')]
            });
        }
    }
    sortedFields.sort((a, b) => (0, Utils_1$4.octetCompare)(a.name, b.name));
    const result = [];
    for (const field of sortedFields) {
        result.push(field.name);
        for (const value of field.values) {
            result.push(value);
        }
    }
    return result;
}
function encodeForms(extensions = []) {
    const forms = [];
    const types = new Set();
    for (const form of extensions) {
        let type;
        for (const field of form.fields || []) {
            if (!(field.name === 'FORM_TYPE' && field.type === 'hidden')) {
                continue;
            }
            if (field.rawValues && field.rawValues.length === 1) {
                type = escape(field.rawValues[0]);
                break;
            }
            if (field.value && typeof field.value === 'string') {
                type = escape(field.value);
                break;
            }
        }
        if (!type) {
            continue;
        }
        if (types.has(type.toString())) {
            return null;
        }
        types.add(type.toString());
        forms.push({ type, form });
    }
    forms.sort((a, b) => (0, Utils_1$4.octetCompare)(a.type, b.type));
    const results = [];
    for (const form of forms) {
        results.push(form.type);
        const fields = encodeFields(form.form.fields);
        for (const field of fields) {
            results.push(field);
        }
    }
    return results;
}
function generate(info, hashName) {
    const S = [];
    const separator = platform_1$4.Buffer.from('<', 'utf8');
    const append = (b1) => {
        S.push(b1);
        S.push(separator);
    };
    const identities = encodeIdentities(info.identities);
    const features = encodeFeatures(info.features);
    const extensions = encodeForms(info.extensions);
    if (!identities || !features || !extensions) {
        return null;
    }
    for (const id of identities) {
        append(id);
    }
    for (const feature of features) {
        append(feature);
    }
    for (const form of extensions) {
        append(form);
    }
    return (0, platform_1$4.createHash)(hashName).update(platform_1$4.Buffer.concat(S)).digest('base64');
}
LegacyEntityCapabilities.generate = generate;
function verify(info, hashName, check) {
    const computed = generate(info, hashName);
    return !!computed && computed === check;
}
LegacyEntityCapabilities.verify = verify;

Object.defineProperty(DiscoManager, "__esModule", { value: true });
const tslib_1$c = require$$0;
const EntityCaps = (0, tslib_1$c.__importStar)(LegacyEntityCapabilities);
class Disco {
    constructor() {
        this.capsAlgorithms = ['sha-1'];
        this.features = new Map();
        this.identities = new Map();
        this.extensions = new Map();
        this.items = new Map();
        this.caps = new Map();
        this.features.set('', new Set());
        this.identities.set('', []);
        this.extensions.set('', []);
    }
    getNodeInfo(node) {
        return {
            extensions: [...(this.extensions.get(node) || [])],
            features: [...(this.features.get(node) || [])],
            identities: [...(this.identities.get(node) || [])]
        };
    }
    addFeature(feature, node = '') {
        if (!this.features.has(node)) {
            this.features.set(node, new Set());
        }
        this.features.get(node).add(feature);
    }
    addIdentity(identity, node = '') {
        if (!this.identities.has(node)) {
            this.identities.set(node, []);
        }
        this.identities.get(node).push(identity);
    }
    addItem(item, node = '') {
        if (!this.items.has(node)) {
            this.items.set(node, []);
        }
        this.items.get(node).push(item);
    }
    addExtension(form, node = '') {
        if (!this.extensions.has(node)) {
            this.extensions.set(node, []);
        }
        this.extensions.get(node).push(form);
    }
    updateCaps(node, algorithms = this.capsAlgorithms) {
        const info = {
            extensions: [...this.extensions.get('')],
            features: [...this.features.get('')],
            identities: [...this.identities.get('')],
            type: 'info'
        };
        for (const algorithm of algorithms) {
            const version = EntityCaps.generate(info, algorithm);
            if (!version) {
                this.caps.delete(algorithm);
                continue;
            }
            this.caps.set(algorithm, {
                algorithm,
                node,
                value: version
            });
            const hashedNode = `${node}#${version}`;
            for (const feature of info.features) {
                this.addFeature(feature, hashedNode);
            }
            for (const identity of info.identities) {
                this.addIdentity(identity, hashedNode);
            }
            for (const form of info.extensions) {
                this.addExtension(form, hashedNode);
            }
            this.identities.set(hashedNode, info.identities);
            this.features.set(hashedNode, new Set(info.features));
            this.extensions.set(hashedNode, info.extensions);
        }
        return [...this.caps.values()];
    }
    getCaps() {
        return [...this.caps.values()];
    }
}
DiscoManager.default = Disco;

Object.defineProperty(disco, "__esModule", { value: true });
const tslib_1$b = require$$0;
const DiscoManager_1 = (0, tslib_1$b.__importDefault)(DiscoManager);
const JID$7 = (0, tslib_1$b.__importStar)(JID$8);
const Namespaces_1$1q = Namespaces;
function default_1$c(client) {
    client.disco = new DiscoManager_1.default();
    client.disco.addFeature(Namespaces_1$1q.NS_DISCO_INFO);
    client.disco.addFeature(Namespaces_1$1q.NS_DISCO_ITEMS);
    client.disco.addIdentity({
        category: 'client',
        type: 'web'
    });
    client.registerFeature('caps', 100, (features, done) => {
        const domain = JID$7.getDomain(client.jid) || client.config.server;
        client.emit('disco:caps', {
            caps: features.legacyCapabilities || [],
            jid: domain
        });
        client.features.negotiated.caps = true;
        done();
    });
    client.getDiscoInfo = async (jid, node) => {
        const resp = await client.sendIQ({
            disco: {
                node,
                type: 'info'
            },
            to: jid,
            type: 'get'
        });
        return {
            extensions: [],
            features: [],
            identities: [],
            ...resp.disco
        };
    };
    client.getDiscoItems = async (jid, node) => {
        const resp = await client.sendIQ({
            disco: {
                node,
                type: 'items'
            },
            to: jid,
            type: 'get'
        });
        return {
            items: [],
            ...resp.disco
        };
    };
    client.updateCaps = () => {
        const node = client.config.capsNode || 'https://stanzajs.org';
        return client.disco.updateCaps(node);
    };
    client.getCurrentCaps = () => {
        const caps = client.disco.getCaps();
        if (!caps) {
            return;
        }
        const node = `${caps[0].node}#${caps[0].value}`;
        return {
            info: client.disco.getNodeInfo(node),
            legacyCapabilities: caps
        };
    };
    client.on('presence', pres => {
        if (pres.legacyCapabilities) {
            client.emit('disco:caps', {
                caps: pres.legacyCapabilities,
                jid: pres.from
            });
        }
    });
    client.on('iq:get:disco', iq => {
        const { type, node } = iq.disco;
        if (type === 'info') {
            client.sendIQResult(iq, {
                disco: {
                    ...client.disco.getNodeInfo(node || ''),
                    node,
                    type: 'info'
                }
            });
        }
        if (type === 'items') {
            client.sendIQResult(iq, {
                disco: {
                    items: client.disco.items.get(node || '') || [],
                    type: 'items'
                }
            });
        }
    });
}
disco.default = default_1$c;

var entity = {};

Object.defineProperty(entity, "__esModule", { value: true });
const tslib_1$a = require$$0;
const Constants_1$c = Constants;
const Namespaces_1$1p = Namespaces;
const hashes = (0, tslib_1$a.__importStar)(browser);
function default_1$b(client) {
    client.disco.addFeature('jid\\20escaping');
    client.disco.addFeature(Namespaces_1$1p.NS_DELAY);
    client.disco.addFeature(Namespaces_1$1p.NS_EME_0);
    client.disco.addFeature(Namespaces_1$1p.NS_FORWARD_0);
    client.disco.addFeature(Namespaces_1$1p.NS_HASHES_2);
    client.disco.addFeature(Namespaces_1$1p.NS_HASHES_1);
    client.disco.addFeature(Namespaces_1$1p.NS_IDLE_1);
    client.disco.addFeature(Namespaces_1$1p.NS_JSON_0);
    client.disco.addFeature(Namespaces_1$1p.NS_OOB);
    client.disco.addFeature(Namespaces_1$1p.NS_PSA);
    client.disco.addFeature(Namespaces_1$1p.NS_REFERENCE_0);
    client.disco.addFeature(Namespaces_1$1p.NS_SHIM);
    client.disco.addFeature(Namespaces_1$1p.NS_DATAFORM);
    client.disco.addFeature(Namespaces_1$1p.NS_DATAFORM_MEDIA);
    client.disco.addFeature(Namespaces_1$1p.NS_DATAFORM_VALIDATION);
    client.disco.addFeature(Namespaces_1$1p.NS_DATAFORM_LAYOUT);
    const names = hashes.getHashes();
    for (const name of names) {
        client.disco.addFeature((0, Namespaces_1$1p.NS_HASH_NAME)(name));
    }
    client.disco.addFeature(Namespaces_1$1p.NS_TIME);
    client.disco.addFeature(Namespaces_1$1p.NS_VERSION);
    client.on('iq:get:softwareVersion', iq => {
        return client.sendIQResult(iq, {
            softwareVersion: client.config.softwareVersion || {
                name: 'stanzajs.org',
                version: Constants_1$c.VERSION
            }
        });
    });
    client.on('iq:get:time', (iq) => {
        const time = new Date();
        client.sendIQResult(iq, {
            time: {
                tzo: time.getTimezoneOffset(),
                utc: time
            }
        });
    });
    client.getSoftwareVersion = async (jid) => {
        const resp = await client.sendIQ({
            softwareVersion: {},
            to: jid,
            type: 'get'
        });
        return resp.softwareVersion;
    };
    client.getTime = async (jid) => {
        const resp = await client.sendIQ({
            time: {},
            to: jid,
            type: 'get'
        });
        return resp.time;
    };
    client.getLastActivity = async (jid) => {
        const resp = await client.sendIQ({
            lastActivity: {},
            to: jid,
            type: 'get'
        });
        return resp.lastActivity;
    };
}
entity.default = default_1$b;

var features = {};

Object.defineProperty(features, "__esModule", { value: true });
function default_1$a(client) {
    client.features = {
        handlers: Object.create(null),
        negotiated: Object.create(null),
        order: []
    };
    client.registerFeature = function (name, priority, handler) {
        this.features.order.push({
            name,
            priority
        });
        // We want the features with smallest priority values at the start of the list
        this.features.order.sort((a, b) => a.priority - b.priority);
        this.features.handlers[name] = handler.bind(client);
    };
    client.on('features', async (features) => {
        const negotiated = client.features.negotiated;
        const handlers = client.features.handlers;
        const processingOrder = [];
        for (const { name } of client.features.order) {
            if (features[name] && handlers[name] && !negotiated[name]) {
                processingOrder.push(name);
            }
        }
        function processFeature(featureName) {
            return new Promise(resolve => {
                handlers[featureName](features, (command, message) => {
                    if (command) {
                        resolve({ command, message });
                    }
                    else {
                        resolve(null);
                    }
                });
            });
        }
        for (const item of processingOrder) {
            if (negotiated[item]) {
                continue;
            }
            let cmd = '';
            let msg = '';
            try {
                const res = await processFeature(item);
                if (res) {
                    cmd = res.command;
                    msg = res.message || '';
                }
            }
            catch (err) {
                cmd = 'disconnect';
                msg = err.message;
                console.error(err);
            }
            if (!cmd) {
                continue;
            }
            if (cmd === 'restart' && client.transport) {
                client.transport.restart();
            }
            if (cmd === 'disconnect') {
                client.emit('stream:error', {
                    condition: 'policy-violation',
                    text: 'Failed to negotiate stream features: ' + msg
                });
                client.disconnect();
            }
            return;
        }
    });
}
features.default = default_1$a;

var hostmeta = {};

Object.defineProperty(hostmeta, "__esModule", { value: true });
const Namespaces_1$1o = Namespaces;
function default_1$9(client) {
    client.discoverBindings = async (server) => {
        const bosh = new Set();
        const websocket = new Set();
        const discoverHostMeta = client.resolver
            .getHostMeta(server)
            .then(xrd => {
            var _a;
            for (const link of (_a = xrd.links) !== null && _a !== void 0 ? _a : []) {
                if (link.href && link.rel === Namespaces_1$1o.NS_ALT_CONNECTIONS_WEBSOCKET) {
                    websocket.add(link.href);
                }
                if (link.href && link.rel === Namespaces_1$1o.NS_ALT_CONNECTIONS_XBOSH) {
                    bosh.add(link.href);
                }
            }
        })
            .catch(err => console.error(err));
        const discoverDNS = !client.config.allowAlternateDNSDiscovery
            ? Promise.resolve()
            : client.resolver
                .resolveTXT(`_xmppconnect.${server}`)
                .then(txtRecords => {
                for (const group of txtRecords) {
                    for (const value of group) {
                        if (value.startsWith('_xmpp-client-websocket=')) {
                            const url = value.substring(value.indexOf('=') + 1);
                            if (url) {
                                websocket.add(url);
                            }
                        }
                        if (value.startsWith('_xmpp-client-xbosh=')) {
                            const url = value.substring(value.indexOf('=') + 1);
                            if (url) {
                                bosh.add(url);
                            }
                        }
                    }
                }
            })
                .catch(err => console.error(err));
        await Promise.all([discoverHostMeta, discoverDNS]).catch(err => console.error(err));
        return {
            bosh: [...bosh].filter(url => url.startsWith('https://')),
            websocket: [...websocket].filter(url => url.startsWith('wss://'))
        };
    };
}
hostmeta.default = default_1$9;

var jingle = {};

Object.defineProperty(jingle, "__esModule", { value: true });
const tslib_1$9 = require$$0;
const platform_1$3 = browser;
const Jingle = (0, tslib_1$9.__importStar)(jingle$1);
const Namespaces_1$1n = Namespaces;
function default_1$8(client) {
    const hasNativePeerConnection = !!platform_1$3.RTCPeerConnection;
    const defaultConfig = {
        advertiseAudio: hasNativePeerConnection,
        advertiseFileTransfer: hasNativePeerConnection,
        advertiseVideo: hasNativePeerConnection,
        bundlePolicy: 'balanced',
        hasRTCPeerConnection: hasNativePeerConnection,
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
        iceTransportPolicy: 'all',
        rtcpMuxPolicy: 'require',
        trickleIce: true
    };
    const providedConfig = client.config.jingle;
    const config = {
        ...defaultConfig,
        ...providedConfig
    };
    const jingle = (client.jingle = new Jingle.SessionManager(config));
    const caps = [Namespaces_1$1n.NS_JINGLE_1];
    if (config.hasRTCPeerConnection) {
        caps.push(Namespaces_1$1n.NS_JINGLE_ICE_0, Namespaces_1$1n.NS_JINGLE_ICE_UDP_1, Namespaces_1$1n.NS_JINGLE_DTLS_SCTP_1, Namespaces_1$1n.NS_JINGLE_DTLS_0, 'urn:ietf:rfc:5888' // Jingle Grouping Framework
        );
        if (config.trickleIce === false) {
            caps.push('urn:ietf:rfc:3264'); // ICE prefer batched candidates
        }
        if (config.advertiseAudio || config.advertiseVideo) {
            caps.push(Namespaces_1$1n.NS_JINGLE_RTP_1, Namespaces_1$1n.NS_JINGLE_RTP_RTCP_FB_0, Namespaces_1$1n.NS_JINGLE_RTP_HDREXT_0, 'urn:ietf:rfc:5576' // Jingle Source Specific Media Attributes
            );
        }
        if (config.advertiseAudio) {
            caps.push(Namespaces_1$1n.NS_JINGLE_RTP_AUDIO);
        }
        if (config.advertiseVideo) {
            caps.push(Namespaces_1$1n.NS_JINGLE_RTP_VIDEO);
        }
        if (config.advertiseFileTransfer) {
            caps.push(Namespaces_1$1n.NS_JINGLE_FILE_TRANSFER_4, Namespaces_1$1n.NS_JINGLE_FILE_TRANSFER_5);
        }
    }
    for (const cap of caps) {
        client.disco.addFeature(cap);
    }
    const mappedEvents = [
        'outgoing',
        'incoming',
        'accepted',
        'terminated',
        'ringing',
        'mute',
        'unmute',
        'hold',
        'resumed'
    ];
    for (const event of mappedEvents) {
        jingle.on(event, (session, data) => {
            client.emit(('jingle:' + event), session, data);
        });
    }
    jingle.on('createdSession', data => {
        client.emit('jingle:created', data);
    });
    jingle.on('send', async (data) => {
        try {
            if (data.type === 'set') {
                const resp = await client.sendIQ(data);
                if (!resp.jingle) {
                    resp.jingle = {};
                }
                resp.jingle.sid = data.jingle.sid;
                jingle.process(resp);
            }
            if (data.type === 'result') {
                client.sendIQResult({ type: 'set', id: data.id, from: data.to }, data);
            }
            if (data.type === 'error') {
                client.sendIQError({ type: 'set', id: data.id, from: data.to }, data);
            }
        }
        catch (err) {
            if (!err.jingle) {
                err.jingle = data.jingle;
            }
            err.jingle.sid = data.jingle.sid;
            jingle.process(err);
        }
    });
    client.on('session:bound', (jid) => {
        jingle.selfID = jid;
    });
    client.on('iq:set:jingle', (data) => {
        jingle.process(data);
    });
    client.on('unavailable', (pres) => {
        jingle.endPeerSessions(pres.from, undefined, true);
    });
    client.getServices = async (jid, type, version) => {
        const resp = await client.sendIQ({
            externalServices: {
                type,
                version
            },
            to: jid,
            type: 'get'
        });
        const services = resp.externalServices;
        services.services = services.services || [];
        return services;
    };
    client.getServiceCredentials = async (jid, host, type, port, version) => {
        const resp = await client.sendIQ({
            externalServiceCredentials: {
                host,
                port,
                type,
                version
            },
            to: jid,
            type: 'get'
        });
        return resp.externalServiceCredentials;
    };
    client.discoverICEServers = async (opts = {}) => {
        try {
            const resp = await client.getServices(client.config.server, undefined, opts.version);
            const services = resp.services || [];
            const discovered = [];
            for (const service of services) {
                client.jingle.addICEServer(service);
            }
            return discovered;
        }
        catch (err) {
            return [];
        }
    };
}
jingle.default = default_1$8;

var mam = {};

var DataForms = {};

Object.defineProperty(DataForms, "__esModule", { value: true });
DataForms.mergeFields = void 0;
function mergeFields(original, updated) {
    const merged = [];
    const mappedUpdates = new Map();
    for (const field of updated) {
        if (field.name) {
            mappedUpdates.set(field.name, field);
        }
    }
    const usedUpdates = new Set();
    // Update any existing fields with new values.
    for (const field of original) {
        if (field.name && mappedUpdates.has(field.name)) {
            merged.push({
                ...field,
                ...mappedUpdates.get(field.name)
            });
            usedUpdates.add(field.name);
        }
        else {
            merged.push({ ...field });
        }
    }
    // Append any brand new fields to the list
    for (const field of updated) {
        if (!field.name || (field.name && !usedUpdates.has(field.name))) {
            merged.push({ ...field });
        }
    }
    return merged;
}
DataForms.mergeFields = mergeFields;

Object.defineProperty(mam, "__esModule", { value: true });
const tslib_1$8 = require$$0;
const DataForms_1 = DataForms;
const JID$6 = (0, tslib_1$8.__importStar)(JID$8);
const Namespaces_1$1m = Namespaces;
function default_1$7(client) {
    client.getHistorySearchForm = async (jid, opts = {}) => {
        const res = await client.sendIQ({
            archive: {
                type: 'query',
                version: opts.version
            },
            to: jid,
            type: 'get'
        });
        return res.archive.form;
    };
    client.searchHistory = async (jidOrOpts, opts = {}) => {
        const queryid = client.nextId();
        let jid = '';
        if (typeof jidOrOpts === 'string') {
            jid = jidOrOpts;
        }
        else {
            jid = jidOrOpts.to || '';
            opts = jidOrOpts;
        }
        opts.queryId = queryid;
        const form = opts.form || {};
        form.type = 'submit';
        const fields = form.fields || [];
        const defaultFields = [
            {
                name: 'FORM_TYPE',
                type: 'hidden',
                value: Namespaces_1$1m.NS_MAM_2
            }
        ];
        if (opts.with) {
            defaultFields.push({
                name: 'with',
                type: 'text-single',
                value: opts.with
            });
        }
        if (opts.start) {
            defaultFields.push({
                name: 'start',
                type: 'text-single',
                value: opts.start.toISOString()
            });
        }
        if (opts.end) {
            defaultFields.push({
                name: 'end',
                type: 'text-single',
                value: opts.end.toISOString()
            });
        }
        form.fields = (0, DataForms_1.mergeFields)(defaultFields, fields);
        opts.form = form;
        const allowed = JID$6.allowedResponders(client.jid, jid);
        const results = [];
        const collector = (msg) => {
            if (allowed.has(msg.from) && msg.archive && msg.archive.queryId === queryid) {
                results.push(msg.archive);
            }
        };
        client.on('mam:item', collector);
        try {
            const resp = await client.sendIQ({
                archive: opts,
                id: queryid,
                to: jid,
                type: 'set'
            });
            return {
                ...resp.archive,
                results
            };
        }
        finally {
            client.off('mam:item', collector);
        }
    };
    client.getHistoryPreferences = async () => {
        const resp = await client.sendIQ({
            archive: {
                type: 'preferences'
            },
            type: 'get'
        });
        return resp.archive;
    };
    client.setHistoryPreferences = (opts) => {
        return client.sendIQ({
            archive: {
                type: 'preferences',
                ...opts
            },
            type: 'set'
        });
    };
    client.on('message', msg => {
        if (msg.archive) {
            client.emit('mam:item', msg);
        }
    });
}
mam.default = default_1$7;

var messaging = {};

Object.defineProperty(messaging, "__esModule", { value: true });
const tslib_1$7 = require$$0;
const JID$5 = (0, tslib_1$7.__importStar)(JID$8);
const Namespaces_1$1l = Namespaces;
const ACK_TYPES = new Set(['chat', 'groupchat', 'headline', 'normal']);
const ALLOWED_CHAT_STATE_TYPES = new Set(['chat', 'groupchat', 'normal']);
const MARKER_RANK = new Map([
    ['markable', 0],
    ['received', 1],
    ['displayed', 2],
    ['acknowledged', 3]
]);
const isReceivedCarbon = (msg) => !!msg.carbon && msg.carbon.type === 'received';
const isSentCarbon = (msg) => !!msg.carbon && msg.carbon.type === 'sent';
const isChatState = (msg) => !!msg.chatState;
const isReceiptRequest = (msg) => { var _a; return !!msg.receipt && msg.receipt.type === 'request' && ACK_TYPES.has((_a = msg.type) !== null && _a !== void 0 ? _a : 'normal'); };
const hasRTT = (msg) => !!msg.rtt;
const isCorrection = (msg) => !!msg.replace;
const isMarkable = (msg, marker) => {
    var _a;
    return msg.marker &&
        (MARKER_RANK.get(msg.marker.type) < MARKER_RANK.get(marker) ||
            ((_a = msg.marker) === null || _a === void 0 ? void 0 : _a.type) === 'markable');
};
const isFormsMessage = (msg) => !!msg.forms && msg.forms.length > 0;
async function toggleCarbons(client, action) {
    await client.sendIQ({
        carbons: {
            action
        },
        type: 'set'
    });
}
function default_1$6(client) {
    client.disco.addFeature(Namespaces_1$1l.NS_ATTENTION_0);
    client.disco.addFeature(Namespaces_1$1l.NS_CHAT_MARKERS_0);
    client.disco.addFeature(Namespaces_1$1l.NS_CHAT_STATES);
    client.disco.addFeature(Namespaces_1$1l.NS_CORRECTION_0);
    client.disco.addFeature(Namespaces_1$1l.NS_RECEIPTS);
    client.disco.addFeature(Namespaces_1$1l.NS_RTT_0);
    client.enableCarbons = () => toggleCarbons(client, 'enable');
    client.disableCarbons = () => toggleCarbons(client, 'disable');
    client.markReceived = (msg) => client.sendMarker(msg, 'received');
    client.markDisplayed = (msg) => client.sendMarker(msg, 'displayed');
    client.markAcknowledged = (msg) => client.sendMarker(msg, 'acknowledged');
    client.getAttention = (jid, opts = {}) => {
        return client.sendMessage({
            ...opts,
            requestingAttention: true,
            to: jid,
            type: 'headline'
        });
    };
    client.sendMarker = (msg, marker, force) => {
        if (!isMarkable(msg, marker) && !force) {
            return;
        }
        const useStanzaID = client.config.groupchatMarkersUseStanzaID !== false;
        let id = msg.id;
        if (msg.type === 'groupchat' && msg.stanzaIds && useStanzaID) {
            const mucStanzaId = msg.stanzaIds.find(s => JID$5.equalBare(s.by, msg.from));
            if (mucStanzaId) {
                id = mucStanzaId.id;
            }
        }
        client.sendMessage({
            marker: {
                id,
                type: marker
            },
            to: msg.type === 'groupchat' ? JID$5.toBare(msg.from) : msg.from,
            type: msg.type
        });
    };
    client.on('message', msg => {
        if (msg.carbon && JID$5.equalBare(msg.from, client.jid)) {
            const forwardedMessage = msg.carbon.forward.message;
            if (!forwardedMessage.delay) {
                forwardedMessage.delay = msg.carbon.forward.delay || {
                    timestamp: new Date(Date.now())
                };
            }
            if (isReceivedCarbon(msg)) {
                client.emit('carbon:received', msg);
                client.emit('message', forwardedMessage);
            }
            if (isSentCarbon(msg)) {
                client.emit('carbon:sent', msg);
                client.emit('message:sent', forwardedMessage, true);
            }
        }
        if (isFormsMessage(msg)) {
            client.emit('dataform', msg);
        }
        if (msg.requestingAttention) {
            client.emit('attention', msg);
        }
        if (hasRTT(msg)) {
            client.emit('rtt', msg);
        }
        if (isCorrection(msg)) {
            client.emit('replace', msg);
        }
        if (isChatState(msg) && ALLOWED_CHAT_STATE_TYPES.has(msg.type || 'normal')) {
            client.emit('chat:state', msg);
        }
        const sendReceipts = client.config.sendReceipts !== false;
        const sendMUCReceipts = client.config.sendMUCReceipts !== false;
        const sendMarkers = client.config.chatMarkers !== false;
        const useStanzaID = client.config.groupchatMarkersUseStanzaID !== false;
        const isReceipt = isReceiptRequest(msg);
        const isReceivedMarkable = isMarkable(msg, 'received');
        const canSendReceipt = isReceipt && sendReceipts && (msg.type === 'groupchat' ? sendMUCReceipts : true);
        if (canSendReceipt || (sendMarkers && isReceivedMarkable)) {
            const to = msg.type === 'groupchat' ? JID$5.toBare(msg.from) : msg.from;
            let markerId = msg.id;
            if (msg.type === 'groupchat' && msg.stanzaIds && useStanzaID) {
                const mucStanzaId = msg.stanzaIds.find(s => JID$5.equalBare(s.by, msg.from));
                if (mucStanzaId) {
                    markerId = mucStanzaId.id;
                }
            }
            client.sendMessage({
                receipt: canSendReceipt
                    ? {
                        id: msg.id,
                        type: 'received'
                    }
                    : undefined,
                marker: sendMarkers && isReceivedMarkable
                    ? {
                        id: markerId,
                        type: 'received'
                    }
                    : undefined,
                to,
                type: msg.type
            });
        }
        if (msg.receipt && msg.receipt.type === 'received') {
            client.emit('receipt', msg);
        }
        if (msg.marker && msg.marker.type !== 'markable') {
            client.emit(`marker:${msg.marker.type}`, msg);
        }
    });
}
messaging.default = default_1$6;

var muc = {};

Object.defineProperty(muc, "__esModule", { value: true });
const tslib_1$6 = require$$0;
const Constants_1$b = Constants;
const JID$4 = (0, tslib_1$6.__importStar)(JID$8);
const Namespaces_1$1k = Namespaces;
const Utils_1$3 = Utils;
function isMUCPresence(pres) {
    return !!pres.muc;
}
function default_1$5(client) {
    client.disco.addFeature(Namespaces_1$1k.NS_MUC);
    client.disco.addFeature(Namespaces_1$1k.NS_MUC_DIRECT_INVITE);
    client.disco.addFeature(Namespaces_1$1k.NS_HATS_0);
    client.joinedRooms = new Map();
    client.joiningRooms = new Map();
    client.leavingRooms = new Map();
    function rejoinRooms() {
        const oldJoiningRooms = client.joiningRooms;
        client.joiningRooms = new Map();
        for (const [room, nick] of oldJoiningRooms) {
            client.joinRoom(room, nick);
        }
        const oldJoinedRooms = client.joinedRooms;
        client.joinedRooms = new Map();
        for (const [room, nick] of oldJoinedRooms) {
            client.joinRoom(room, nick);
        }
    }
    client.on('session:started', rejoinRooms);
    client.on('message', msg => {
        if (msg.type === 'groupchat' && msg.hasSubject && !msg.body) {
            client.emit('muc:topic', {
                from: msg.from,
                room: JID$4.toBare(msg.from),
                topic: msg.subject || ''
            });
            return;
        }
        if (!msg.muc) {
            return;
        }
        if (msg.muc.type === 'direct-invite' || (!msg.muc.invite && msg.legacyMUC)) {
            const invite = msg.muc.type === 'direct-invite' ? msg.muc : msg.legacyMUC;
            client.emit('muc:invite', {
                from: msg.from,
                password: invite.password,
                reason: invite.reason,
                room: invite.jid,
                thread: invite.thread,
                type: 'direct'
            });
            return;
        }
        if (msg.muc.invite) {
            client.emit('muc:invite', {
                from: msg.muc.invite[0].from,
                password: msg.muc.password,
                reason: msg.muc.invite[0].reason,
                room: msg.from,
                thread: msg.muc.invite[0].thread,
                type: 'mediated'
            });
            return;
        }
        if (msg.muc.decline) {
            client.emit('muc:declined', {
                from: msg.muc.decline.from,
                reason: msg.muc.decline.reason,
                room: msg.from
            });
            return;
        }
        client.emit('muc:other', msg);
    });
    client.on('presence', pres => {
        const room = JID$4.toBare(pres.from);
        if (client.joiningRooms.has(room) && pres.type === 'error') {
            client.joiningRooms.delete(room);
            client.emit('muc:failed', pres);
            client.emit('muc:error', pres);
            return;
        }
        if (!isMUCPresence(pres)) {
            return;
        }
        const isSelf = pres.muc.statusCodes && pres.muc.statusCodes.indexOf(Constants_1$b.MUCStatusCode.SelfPresence) >= 0;
        const isNickChange = pres.muc.statusCodes && pres.muc.statusCodes.indexOf(Constants_1$b.MUCStatusCode.NickChanged) >= 0;
        if (pres.type === 'error') {
            client.emit('muc:error', pres);
            return;
        }
        if (pres.type === 'unavailable') {
            client.emit('muc:unavailable', pres);
            if (isSelf) {
                if (isNickChange) {
                    client.joinedRooms.set(room, pres.muc.nick);
                }
                else {
                    client.emit('muc:leave', pres);
                    client.joinedRooms.delete(room);
                    client.leavingRooms.delete(room);
                }
            }
            if (pres.muc.destroy) {
                client.emit('muc:destroyed', {
                    newRoom: pres.muc.destroy.jid,
                    password: pres.muc.destroy.password,
                    reason: pres.muc.destroy.reason,
                    room
                });
            }
            return;
        }
        client.emit('muc:available', pres);
        const isJoin = client.joiningRooms.has(room) || !client.joinedRooms.has(room);
        if (isSelf) {
            client.joinedRooms.set(room, JID$4.getResource(pres.from));
            if (isJoin) {
                client.joiningRooms.delete(room);
                client.emit('muc:join', pres);
            }
        }
    });
    client.joinRoom = async (room, nick, opts = {}) => {
        room = JID$4.toBare(room);
        client.joiningRooms.set(room, nick || '');
        if (!nick) {
            try {
                nick = await client.getReservedNick(room);
                client.joiningRooms.set(room, nick);
            }
            catch (err) {
                throw new Error('Room nick required');
            }
        }
        return new Promise((resolve, reject) => {
            function joined(pres) {
                if (JID$4.equalBare(pres.from, room)) {
                    client.off('muc:join', joined);
                    client.off('muc:failed', failed);
                    resolve(pres);
                }
            }
            function failed(pres) {
                if (JID$4.equalBare(pres.from, room)) {
                    client.off('muc:join', joined);
                    client.off('muc:failed', failed);
                    reject(pres);
                }
            }
            client.on('muc:join', joined);
            client.on('muc:failed', failed);
            client.sendPresence({
                ...opts,
                muc: {
                    ...opts.muc,
                    type: 'join'
                },
                to: JID$4.createFull(room, nick)
            });
        });
    };
    client.leaveRoom = (room, nick, opts = {}) => {
        room = JID$4.toBare(room);
        nick = nick || client.joinedRooms.get(room);
        client.leavingRooms.set(room, nick);
        return new Promise((resolve, reject) => {
            const id = opts.id || (0, Utils_1$3.uuid)();
            const allowed = JID$4.allowedResponders(room);
            function leave(pres) {
                if (JID$4.equalBare(pres.from, room)) {
                    client.off('muc:leave', leave);
                    client.off('presence:error', leaveError);
                    resolve(pres);
                }
            }
            function leaveError(pres) {
                if (pres.id === id && allowed.has(pres.from)) {
                    if (!client.joinedRooms.has(room)) {
                        client.leavingRooms.delete(room);
                    }
                    client.off('muc:leave', leave);
                    client.off('presence:error', leaveError);
                    reject(pres);
                }
            }
            client.on('muc:leave', leave);
            client.on('presence:error', leaveError);
            client.sendPresence({
                ...opts,
                id,
                to: JID$4.createFull(room, nick),
                type: 'unavailable'
            });
        });
    };
    client.ban = (room, occupantRealJID, reason) => {
        return client.setRoomAffiliation(room, occupantRealJID, 'outcast', reason);
    };
    client.kick = (room, nick, reason) => {
        return client.setRoomRole(room, nick, 'none', reason);
    };
    client.invite = (room, opts = []) => {
        if (!Array.isArray(opts)) {
            opts = [opts];
        }
        client.sendMessage({
            muc: {
                invite: opts,
                type: 'info'
            },
            to: room
        });
    };
    client.directInvite = (room, to, opts = {}) => {
        client.sendMessage({
            muc: {
                ...opts,
                jid: room,
                type: 'direct-invite'
            },
            to
        });
    };
    client.declineInvite = (room, sender, reason) => {
        client.sendMessage({
            muc: {
                decline: {
                    reason,
                    to: sender
                },
                type: 'info'
            },
            to: room
        });
    };
    client.changeNick = (room, nick) => {
        const id = (0, Utils_1$3.uuid)();
        const newJID = JID$4.createFull(room, nick);
        const allowed = JID$4.allowedResponders(room);
        return new Promise((resolve, reject) => {
            function success(pres) {
                if (!allowed.has(JID$4.toBare(pres.from))) {
                    return;
                }
                if (!pres.muc.statusCodes ||
                    !pres.muc.statusCodes.includes(Constants_1$b.MUCStatusCode.SelfPresence)) {
                    return;
                }
                client.off('muc:available', success);
                client.off(`presence:id:${id}`, errorOrNoChange);
                resolve(pres);
            }
            function errorOrNoChange(pres) {
                if (!allowed.has(JID$4.toBare(pres.from)) || pres.id !== id) {
                    return;
                }
                client.off('muc:available', success);
                client.off(`presence:id:${id}`, errorOrNoChange);
                if (pres.type === 'error') {
                    reject(pres);
                }
                else {
                    resolve(pres);
                }
            }
            client.on('muc:available', success);
            client.on(`presence:id:${id}`, errorOrNoChange);
            client.sendPresence({
                id,
                to: newJID
            });
        });
    };
    client.setSubject = (room, subject) => {
        client.sendMessage({
            subject,
            to: room,
            type: 'groupchat'
        });
    };
    client.getReservedNick = async (room) => {
        try {
            const info = await client.getDiscoInfo(room, 'x-roomuser-item');
            const identity = info.identities[0];
            if (identity.name) {
                return identity.name;
            }
            else {
                throw new Error('No nickname reserved');
            }
        }
        catch (err) {
            throw new Error('No nickname reserved');
        }
    };
    client.requestRoomVoice = (room) => {
        client.sendMessage({
            forms: [
                {
                    fields: [
                        {
                            name: 'FORM_TYPE',
                            type: 'hidden',
                            value: 'http://jabber.org/protocol/muc#request'
                        },
                        {
                            name: 'muc#role',
                            type: 'text-single',
                            value: 'participant'
                        }
                    ],
                    type: 'submit'
                }
            ],
            to: room
        });
    };
    client.setRoomAffiliation = (room, occupantRealJID, affiliation, reason) => {
        return client.sendIQ({
            muc: {
                type: 'user-list',
                users: [
                    {
                        affiliation,
                        jid: occupantRealJID,
                        reason
                    }
                ]
            },
            to: room,
            type: 'set'
        });
    };
    client.setRoomRole = (room, nick, role, reason) => {
        return client.sendIQ({
            muc: {
                type: 'user-list',
                users: [
                    {
                        nick,
                        reason,
                        role
                    }
                ]
            },
            to: room,
            type: 'set'
        });
    };
    client.getRoomMembers = (room, opts = { affiliation: 'member' }) => {
        return client.sendIQ({
            muc: {
                type: 'user-list',
                users: [opts]
            },
            to: room,
            type: 'get'
        });
    };
    client.getRoomConfig = async (room) => {
        const result = await client.sendIQ({
            muc: {
                type: 'configure'
            },
            to: room,
            type: 'get'
        });
        if (!result.muc.form) {
            throw new Error('No configuration form returned');
        }
        return result.muc.form;
    };
    client.configureRoom = (room, form = {}) => {
        return client.sendIQ({
            muc: {
                form: {
                    ...form,
                    type: 'submit'
                },
                type: 'configure'
            },
            to: room,
            type: 'set'
        });
    };
    client.destroyRoom = (room, opts = {}) => {
        return client.sendIQ({
            muc: {
                destroy: opts,
                type: 'configure'
            },
            to: room,
            type: 'set'
        });
    };
    client.getUniqueRoomName = async function (mucHost) {
        const result = await this.sendIQ({
            muc: {
                type: 'unique'
            },
            to: mucHost,
            type: 'get'
        });
        if (!result.muc.name) {
            throw new Error('No unique name returned');
        }
        return result.muc.name;
    };
    client.getBookmarks = async () => {
        const res = await client.getPrivateData('bookmarks');
        if (!res || !res.rooms) {
            return [];
        }
        return res.rooms;
    };
    client.setBookmarks = (bookmarks) => {
        return client.setPrivateData('bookmarks', {
            rooms: bookmarks
        });
    };
    client.addBookmark = async (bookmark) => {
        const mucs = await client.getBookmarks();
        const updated = [];
        let updatedExisting = false;
        for (const muc of mucs) {
            if (JID$4.equalBare(muc.jid, bookmark.jid)) {
                updated.push({
                    ...muc,
                    ...bookmark
                });
                updatedExisting = true;
            }
            else {
                updated.push(muc);
            }
        }
        if (!updatedExisting) {
            updated.push(bookmark);
        }
        return client.setBookmarks(updated);
    };
    client.removeBookmark = async (jid) => {
        const existingMucs = await client.getBookmarks();
        const updated = existingMucs.filter(muc => {
            return !JID$4.equalBare(muc.jid, jid);
        });
        return client.setBookmarks(updated);
    };
}
muc.default = default_1$5;

var pep = {};

Object.defineProperty(pep, "__esModule", { value: true });
const Namespaces_1$1j = Namespaces;
function default_1$4(client) {
    client.disco.addFeature(Namespaces_1$1j.NS_ACTIVITY);
    client.disco.addFeature(Namespaces_1$1j.NS_GEOLOC);
    client.disco.addFeature(Namespaces_1$1j.NS_MOOD);
    client.disco.addFeature(Namespaces_1$1j.NS_NICK);
    client.disco.addFeature(Namespaces_1$1j.NS_TUNE);
    client.disco.addFeature((0, Namespaces_1$1j.NS_PEP_NOTIFY)(Namespaces_1$1j.NS_ACTIVITY));
    client.disco.addFeature((0, Namespaces_1$1j.NS_PEP_NOTIFY)(Namespaces_1$1j.NS_GEOLOC));
    client.disco.addFeature((0, Namespaces_1$1j.NS_PEP_NOTIFY)(Namespaces_1$1j.NS_MOOD));
    client.disco.addFeature((0, Namespaces_1$1j.NS_PEP_NOTIFY)(Namespaces_1$1j.NS_NICK));
    client.disco.addFeature((0, Namespaces_1$1j.NS_PEP_NOTIFY)(Namespaces_1$1j.NS_TUNE));
    client.publishActivity = (data) => {
        return client.publish('', Namespaces_1$1j.NS_ACTIVITY, {
            itemType: Namespaces_1$1j.NS_ACTIVITY,
            ...data
        });
    };
    client.publishGeoLoc = (data) => {
        return client.publish('', Namespaces_1$1j.NS_GEOLOC, {
            itemType: Namespaces_1$1j.NS_GEOLOC,
            ...data
        });
    };
    client.publishMood = (mood) => {
        return client.publish('', Namespaces_1$1j.NS_MOOD, {
            itemType: Namespaces_1$1j.NS_MOOD,
            ...mood
        });
    };
    client.publishNick = (nick) => {
        return client.publish('', Namespaces_1$1j.NS_NICK, {
            itemType: Namespaces_1$1j.NS_NICK,
            nick
        });
    };
    client.publishTune = (tune) => {
        return client.publish('', Namespaces_1$1j.NS_TUNE, {
            itemType: Namespaces_1$1j.NS_TUNE,
            ...tune
        });
    };
    client.on('pubsub:published', msg => {
        const content = msg.pubsub.items.published[0].content;
        switch (msg.pubsub.items.node) {
            case Namespaces_1$1j.NS_ACTIVITY:
                return client.emit('activity', {
                    activity: content,
                    jid: msg.from
                });
            case Namespaces_1$1j.NS_GEOLOC:
                return client.emit('geoloc', {
                    geoloc: content,
                    jid: msg.from
                });
            case Namespaces_1$1j.NS_MOOD:
                return client.emit('mood', {
                    jid: msg.from,
                    mood: content
                });
            case Namespaces_1$1j.NS_NICK:
                return client.emit('nick', {
                    jid: msg.from,
                    nick: content.nick
                });
            case Namespaces_1$1j.NS_TUNE:
                return client.emit('tune', {
                    jid: msg.from,
                    tune: msg.pubsub.items.published[0].content
                });
        }
    });
}
pep.default = default_1$4;

var pubsub = {};

Object.defineProperty(pubsub, "__esModule", { value: true });
const tslib_1$5 = require$$0;
const JID$3 = (0, tslib_1$5.__importStar)(JID$8);
const Namespaces_1$1i = Namespaces;
function isPubsubMessage(msg) {
    return !!msg.pubsub;
}
function isPubsubPublish(msg) {
    return !!msg.pubsub.items && !!msg.pubsub.items.published;
}
function isPubsubRetract(msg) {
    return !!msg.pubsub.items && !!msg.pubsub.items.retracted;
}
function isPubsubPurge(msg) {
    return msg.pubsub.eventType === 'purge';
}
function isPubsubDelete(msg) {
    return msg.pubsub.eventType === 'delete';
}
function isPubsubSubscription(msg) {
    return msg.pubsub.eventType === 'subscription';
}
function isPubsubConfiguration(msg) {
    return msg.pubsub.eventType === 'configuration';
}
function isPubsubAffiliation(msg) {
    if (!msg.pubsub) {
        return false;
    }
    return (!msg.pubsub.context || msg.pubsub.context === 'user') && !!msg.pubsub.affiliations;
}
function default_1$3(client) {
    client.disco.addFeature(`${Namespaces_1$1i.NS_SHIM}#SubID`, Namespaces_1$1i.NS_SHIM);
    client.on('message', msg => {
        if (isPubsubAffiliation(msg)) {
            client.emit('pubsub:affiliations', msg);
            return;
        }
        if (!isPubsubMessage(msg)) {
            return;
        }
        client.emit('pubsub:event', msg);
        if (isPubsubPublish(msg)) {
            client.emit('pubsub:published', msg);
            return;
        }
        if (isPubsubRetract(msg)) {
            client.emit('pubsub:retracted', msg);
            return;
        }
        if (isPubsubPurge(msg)) {
            client.emit('pubsub:purged', msg);
            return;
        }
        if (isPubsubDelete(msg)) {
            client.emit('pubsub:deleted', msg);
            return;
        }
        if (isPubsubSubscription(msg)) {
            client.emit('pubsub:subscription', msg);
            return;
        }
        if (isPubsubConfiguration(msg)) {
            client.emit('pubsub:config', msg);
            return;
        }
    });
    client.subscribeToNode = async (jid, opts) => {
        const subscribe = {};
        let form;
        if (typeof opts === 'string') {
            subscribe.node = opts;
            subscribe.jid = JID$3.toBare(client.jid);
        }
        else {
            subscribe.node = opts.node;
            subscribe.jid = opts.jid || (opts.useBareJID ? JID$3.toBare(client.jid) : client.jid);
            form = opts.options;
        }
        const resp = await client.sendIQ({
            pubsub: {
                context: 'user',
                subscribe,
                subscriptionOptions: form ? { form } : undefined
            },
            to: jid,
            type: 'set'
        });
        const sub = resp.pubsub.subscription || {};
        if (resp.pubsub.subscriptionOptions) {
            sub.options = resp.pubsub.subscriptionOptions.form;
        }
        return sub;
    };
    client.unsubscribeFromNode = async (jid, opts) => {
        const unsubscribe = {};
        if (typeof opts === 'string') {
            unsubscribe.node = opts;
            unsubscribe.jid = JID$3.toBare(client.jid);
        }
        else {
            unsubscribe.node = opts.node;
            unsubscribe.subid = opts.subid;
            unsubscribe.jid = opts.jid || (opts.useBareJID ? JID$3.toBare(client.jid) : client.jid);
        }
        const resp = await client.sendIQ({
            pubsub: {
                context: 'user',
                unsubscribe
            },
            to: jid,
            type: 'set'
        });
        if (!resp.pubsub || !resp.pubsub.subscription) {
            return {
                ...unsubscribe,
                state: 'none'
            };
        }
        return resp.pubsub.subscription;
    };
    client.publish = (jid, node, item, id) => {
        return client.sendIQ({
            pubsub: {
                context: 'user',
                publish: {
                    item: {
                        content: item,
                        id
                    },
                    node
                }
            },
            to: jid,
            type: 'set'
        });
    };
    client.getItem = async (jid, node, id) => {
        const resp = await client.sendIQ({
            pubsub: {
                context: 'user',
                fetch: {
                    items: [{ id }],
                    node
                }
            },
            to: jid,
            type: 'get'
        });
        return resp.pubsub.fetch.items[0];
    };
    client.getItems = async (jid, node, opts = {}) => {
        const resp = await client.sendIQ({
            pubsub: {
                context: 'user',
                fetch: {
                    max: opts.max,
                    node
                },
                paging: opts
            },
            to: jid,
            type: 'get'
        });
        const result = resp.pubsub.fetch;
        result.paging = resp.pubsub.paging;
        return result;
    };
    client.retract = (jid, node, id, notify) => {
        return client.sendIQ({
            pubsub: {
                context: 'user',
                retract: {
                    id,
                    node,
                    notify
                }
            },
            to: jid,
            type: 'set'
        });
    };
    client.purgeNode = (jid, node) => {
        return client.sendIQ({
            pubsub: {
                context: 'owner',
                purge: node
            },
            to: jid,
            type: 'set'
        });
    };
    client.deleteNode = (jid, node, redirect) => {
        return client.sendIQ({
            pubsub: {
                context: 'owner',
                destroy: {
                    node,
                    redirect
                }
            },
            to: jid,
            type: 'set'
        });
    };
    client.createNode = async (jid, node, config) => {
        const resp = await client.sendIQ({
            pubsub: {
                configure: config
                    ? {
                        form: config
                    }
                    : undefined,
                context: 'user',
                create: {
                    node
                }
            },
            to: jid,
            type: 'set'
        });
        if (!resp.pubsub || !resp.pubsub.create) {
            return {
                node
            };
        }
        return resp.pubsub.create;
    };
    client.getSubscriptions = async (jid, opts = {}) => {
        const resp = await client.sendIQ({
            pubsub: {
                context: 'user',
                subscriptions: opts
            },
            to: jid,
            type: 'get'
        });
        return resp.pubsub.subscriptions;
    };
    client.getAffiliations = (jid, node) => {
        return client.sendIQ({
            pubsub: {
                affiliations: {
                    node
                }
            },
            to: jid,
            type: 'get'
        });
    };
    client.getNodeSubscribers = (jid, node, opts = {}) => {
        if (typeof node === 'string') {
            opts.node = node;
        }
        else {
            opts = {
                ...opts,
                ...node
            };
        }
        return client.sendIQ({
            pubsub: {
                context: 'owner',
                subscriptions: opts
            },
            to: jid,
            type: 'get'
        });
    };
    client.updateNodeSubscriptions = (jid, node, delta) => {
        return client.sendIQ({
            pubsub: {
                context: 'owner',
                subscriptions: {
                    items: delta,
                    node
                }
            },
            to: jid,
            type: 'set'
        });
    };
    client.getNodeAffiliations = async (jid, node) => {
        const resp = await client.sendIQ({
            pubsub: {
                affiliations: {
                    node
                },
                context: 'owner'
            },
            to: jid,
            type: 'get'
        });
        return resp.pubsub.affiliations;
    };
    client.updateNodeAffiliations = (jid, node, items) => {
        return client.sendIQ({
            pubsub: {
                affiliations: {
                    items,
                    node
                },
                context: 'owner'
            },
            to: jid,
            type: 'set'
        });
    };
    client.getNodeConfig = async (jid, node) => {
        const resp = await client.sendIQ({
            pubsub: {
                configure: {
                    node
                },
                context: 'owner'
            },
            to: jid,
            type: 'get'
        });
        return resp.pubsub.configure.form || {};
    };
    client.getDefaultNodeConfig = async (jid) => {
        const resp = await client.sendIQ({
            pubsub: {
                context: 'owner',
                defaultConfiguration: {}
            },
            to: jid,
            type: 'get'
        });
        return resp.pubsub.defaultConfiguration.form || {};
    };
    client.configureNode = async (jid, node, config) => {
        return client.sendIQ({
            pubsub: {
                configure: {
                    form: config,
                    node
                },
                context: 'owner'
            },
            to: jid,
            type: 'set'
        });
    };
    client.getDefaultSubscriptionOptions = async (jid) => {
        const resp = await client.sendIQ({
            pubsub: {
                defaultSubscriptionOptions: {}
            },
            to: jid,
            type: 'get'
        });
        return resp.pubsub.defaultSubscriptionOptions.form || {};
    };
}
pubsub.default = default_1$3;

var roster = {};

Object.defineProperty(roster, "__esModule", { value: true });
const tslib_1$4 = require$$0;
const JID$2 = (0, tslib_1$4.__importStar)(JID$8);
function default_1$2(client) {
    client.on('iq:set:roster', iq => {
        const allowed = JID$2.allowedResponders(client.jid);
        if (!allowed.has(iq.from)) {
            return client.sendIQError(iq, {
                error: {
                    condition: 'service-unavailable',
                    type: 'cancel'
                }
            });
        }
        client.emit('roster:update', iq);
        client.sendIQResult(iq);
    });
    client.on('iq:set:blockList', iq => {
        const allowed = JID$2.allowedResponders(client.jid);
        if (!allowed.has(iq.from)) {
            return client.sendIQError(iq, {
                error: {
                    condition: 'service-unavailable',
                    type: 'cancel'
                }
            });
        }
        const blockList = iq.blockList;
        client.emit(blockList.action, {
            jids: blockList.jids || []
        });
        client.sendIQResult(iq);
    });
    client.getRoster = async () => {
        const resp = await client.sendIQ({
            roster: {
                version: client.config.rosterVer
            },
            type: 'get'
        });
        if (resp.roster) {
            const version = resp.roster.version;
            if (version) {
                client.config.rosterVer = version;
                client.emit('roster:ver', version);
            }
            resp.roster.items = resp.roster.items || [];
            return resp.roster;
        }
        else {
            return { items: [] };
        }
    };
    client.updateRosterItem = async (item) => {
        await client.sendIQ({
            roster: {
                items: [item]
            },
            type: 'set'
        });
    };
    client.removeRosterItem = (jid) => {
        return client.updateRosterItem({ jid, subscription: 'remove' });
    };
    client.subscribe = (jid) => {
        client.sendPresence({ type: 'subscribe', to: jid });
    };
    client.unsubscribe = (jid) => {
        client.sendPresence({ type: 'unsubscribe', to: jid });
    };
    client.acceptSubscription = (jid) => {
        client.sendPresence({ type: 'subscribed', to: jid });
    };
    client.denySubscription = (jid) => {
        client.sendPresence({ type: 'unsubscribed', to: jid });
    };
    client.getBlocked = async () => {
        const result = await client.sendIQ({
            blockList: {
                action: 'list'
            },
            type: 'get'
        });
        return {
            jids: [],
            ...result.blockList
        };
    };
    async function toggleBlock(action, jid) {
        await client.sendIQ({
            blockList: {
                action,
                jids: [jid]
            },
            type: 'set'
        });
    }
    client.block = async (jid) => toggleBlock('block', jid);
    client.unblock = async (jid) => toggleBlock('unblock', jid);
    client.goInvisible = async (probe = false) => {
        await client.sendIQ({
            type: 'set',
            visiblity: {
                probe,
                type: 'invisible'
            }
        });
    };
    client.goVisible = async () => {
        await client.sendIQ({
            type: 'set',
            visiblity: {
                type: 'visible'
            }
        });
    };
}
roster.default = default_1$2;

var sasl = {};

Object.defineProperty(sasl, "__esModule", { value: true });
function default_1$1(client) {
    client.registerFeature('sasl', 100, async (features, done) => {
        const mech = client.sasl.createMechanism(features.sasl.mechanisms);
        const saslHandler = async (sasl) => {
            if (!mech) {
                return;
            }
            switch (sasl.type) {
                case 'success': {
                    client.features.negotiated.sasl = true;
                    client.off('sasl', saslHandler);
                    client.emit('auth:success', client.config.credentials);
                    if (client.transport) {
                        client.transport.authenticated = true;
                    }
                    done('restart');
                    return;
                }
                case 'challenge': {
                    mech.processChallenge(sasl.value);
                    try {
                        const credentials = (await client.getCredentials());
                        const resp = mech.createResponse(credentials);
                        if (resp || resp === '') {
                            client.send('sasl', {
                                type: 'response',
                                value: resp
                            });
                        }
                        else {
                            client.send('sasl', {
                                type: 'response'
                            });
                        }
                        const cacheable = mech.getCacheableCredentials();
                        if (cacheable) {
                            if (!client.config.credentials) {
                                client.config.credentials = {};
                            }
                            client.config.credentials = {
                                ...client.config.credentials,
                                ...cacheable
                            };
                            client.emit('credentials:update', client.config.credentials);
                        }
                    }
                    catch (err) {
                        console.error(err);
                        client.send('sasl', {
                            type: 'abort'
                        });
                    }
                    return;
                }
                case 'failure':
                case 'abort': {
                    client.off('sasl', saslHandler);
                    client.emit('auth:failed');
                    done('disconnect', 'authentication failed');
                    return;
                }
            }
        };
        if (!mech) {
            client.off('sasl', saslHandler);
            client.emit('auth:failed');
            return done('disconnect', 'authentication failed');
        }
        client.on('sasl', saslHandler);
        client.once('--reset-stream-features', () => {
            client.features.negotiated.sasl = false;
            client.off('sasl', saslHandler);
        });
        try {
            const credentials = (await client.getCredentials());
            client.send('sasl', {
                mechanism: mech.name,
                type: 'auth',
                value: mech.createResponse(credentials)
            });
        }
        catch (err) {
            console.error(err);
            client.send('sasl', {
                type: 'abort'
            });
        }
    });
}
sasl.default = default_1$1;

var sharing = {};

Object.defineProperty(sharing, "__esModule", { value: true });
const tslib_1$3 = require$$0;
const JID$1 = (0, tslib_1$3.__importStar)(JID$8);
const Namespaces_1$1h = Namespaces;
function default_1(client) {
    client.disco.addFeature(Namespaces_1$1h.NS_BOB);
    client.getBits = async (jid, cid) => {
        const result = await client.sendIQ({
            bits: {
                cid
            },
            to: jid,
            type: 'get'
        });
        return result.bits;
    };
    async function getUploadParameters(jid) {
        const disco = await client.getDiscoInfo(jid);
        if (!disco.features || !disco.features.includes(Namespaces_1$1h.NS_HTTP_UPLOAD_0)) {
            return;
        }
        let maxSize;
        for (const form of disco.extensions || []) {
            const fields = form.fields || [];
            if (fields.some(field => field.name === 'FORM_TYPE' && field.value === Namespaces_1$1h.NS_HTTP_UPLOAD_0)) {
                const sizeField = fields.find(field => field.name === 'max-file-size');
                if (sizeField) {
                    maxSize = parseInt(sizeField.value, 10);
                }
                return {
                    jid,
                    maxSize
                };
            }
        }
    }
    client.getUploadService = async (domain = JID$1.getDomain(client.jid)) => {
        const domainParameters = await getUploadParameters(domain);
        if (domainParameters) {
            return domainParameters;
        }
        const disco = await client.getDiscoItems(domain);
        for (const item of disco.items || []) {
            if (!item.jid) {
                continue;
            }
            const itemParameters = await getUploadParameters(item.jid);
            if (itemParameters) {
                return itemParameters;
            }
        }
        throw new Error('No upload service discovered on: ' + domain);
    };
    client.getUploadSlot = async (uploadService, uploadRequest) => {
        const resp = await client.sendIQ({
            httpUpload: {
                type: 'request',
                ...uploadRequest
            },
            to: uploadService,
            type: 'get'
        });
        return resp.httpUpload;
    };
}
sharing.default = default_1;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.core = void 0;
	const tslib_1 = require$$0;
	(0, tslib_1.__exportStar)(account, exports);
	(0, tslib_1.__exportStar)(avatar, exports);
	(0, tslib_1.__exportStar)(bind, exports);
	(0, tslib_1.__exportStar)(command, exports);
	(0, tslib_1.__exportStar)(connection, exports);
	(0, tslib_1.__exportStar)(disco, exports);
	(0, tslib_1.__exportStar)(entity, exports);
	(0, tslib_1.__exportStar)(features, exports);
	(0, tslib_1.__exportStar)(hostmeta, exports);
	(0, tslib_1.__exportStar)(jingle, exports);
	(0, tslib_1.__exportStar)(mam, exports);
	(0, tslib_1.__exportStar)(messaging, exports);
	(0, tslib_1.__exportStar)(muc, exports);
	(0, tslib_1.__exportStar)(pep, exports);
	(0, tslib_1.__exportStar)(pubsub, exports);
	(0, tslib_1.__exportStar)(roster, exports);
	(0, tslib_1.__exportStar)(sasl, exports);
	(0, tslib_1.__exportStar)(sharing, exports);
	const account_1 = (0, tslib_1.__importDefault)(account);
	const avatar_1 = (0, tslib_1.__importDefault)(avatar);
	const bind_1 = (0, tslib_1.__importDefault)(bind);
	const command_1 = (0, tslib_1.__importDefault)(command);
	const connection_1 = (0, tslib_1.__importDefault)(connection);
	const disco_1 = (0, tslib_1.__importDefault)(disco);
	const entity_1 = (0, tslib_1.__importDefault)(entity);
	const features_1 = (0, tslib_1.__importDefault)(features);
	const hostmeta_1 = (0, tslib_1.__importDefault)(hostmeta);
	const jingle_1 = (0, tslib_1.__importDefault)(jingle);
	const mam_1 = (0, tslib_1.__importDefault)(mam);
	const messaging_1 = (0, tslib_1.__importDefault)(messaging);
	const muc_1 = (0, tslib_1.__importDefault)(muc);
	const pep_1 = (0, tslib_1.__importDefault)(pep);
	const pubsub_1 = (0, tslib_1.__importDefault)(pubsub);
	const roster_1 = (0, tslib_1.__importDefault)(roster);
	const sasl_1 = (0, tslib_1.__importDefault)(sasl);
	const sharing_1 = (0, tslib_1.__importDefault)(sharing);
	function core(client) {
	    client.use(features_1.default);
	    client.use(disco_1.default);
	    client.use(bind_1.default);
	    client.use(connection_1.default);
	    client.use(hostmeta_1.default);
	    client.use(sasl_1.default);
	}
	exports.core = core;
	function default_1(client) {
	    client.use(account_1.default);
	    client.use(messaging_1.default);
	    client.use(avatar_1.default);
	    client.use(command_1.default);
	    client.use(entity_1.default);
	    client.use(jingle_1.default);
	    client.use(mam_1.default);
	    client.use(muc_1.default);
	    client.use(pep_1.default);
	    client.use(pubsub_1.default);
	    client.use(roster_1.default);
	    client.use(sharing_1.default);
	}
	exports.default = default_1;
} (plugins));

var protocol = {};

var rfc3921 = {};

// ====================================================================
// RFC 3921: Extensible Messaging and Presence Protocol (XMPP): Core
// --------------------------------------------------------------------
// Source: https://tools.ietf.org/html/rfc3921
//
// Additional:
// --------------------------------------------------------------------
// draft-cridland-xmpp-session-01: Here Lies Extensible Messaging and
//      Presence Protocol (XMPP) Session Establishment
// -------------------------------------------------------------------
// Source: https://tools.ietf.org/html/draft-cridland-xmpp-session-01
// ====================================================================
Object.defineProperty(rfc3921, "__esModule", { value: true });
const jxt_1$1g = jxt;
const Namespaces_1$1g = Namespaces;
const Protocol$19 = {
    aliases: ['features.legacySession', 'iq.legacySession'],
    element: 'session',
    fields: {
        // draft-cridland-xmpp-session-01
        //
        // The <optional /> child is not yet standardized, but is
        // still widely deployed to reduce client start times.
        optional: (0, jxt_1$1g.childBoolean)(null, 'optional')
    },
    namespace: Namespaces_1$1g.NS_SESSION
};
rfc3921.default = Protocol$19;

var rfc4287 = {};

// ====================================================================
// RFC 4287: The Atom Syndication Format
// --------------------------------------------------------------------
// Source: https://tools.ietf.org/html/rfc4287
// ====================================================================
Object.defineProperty(rfc4287, "__esModule", { value: true });
const jxt_1$1f = jxt;
const Namespaces_1$1f = Namespaces;
const Protocol$18 = [
    {
        aliases: ['atomentry', ...(0, jxt_1$1f.pubsubItemContentAliases)()],
        element: 'entry',
        fields: {
            id: (0, jxt_1$1f.childText)(null, 'id'),
            published: (0, jxt_1$1f.childDate)(null, 'published'),
            updated: (0, jxt_1$1f.childDate)(null, 'updated')
        },
        namespace: Namespaces_1$1f.NS_ATOM,
        type: Namespaces_1$1f.NS_ATOM,
        typeField: 'itemType'
    },
    {
        element: 'summary',
        fields: {
            text: (0, jxt_1$1f.text)(),
            type: (0, jxt_1$1f.attribute)('type', 'text')
        },
        namespace: Namespaces_1$1f.NS_ATOM,
        path: 'atomentry.summary'
    },
    {
        element: 'title',
        fields: {
            text: (0, jxt_1$1f.text)(),
            type: (0, jxt_1$1f.attribute)('type', 'text')
        },
        namespace: Namespaces_1$1f.NS_ATOM,
        path: 'atomentry.title'
    },
    {
        aliases: [{ path: 'atomentry.links', multiple: true }],
        element: 'link',
        fields: {
            href: (0, jxt_1$1f.attribute)('href'),
            mediaType: (0, jxt_1$1f.attribute)('type'),
            rel: (0, jxt_1$1f.attribute)('rel')
        },
        namespace: Namespaces_1$1f.NS_ATOM
    },
    {
        aliases: [{ path: 'atomentry.authors', multiple: true }],
        element: 'author',
        fields: {
            name: (0, jxt_1$1f.childText)(null, 'name'),
            uri: (0, jxt_1$1f.childText)(null, 'uri'),
            email: (0, jxt_1$1f.childText)(null, 'email')
        },
        namespace: Namespaces_1$1f.NS_ATOM
    },
    {
        aliases: [{ path: 'atomentry.contributors', multiple: true }],
        element: 'contributor',
        fields: {
            name: (0, jxt_1$1f.childText)(null, 'name'),
            uri: (0, jxt_1$1f.childText)(null, 'uri'),
            email: (0, jxt_1$1f.childText)(null, 'email')
        },
        namespace: Namespaces_1$1f.NS_ATOM
    },
    {
        aliases: [{ path: 'atomentry.categories', multiple: true }],
        element: 'category',
        fields: {
            term: (0, jxt_1$1f.attribute)('term'),
            scheme: (0, jxt_1$1f.attribute)('scheme'),
            label: (0, jxt_1$1f.attribute)('label')
        },
        namespace: Namespaces_1$1f.NS_ATOM
    },
    {
        element: 'content',
        fields: {
            text: (0, jxt_1$1f.text)(),
            type: (0, jxt_1$1f.attribute)('type', 'text')
        },
        namespace: Namespaces_1$1f.NS_ATOM,
        path: 'atomentry.content'
    },
    {
        element: 'rights',
        fields: {
            text: (0, jxt_1$1f.text)(),
            type: (0, jxt_1$1f.attribute)('type', 'text')
        },
        namespace: Namespaces_1$1f.NS_ATOM,
        path: 'atomentry.rights'
    }
];
rfc4287.default = Protocol$18;

var rfc6120 = {};

// ====================================================================
// RFC 6120: Extensible Messaging and Presence Protocol (XMPP): Core
// --------------------------------------------------------------------
// Source: https://tools.ietf.org/html/rfc6120
// ====================================================================
Object.defineProperty(rfc6120, "__esModule", { value: true });
const Constants_1$a = Constants;
const jxt_1$1e = jxt;
const Namespaces_1$1e = Namespaces;
const _Stream = {
    defaultType: 'stream',
    element: 'stream',
    fields: {
        from: (0, jxt_1$1e.attribute)('from'),
        id: (0, jxt_1$1e.attribute)('id'),
        lang: (0, jxt_1$1e.languageAttribute)(),
        to: (0, jxt_1$1e.attribute)('to'),
        version: (0, jxt_1$1e.attribute)('version')
    },
    namespace: Namespaces_1$1e.NS_STREAM,
    path: 'stream',
    type: 'stream',
    typeField: 'action'
};
const _StreamFeatures = {
    element: 'features',
    namespace: Namespaces_1$1e.NS_STREAM,
    path: 'features'
};
const _StreamError = {
    element: 'error',
    fields: {
        alternateLanguageText: (0, jxt_1$1e.childAlternateLanguageText)(Namespaces_1$1e.NS_STREAMS, 'text'),
        condition: (0, jxt_1$1e.childEnum)(Namespaces_1$1e.NS_STREAMS, Object.values(Constants_1$a.StreamErrorCondition), Constants_1$a.StreamErrorCondition.UndefinedCondition),
        seeOtherHost: (0, jxt_1$1e.childText)(Namespaces_1$1e.NS_STREAMS, Constants_1$a.StreamErrorCondition.SeeOtherHost),
        text: (0, jxt_1$1e.childText)(Namespaces_1$1e.NS_STREAMS, 'text')
    },
    namespace: Namespaces_1$1e.NS_STREAM,
    path: 'streamError'
};
// --------------------------------------------------------------------
const _StanzaError = Object.values(Constants_1$a.StreamType).map(streamNS => ({
    aliases: ['stanzaError', 'message.error', 'presence.error', 'iq.error'],
    defaultType: Namespaces_1$1e.NS_CLIENT,
    element: 'error',
    fields: {
        alternateLanguageText: (0, jxt_1$1e.childAlternateLanguageText)(Namespaces_1$1e.NS_STANZAS, 'text'),
        by: (0, jxt_1$1e.JIDAttribute)('by'),
        condition: (0, jxt_1$1e.childEnum)(Namespaces_1$1e.NS_STANZAS, Object.values(Constants_1$a.StanzaErrorCondition), Constants_1$a.StanzaErrorCondition.UndefinedCondition),
        gone: (0, jxt_1$1e.childText)(Namespaces_1$1e.NS_STANZAS, Constants_1$a.StanzaErrorCondition.Gone),
        redirect: (0, jxt_1$1e.childText)(Namespaces_1$1e.NS_STANZAS, Constants_1$a.StanzaErrorCondition.Redirect),
        text: (0, jxt_1$1e.childText)(Namespaces_1$1e.NS_STANZAS, 'text'),
        type: (0, jxt_1$1e.attribute)('type')
    },
    namespace: streamNS,
    type: streamNS,
    typeField: 'streamType'
}));
// --------------------------------------------------------------------
const baseIQFields = new Set([
    'from',
    'id',
    'lang',
    'to',
    'type',
    'payloadType',
    'error',
    'streamType'
]);
const _IQ = Object.values(Constants_1$a.StreamType).map((streamNS) => ({
    childrenExportOrder: {
        error: 200000
    },
    defaultType: Namespaces_1$1e.NS_CLIENT,
    element: 'iq',
    fields: {
        from: (0, jxt_1$1e.JIDAttribute)('from'),
        id: (0, jxt_1$1e.attribute)('id'),
        lang: (0, jxt_1$1e.languageAttribute)(),
        payloadType: {
            order: -10000,
            importer(xml, context) {
                if (context.data.type !== 'get' &&
                    context.data.type !== 'set') {
                    return;
                }
                const childCount = xml.children.filter(child => typeof child !== 'string')
                    .length;
                if (childCount !== 1) {
                    return 'invalid-payload-count';
                }
                const extensions = Object.keys(context.data).filter(key => !baseIQFields.has(key));
                if (extensions.length !== 1) {
                    return 'unknown-payload';
                }
                return extensions[0];
            }
        },
        to: (0, jxt_1$1e.JIDAttribute)('to'),
        type: (0, jxt_1$1e.attribute)('type')
    },
    namespace: streamNS,
    path: 'iq',
    type: streamNS,
    typeField: 'streamType'
}));
// --------------------------------------------------------------------
const _Message = Object.values(Constants_1$a.StreamType).map(streamNS => ({
    childrenExportOrder: {
        error: 200000
    },
    defaultType: Namespaces_1$1e.NS_CLIENT,
    element: 'message',
    fields: {
        from: (0, jxt_1$1e.JIDAttribute)('from'),
        id: (0, jxt_1$1e.attribute)('id'),
        lang: (0, jxt_1$1e.languageAttribute)(),
        to: (0, jxt_1$1e.JIDAttribute)('to')
    },
    namespace: streamNS,
    path: 'message',
    type: streamNS,
    typeField: 'streamType'
}));
// --------------------------------------------------------------------
const _Presence = Object.values(Constants_1$a.StreamType).map(streamNS => ({
    childrenExportOrder: {
        error: 200000
    },
    defaultType: Namespaces_1$1e.NS_CLIENT,
    element: 'presence',
    fields: {
        from: (0, jxt_1$1e.JIDAttribute)('from'),
        id: (0, jxt_1$1e.attribute)('id'),
        lang: (0, jxt_1$1e.languageAttribute)(),
        to: (0, jxt_1$1e.JIDAttribute)('to')
    },
    namespace: streamNS,
    path: 'presence',
    type: streamNS,
    typeField: 'streamType'
}));
// --------------------------------------------------------------------
const _SASL = [
    {
        element: 'mechanisms',
        fields: {
            mechanisms: (0, jxt_1$1e.multipleChildText)(null, 'mechanism')
        },
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'features.sasl'
    },
    {
        element: 'abort',
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'sasl',
        type: 'abort',
        typeField: 'type'
    },
    {
        element: 'auth',
        fields: {
            mechanism: (0, jxt_1$1e.attribute)('mechanism'),
            value: (0, jxt_1$1e.textBuffer)('base64')
        },
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'sasl',
        type: 'auth',
        typeField: 'type'
    },
    {
        element: 'challenge',
        fields: {
            value: (0, jxt_1$1e.textBuffer)('base64')
        },
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'sasl',
        type: 'challenge',
        typeField: 'type'
    },
    {
        element: 'response',
        fields: {
            value: (0, jxt_1$1e.textBuffer)('base64')
        },
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'sasl',
        type: 'response',
        typeField: 'type'
    },
    {
        element: 'success',
        fields: {
            value: (0, jxt_1$1e.textBuffer)('base64')
        },
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'sasl',
        type: 'success',
        typeField: 'type'
    },
    {
        element: 'failure',
        fields: {
            alternateLanguageText: (0, jxt_1$1e.childAlternateLanguageText)(Namespaces_1$1e.NS_SASL, 'text'),
            condition: (0, jxt_1$1e.childEnum)(Namespaces_1$1e.NS_SASL, Object.values(Constants_1$a.SASLFailureCondition)),
            text: (0, jxt_1$1e.childText)(Namespaces_1$1e.NS_SASL, 'text')
        },
        namespace: Namespaces_1$1e.NS_SASL,
        path: 'sasl',
        type: 'failure',
        typeField: 'type'
    }
];
// --------------------------------------------------------------------
const _STARTTLS = [
    {
        aliases: ['features.tls'],
        defaultType: 'start',
        element: 'starttls',
        fields: {
            required: (0, jxt_1$1e.childBoolean)(null, 'required')
        },
        namespace: Namespaces_1$1e.NS_STARTTLS,
        path: 'tls',
        type: 'start',
        typeField: 'type'
    },
    {
        element: 'proceed',
        namespace: Namespaces_1$1e.NS_STARTTLS,
        path: 'tls',
        type: 'proceed',
        typeField: 'type'
    },
    {
        element: 'failure',
        namespace: Namespaces_1$1e.NS_STARTTLS,
        path: 'tls',
        type: 'failure',
        typeField: 'type'
    }
];
// --------------------------------------------------------------------
const _Bind = {
    aliases: ['features.bind', 'iq.bind'],
    element: 'bind',
    fields: {
        jid: (0, jxt_1$1e.childText)(null, 'jid'),
        resource: (0, jxt_1$1e.childText)(null, 'resource')
    },
    namespace: Namespaces_1$1e.NS_BIND
};
// --------------------------------------------------------------------
const Protocol$17 = [
    _Stream,
    _StreamFeatures,
    _StreamError,
    ..._StanzaError,
    ..._SASL,
    ..._STARTTLS,
    ..._IQ,
    ..._Message,
    ..._Presence,
    _Bind
];
rfc6120.default = Protocol$17;

var rfc6121 = {};

// ====================================================================
// RFC 6121: Extensible Messaging and Presence Protocol (XMPP):
//      Instant Messaging and Presence
// --------------------------------------------------------------------
// Source: https://tools.ietf.org/html/rfc6121
// ====================================================================
Object.defineProperty(rfc6121, "__esModule", { value: true });
const jxt_1$1d = jxt;
const Namespaces_1$1d = Namespaces;
const Protocol$16 = [
    (0, jxt_1$1d.extendStreamFeatures)({
        rosterPreApproval: (0, jxt_1$1d.childBoolean)(Namespaces_1$1d.NS_SUBSCRIPTION_PREAPPROVAL, 'sub'),
        rosterVersioning: (0, jxt_1$1d.childBoolean)(Namespaces_1$1d.NS_ROSTER_VERSIONING, 'ver')
    }),
    (0, jxt_1$1d.extendMessage)({
        alternateLanguageBodies: (0, jxt_1$1d.childAlternateLanguageText)(null, 'body'),
        alternateLanguageSubjects: (0, jxt_1$1d.childAlternateLanguageText)(null, 'subject'),
        body: (0, jxt_1$1d.childText)(null, 'body'),
        hasSubject: (0, jxt_1$1d.childBoolean)(null, 'subject'),
        parentThread: (0, jxt_1$1d.childAttribute)(null, 'thread', 'parent'),
        subject: (0, jxt_1$1d.childText)(null, 'subject'),
        thread: (0, jxt_1$1d.childText)(null, 'thread'),
        type: (0, jxt_1$1d.attribute)('type')
    }),
    (0, jxt_1$1d.extendPresence)({
        alternateLanguageStatuses: (0, jxt_1$1d.childAlternateLanguageText)(null, 'status'),
        priority: (0, jxt_1$1d.childInteger)(null, 'priority', 0),
        show: (0, jxt_1$1d.childText)(null, 'show'),
        status: (0, jxt_1$1d.childText)(null, 'status'),
        type: (0, jxt_1$1d.attribute)('type')
    }),
    {
        element: 'query',
        fields: {
            version: (0, jxt_1$1d.attribute)('ver', undefined, { emitEmpty: true })
        },
        namespace: Namespaces_1$1d.NS_ROSTER,
        path: 'iq.roster'
    },
    {
        aliases: [{ path: 'iq.roster.items', multiple: true }],
        element: 'item',
        fields: {
            groups: (0, jxt_1$1d.multipleChildText)(null, 'group'),
            jid: (0, jxt_1$1d.JIDAttribute)('jid'),
            name: (0, jxt_1$1d.attribute)('name'),
            pending: (0, jxt_1$1d.attribute)('ask'),
            preApproved: (0, jxt_1$1d.booleanAttribute)('approved'),
            subscription: (0, jxt_1$1d.attribute)('subscription')
        },
        namespace: Namespaces_1$1d.NS_ROSTER
    }
];
rfc6121.default = Protocol$16;

var rfc7395 = {};

// ====================================================================
// RFC 7395: An Extensible Messaging and Presence Protocol (XMPP)
//      Subprotocol for WebSocket
// --------------------------------------------------------------------
// Source: https://tools.ietf.org/html/rfc7395
// ====================================================================
Object.defineProperty(rfc7395, "__esModule", { value: true });
const jxt_1$1c = jxt;
const Namespaces_1$1c = Namespaces;
const Protocol$15 = [
    {
        element: 'open',
        fields: {
            from: (0, jxt_1$1c.attribute)('from'),
            id: (0, jxt_1$1c.attribute)('id'),
            lang: (0, jxt_1$1c.languageAttribute)(),
            to: (0, jxt_1$1c.attribute)('to'),
            version: (0, jxt_1$1c.attribute)('version')
        },
        namespace: Namespaces_1$1c.NS_FRAMING,
        path: 'stream',
        type: 'open'
    },
    {
        element: 'close',
        fields: {
            seeOtherURI: (0, jxt_1$1c.attribute)('see-other-uri')
        },
        namespace: Namespaces_1$1c.NS_FRAMING,
        path: 'stream',
        type: 'close'
    }
];
rfc7395.default = Protocol$15;

var xep0004 = {};

// ====================================================================
// XEP-0004: Data Forms
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0004.html
// Version: 2.9 (2007-08-13)
//
// Additional:
// --------------------------------------------------------------------
// XEP-0122: Data Forms Validation
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0122.html
// Version: 1.0.1 (2018-03-05)
// ====================================================================
Object.defineProperty(xep0004, "__esModule", { value: true });
const Constants_1$9 = Constants;
const jxt_1$1b = jxt;
const Namespaces_1$1b = Namespaces;
const Protocol$14 = [
    {
        aliases: [{ path: 'message.forms', multiple: true }],
        element: 'x',
        fields: {
            instructions: {
                ...(0, jxt_1$1b.multipleChildText)(null, 'instructions'),
                exportOrder: 2
            },
            reported: {
                ...(0, jxt_1$1b.splicePath)(null, 'reported', 'dataformField', true),
                exportOrder: 3
            },
            title: {
                ...(0, jxt_1$1b.childText)(null, 'title'),
                exportOrder: 1
            },
            type: (0, jxt_1$1b.attribute)('type')
        },
        namespace: Namespaces_1$1b.NS_DATAFORM,
        optionalNamespaces: {
            xdv: Namespaces_1$1b.NS_DATAFORM_VALIDATION
        },
        path: 'dataform'
    },
    {
        aliases: [
            { path: 'dataform.fields', multiple: true },
            { path: 'dataform.items.fields', multiple: true }
        ],
        element: 'field',
        fields: {
            description: (0, jxt_1$1b.childText)(null, 'desc'),
            label: (0, jxt_1$1b.attribute)('label'),
            name: (0, jxt_1$1b.attribute)('var'),
            rawValues: {
                ...(0, jxt_1$1b.multipleChildText)(null, 'value'),
                exporter: () => null
            },
            required: (0, jxt_1$1b.childBoolean)(null, 'required'),
            type: (0, jxt_1$1b.attribute)('type'),
            value: {
                importer(xml, context) {
                    const fieldType = xml.getAttribute('type');
                    const converter = (0, jxt_1$1b.multipleChildText)(Namespaces_1$1b.NS_DATAFORM, 'value');
                    const rawValues = converter.importer(xml, context);
                    const singleValue = rawValues[0];
                    switch (fieldType) {
                        case Constants_1$9.DataFormFieldType.TextMultiple:
                        case Constants_1$9.DataFormFieldType.ListMultiple:
                        case Constants_1$9.DataFormFieldType.JIDMultiple:
                            return rawValues;
                        case Constants_1$9.DataFormFieldType.Hidden:
                        case Constants_1$9.DataFormFieldType.Fixed:
                            if (rawValues.length === 1) {
                                return singleValue;
                            }
                            return rawValues;
                        case Constants_1$9.DataFormFieldType.Boolean:
                            if (singleValue) {
                                return singleValue === '1' || singleValue === 'true';
                            }
                            break;
                        default:
                            return singleValue;
                    }
                },
                exporter(xml, data, context) {
                    const converter = (0, jxt_1$1b.multipleChildText)(null, 'value');
                    let outputData = [];
                    const rawData = context.data && context.data.rawValues
                        ? context.data.rawValues[0]
                        : undefined;
                    if (typeof data === 'boolean') {
                        if (rawData === 'true' || rawData === 'false') {
                            outputData = [rawData];
                        }
                        else {
                            outputData = [data ? '1' : '0'];
                        }
                    }
                    else if (!Array.isArray(data)) {
                        outputData = [data.toString()];
                    }
                    else {
                        for (const value of data) {
                            outputData.push(value.toString());
                        }
                    }
                    converter.exporter(xml, outputData, Object.assign({}, context, {
                        namespace: Namespaces_1$1b.NS_DATAFORM
                    }));
                }
            }
        },
        namespace: Namespaces_1$1b.NS_DATAFORM,
        path: 'dataformField'
    },
    {
        aliases: [{ path: 'dataform.fields.options', multiple: true }],
        element: 'option',
        fields: {
            label: (0, jxt_1$1b.attribute)('label'),
            value: (0, jxt_1$1b.childText)(null, 'value')
        },
        namespace: Namespaces_1$1b.NS_DATAFORM
    },
    {
        aliases: [{ path: 'dataform.items', multiple: true }],
        element: 'item',
        namespace: Namespaces_1$1b.NS_DATAFORM
    },
    // ----------------------------------------------------------------
    // XEP-0122: Data Forms Validation
    // ----------------------------------------------------------------
    {
        element: 'validate',
        fields: {
            listMax: (0, jxt_1$1b.childIntegerAttribute)(null, 'list-range', 'max'),
            listMin: (0, jxt_1$1b.childIntegerAttribute)(null, 'list-range', 'min'),
            method: (0, jxt_1$1b.childEnum)(null, ['basic', 'open', 'range', 'regex'], 'basic'),
            rangeMax: (0, jxt_1$1b.childAttribute)(null, 'range', 'max'),
            rangeMin: (0, jxt_1$1b.childAttribute)(null, 'range', 'min'),
            regex: (0, jxt_1$1b.childText)(null, 'regex'),
            type: (0, jxt_1$1b.attribute)('datatype', 'xs:string')
        },
        namespace: Namespaces_1$1b.NS_DATAFORM_VALIDATION,
        path: 'dataform.fields.validation'
    }
];
xep0004.default = Protocol$14;

var xep0012 = {};

// ====================================================================
// XEP-0012: Last Activity
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0012.html
// Version: 2.0 (2008-11-26)
//
// Additional:
// --------------------------------------------------------------------
// XEP-0256: Last Activity in Presence
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0256.html
// Version: 1.1 (2009-09-15)
// ====================================================================
Object.defineProperty(xep0012, "__esModule", { value: true });
const jxt_1$1a = jxt;
const Namespaces_1$1a = Namespaces;
const Protocol$13 = [
    {
        aliases: ['presence.legacyLastActivity', 'iq.lastActivity'],
        element: 'query',
        fields: {
            seconds: (0, jxt_1$1a.integerAttribute)('seconds'),
            status: (0, jxt_1$1a.text)()
        },
        namespace: Namespaces_1$1a.NS_LAST_ACTIVITY
    }
];
xep0012.default = Protocol$13;

var xep0016 = {};

// ====================================================================
// XEP-0016: Privacy Lists
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0016.html
// Version: 1.7 (2007-08-13)
// ====================================================================
Object.defineProperty(xep0016, "__esModule", { value: true });
const jxt_1$19 = jxt;
const Namespaces_1$19 = Namespaces;
const Protocol$12 = [
    {
        element: 'query',
        fields: {
            activeList: (0, jxt_1$19.childAttribute)(null, 'active', 'name'),
            defaultList: (0, jxt_1$19.childAttribute)(null, 'default', 'name')
        },
        namespace: Namespaces_1$19.NS_PRIVACY,
        path: 'iq.privacy'
    },
    {
        aliases: [{ path: 'iq.privacy.lists', multiple: true }],
        element: 'list',
        fields: {
            name: (0, jxt_1$19.attribute)('name')
        },
        namespace: Namespaces_1$19.NS_PRIVACY
    },
    {
        aliases: [{ path: 'iq.privacy.lists.items', multiple: true }],
        element: 'item',
        fields: {
            action: (0, jxt_1$19.attribute)('action'),
            incomingPresence: (0, jxt_1$19.childBoolean)(null, 'presence-in'),
            iq: (0, jxt_1$19.childBoolean)(null, 'iq'),
            messages: (0, jxt_1$19.childBoolean)(null, 'message'),
            order: (0, jxt_1$19.integerAttribute)('order'),
            outgoingPresence: (0, jxt_1$19.childBoolean)(null, 'presence-out'),
            type: (0, jxt_1$19.attribute)('type'),
            value: (0, jxt_1$19.attribute)('value')
        },
        namespace: Namespaces_1$19.NS_PRIVACY
    }
];
xep0016.default = Protocol$12;

var xep0030 = {};

// ====================================================================
// XEP-0030: Service Discovery
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0030.html
// Version: 2.5rc3 (2017-10-03)
//
// Additional:
// --------------------------------------------------------------------
// XEP-0128: Service Discovery Extensions
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0128.html
// Version: 1.0 (2004-10-20)
// ====================================================================
Object.defineProperty(xep0030, "__esModule", { value: true });
const jxt_1$18 = jxt;
const Namespaces_1$18 = Namespaces;
const Protocol$11 = [
    {
        aliases: ['iq.disco', 'message.disco', 'features.disco'],
        childrenExportOrder: {
            identities: 1,
            features: 2,
            extensions: 3
        },
        element: 'query',
        fields: {
            features: (0, jxt_1$18.multipleChildAttribute)(null, 'feature', 'var'),
            node: (0, jxt_1$18.attribute)('node')
        },
        namespace: Namespaces_1$18.NS_DISCO_INFO,
        path: 'disco',
        type: 'info',
        typeField: 'type'
    },
    {
        aliases: [{ path: 'disco.identities', selector: 'info', multiple: true }],
        element: 'identity',
        fields: {
            category: (0, jxt_1$18.attribute)('category'),
            lang: (0, jxt_1$18.languageAttribute)(),
            name: (0, jxt_1$18.attribute)('name'),
            type: (0, jxt_1$18.attribute)('type')
        },
        namespace: Namespaces_1$18.NS_DISCO_INFO
    },
    {
        aliases: [{ path: 'disco.items', multiple: true, selector: 'items' }],
        element: 'item',
        fields: {
            jid: (0, jxt_1$18.JIDAttribute)('jid'),
            name: (0, jxt_1$18.attribute)('name'),
            node: (0, jxt_1$18.attribute)('node')
        },
        namespace: Namespaces_1$18.NS_DISCO_ITEMS
    },
    {
        aliases: [{ path: 'disco.items', multiple: true, selector: 'info' }],
        element: 'item',
        fields: {
            category: (0, jxt_1$18.JIDAttribute)('category'),
            lang: (0, jxt_1$18.languageAttribute)(),
            name: (0, jxt_1$18.attribute)('name'),
            type: (0, jxt_1$18.attribute)('type')
        },
        namespace: Namespaces_1$18.NS_DISCO_INFO
    },
    (0, jxt_1$18.addAlias)(Namespaces_1$18.NS_DATAFORM, 'x', [
        // XEP-0128
        { path: 'disco.extensions', multiple: true, selector: 'info' }
    ]),
    (0, jxt_1$18.addAlias)(Namespaces_1$18.NS_RSM, 'set', [{ path: 'disco.paging', selector: 'items' }]),
    {
        aliases: ['iq.disco', 'message.disco', 'features.disco'],
        element: 'query',
        fields: {
            node: (0, jxt_1$18.attribute)('node')
        },
        namespace: Namespaces_1$18.NS_DISCO_ITEMS,
        path: 'disco',
        type: 'items',
        typeField: 'type'
    }
];
xep0030.default = Protocol$11;

var xep0033 = {};

// ====================================================================
// XEP-0033: Extended Stanza Addressing
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0033.html
// Version:	1.2.1 (2017-01-11)
// --------------------------------------------------------------------
Object.defineProperty(xep0033, "__esModule", { value: true });
const jxt_1$17 = jxt;
const Namespaces_1$17 = Namespaces;
const Protocol$10 = [
    (0, jxt_1$17.extendMessage)({
        addresses: (0, jxt_1$17.splicePath)(Namespaces_1$17.NS_ADDRESS, 'addresses', 'extendedAddress', true)
    }),
    (0, jxt_1$17.extendPresence)({
        addresses: (0, jxt_1$17.splicePath)(Namespaces_1$17.NS_ADDRESS, 'addresses', 'extendedAddress', true)
    }),
    {
        element: 'address',
        fields: {
            alternateLanguageDescriptions: (0, jxt_1$17.childAlternateLanguageText)(null, 'desc'),
            delivered: (0, jxt_1$17.booleanAttribute)('delivered'),
            description: (0, jxt_1$17.attribute)('desc'),
            jid: (0, jxt_1$17.JIDAttribute)('jid'),
            node: (0, jxt_1$17.attribute)('node'),
            type: (0, jxt_1$17.attribute)('type'),
            uri: (0, jxt_1$17.attribute)('uri')
        },
        namespace: Namespaces_1$17.NS_ADDRESS,
        path: 'extendedAddress'
    }
];
xep0033.default = Protocol$10;

var xep0045 = {};

// ====================================================================
// XEP-0045: Multi-User Chat
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0045.html
// Version: 1.31.1 (2018-03-12)
//
// Additional:
// --------------------------------------------------------------------
// XEP-0249: Direct MUC Invitations
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0249.html
// Version: 1.2 (2011-09-22)
//
// --------------------------------------------------------------------
// XEP-0307: Unique Room Names for Multi-User Chat
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0307.html
// Version: 0.1 (2011-11-10)
// ====================================================================
Object.defineProperty(xep0045, "__esModule", { value: true });
const jxt_1$16 = jxt;
const Namespaces_1$16 = Namespaces;
const Protocol$$ = [
    (0, jxt_1$16.addAlias)(Namespaces_1$16.NS_DATAFORM, 'x', [{ path: 'iq.muc.form', selector: 'configure' }]),
    {
        defaultType: 'info',
        element: 'x',
        fields: {
            password: (0, jxt_1$16.childText)(null, 'password')
        },
        namespace: Namespaces_1$16.NS_MUC,
        path: 'presence.muc',
        type: 'join',
        typeField: 'type'
    },
    {
        aliases: [{ path: 'presence.muc.history', selector: 'join' }],
        element: 'history',
        fields: {
            maxCharacters: (0, jxt_1$16.integerAttribute)('maxchars'),
            maxStanzas: (0, jxt_1$16.integerAttribute)('maxstanzas'),
            seconds: (0, jxt_1$16.integerAttribute)('seconds'),
            since: (0, jxt_1$16.dateAttribute)('since')
        },
        namespace: Namespaces_1$16.NS_MUC
    },
    {
        aliases: ['presence.muc', 'message.muc'],
        defaultType: 'info',
        element: 'x',
        fields: {
            action: (0, jxt_1$16.childEnum)(null, ['invite', 'decline', 'destroy']),
            actor: (0, jxt_1$16.splicePath)(null, 'item', 'mucactor'),
            affiliation: (0, jxt_1$16.childAttribute)(null, 'item', 'affiliation'),
            jid: (0, jxt_1$16.childJIDAttribute)(null, 'item', 'jid'),
            nick: (0, jxt_1$16.childAttribute)(null, 'item', 'nick'),
            password: (0, jxt_1$16.childText)(null, 'password'),
            reason: (0, jxt_1$16.deepChildText)([
                { namespace: null, element: 'item' },
                { namespace: null, element: 'reason' }
            ]),
            role: (0, jxt_1$16.childAttribute)(null, 'item', 'role'),
            statusCodes: (0, jxt_1$16.multipleChildAttribute)(null, 'status', 'code')
        },
        namespace: Namespaces_1$16.NS_MUC_USER,
        type: 'info',
        typeField: 'type',
        typeOrder: 1
    },
    {
        element: 'actor',
        fields: {
            jid: (0, jxt_1$16.JIDAttribute)('jid'),
            nick: (0, jxt_1$16.attribute)('nick')
        },
        namespace: Namespaces_1$16.NS_MUC_USER,
        path: 'mucactor'
    },
    {
        element: 'destroy',
        fields: {
            jid: (0, jxt_1$16.JIDAttribute)('jid'),
            password: (0, jxt_1$16.childText)(null, 'password'),
            reason: (0, jxt_1$16.childText)(null, 'reason')
        },
        namespace: Namespaces_1$16.NS_MUC_USER,
        path: 'presence.muc.destroy'
    },
    {
        aliases: [{ path: 'message.muc.invite', multiple: true }],
        element: 'invite',
        fields: {
            continue: (0, jxt_1$16.childBoolean)(null, 'continue'),
            from: (0, jxt_1$16.JIDAttribute)('from'),
            reason: (0, jxt_1$16.childText)(null, 'reason'),
            thread: (0, jxt_1$16.childAttribute)(null, 'continue', 'thread'),
            to: (0, jxt_1$16.JIDAttribute)('to')
        },
        namespace: Namespaces_1$16.NS_MUC_USER
    },
    {
        element: 'decline',
        fields: {
            from: (0, jxt_1$16.JIDAttribute)('from'),
            reason: (0, jxt_1$16.childText)(null, 'reason'),
            to: (0, jxt_1$16.JIDAttribute)('to')
        },
        namespace: Namespaces_1$16.NS_MUC_USER,
        path: 'message.muc',
        type: 'decline'
    },
    {
        element: 'query',
        namespace: Namespaces_1$16.NS_MUC_ADMIN,
        path: 'iq.muc',
        type: 'user-list',
        typeField: 'type'
    },
    {
        aliases: [{ path: 'iq.muc.users', multiple: true, selector: 'user-list' }],
        element: 'item',
        fields: {
            affiliation: (0, jxt_1$16.attribute)('affiliation'),
            jid: (0, jxt_1$16.JIDAttribute)('jid'),
            nick: (0, jxt_1$16.attribute)('nick'),
            reason: (0, jxt_1$16.childText)(null, 'reason'),
            role: (0, jxt_1$16.attribute)('role')
        },
        namespace: Namespaces_1$16.NS_MUC_ADMIN
    },
    {
        aliases: ['iq.muc.users.actor'],
        element: 'actor',
        fields: {
            jid: (0, jxt_1$16.JIDAttribute)('jid'),
            nick: (0, jxt_1$16.attribute)('nick')
        },
        namespace: Namespaces_1$16.NS_MUC_ADMIN
    },
    {
        element: 'query',
        namespace: Namespaces_1$16.NS_MUC_OWNER,
        path: 'iq.muc',
        type: 'configure',
        typeField: 'type'
    },
    {
        aliases: [{ path: 'iq.muc.destroy', selector: 'configure' }],
        element: 'destroy',
        fields: {
            jid: (0, jxt_1$16.JIDAttribute)('jid'),
            password: (0, jxt_1$16.childText)(null, 'password'),
            reason: (0, jxt_1$16.childText)(null, 'reason')
        },
        namespace: Namespaces_1$16.NS_MUC_OWNER
    },
    // XEP-0249
    {
        element: 'x',
        fields: {
            action: (0, jxt_1$16.staticValue)('invite'),
            continue: (0, jxt_1$16.booleanAttribute)('continue'),
            jid: (0, jxt_1$16.JIDAttribute)('jid'),
            legacyReason: (0, jxt_1$16.text)(),
            password: (0, jxt_1$16.attribute)('password'),
            reason: (0, jxt_1$16.attribute)('reason'),
            thread: (0, jxt_1$16.attribute)('thread')
        },
        namespace: Namespaces_1$16.NS_MUC_DIRECT_INVITE,
        path: 'message.muc',
        type: 'direct-invite',
        typeOrder: 2
    },
    // XEP-0307
    {
        element: 'unique',
        fields: {
            name: (0, jxt_1$16.text)()
        },
        namespace: Namespaces_1$16.NS_MUC_UNIQUE,
        path: 'iq.muc',
        type: 'unique'
    },
    (0, jxt_1$16.extendMessage)({
        legacyMUC: {
            exporter(xml, value, context) {
                const out = context.registry
                    ? context.registry.export('message.muc', { ...value, type: 'direct-invite' })
                    : undefined;
                if (out) {
                    xml.appendChild(out);
                }
            },
            exportOrder: 100001,
            importer(xml, context) {
                const mucElement = (0, jxt_1$16.findAll)(xml, Namespaces_1$16.NS_MUC_USER, 'x')[0];
                if (!mucElement) {
                    return;
                }
                const confElement = (0, jxt_1$16.findAll)(xml, Namespaces_1$16.NS_MUC_DIRECT_INVITE, 'x')[0];
                if (!confElement) {
                    return;
                }
                return context.registry
                    ? context.registry.import(confElement, {
                        ...context,
                        path: 'message'
                    })
                    : undefined;
            },
            importOrder: -1
        }
    })
];
xep0045.default = Protocol$$;

var xep0047 = {};

// ====================================================================
// XEP-0047: In-band Bytestreams
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0047.html
// Version: 2.0 (2012-06-22)
// ====================================================================
Object.defineProperty(xep0047, "__esModule", { value: true });
const jxt_1$15 = jxt;
const Namespaces_1$15 = Namespaces;
const Protocol$_ = [
    {
        aliases: ['iq.ibb', 'message.ibb'],
        element: 'open',
        fields: {
            ack: {
                importer(xml, context) {
                    const stanza = (0, jxt_1$15.attribute)('stanza', 'iq').importer(xml, context);
                    return stanza !== 'message';
                },
                exporter(xml, data, context) {
                    (0, jxt_1$15.attribute)('stanza').exporter(xml, data ? 'iq' : 'message', context);
                }
            },
            blockSize: (0, jxt_1$15.integerAttribute)('block-size'),
            sid: (0, jxt_1$15.attribute)('sid')
        },
        namespace: Namespaces_1$15.NS_IBB,
        type: 'open',
        typeField: 'action'
    },
    {
        aliases: ['iq.ibb', 'message.ibb'],
        element: 'close',
        fields: {
            sid: (0, jxt_1$15.attribute)('sid')
        },
        namespace: Namespaces_1$15.NS_IBB,
        type: 'close',
        typeField: 'action'
    },
    {
        aliases: ['iq.ibb', 'message.ibb'],
        element: 'data',
        fields: {
            data: (0, jxt_1$15.textBuffer)('base64'),
            seq: (0, jxt_1$15.integerAttribute)('seq'),
            sid: (0, jxt_1$15.attribute)('sid')
        },
        namespace: Namespaces_1$15.NS_IBB,
        type: 'data',
        typeField: 'action'
    }
];
xep0047.default = Protocol$_;

var xep0048 = {};

// ====================================================================
// XEP-0048: Bookmarks
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0048.html
// Version: 1.1 (2007-11-07)
// ====================================================================
Object.defineProperty(xep0048, "__esModule", { value: true });
const jxt_1$14 = jxt;
const Namespaces_1$14 = Namespaces;
const Protocol$Z = [
    {
        aliases: [
            { path: 'bookmarkStorage', impliedType: true },
            { path: 'iq.privateStorage.bookmarks', impliedType: true },
            ...(0, jxt_1$14.pubsubItemContentAliases)()
        ],
        element: 'storage',
        namespace: Namespaces_1$14.NS_BOOKMARKS,
        type: Namespaces_1$14.NS_BOOKMARKS,
        typeField: 'itemType'
    },
    {
        aliases: [{ path: 'bookmarkStorage.rooms', multiple: true }],
        element: 'conference',
        fields: {
            autoJoin: (0, jxt_1$14.booleanAttribute)('autojoin'),
            jid: (0, jxt_1$14.JIDAttribute)('jid'),
            name: (0, jxt_1$14.attribute)('name'),
            nick: (0, jxt_1$14.childText)(null, 'nick'),
            password: (0, jxt_1$14.childText)(null, 'password')
        },
        namespace: Namespaces_1$14.NS_BOOKMARKS
    }
];
xep0048.default = Protocol$Z;

var xep0049 = {};

// ====================================================================
// XEP-0049: Private XML Storage
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0049.html
// Version: 1.2 (2004-03-01)
// ====================================================================
Object.defineProperty(xep0049, "__esModule", { value: true });
const Namespaces_1$13 = Namespaces;
// tslint:enable
const Protocol$Y = {
    element: 'query',
    namespace: Namespaces_1$13.NS_PRIVATE,
    path: 'iq.privateStorage'
};
xep0049.default = Protocol$Y;

var xep0050 = {};

// ====================================================================
// XEP-0050: Ad-Hoc Commands
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0050.html
// Version: 1.2.2 (2016-12-03)
// ====================================================================
Object.defineProperty(xep0050, "__esModule", { value: true });
const jxt_1$13 = jxt;
const Namespaces_1$12 = Namespaces;
const Protocol$X = [
    (0, jxt_1$13.addAlias)(Namespaces_1$12.NS_DATAFORM, 'x', ['iq.command.form']),
    (0, jxt_1$13.extendStanzaError)({
        commandError: (0, jxt_1$13.childEnum)(Namespaces_1$12.NS_ADHOC_COMMANDS, [
            'bad-action',
            'bad-locale',
            'bad-payload',
            'bad-sessionid',
            'malformed-action',
            'session-expired'
        ])
    }),
    {
        element: 'command',
        fields: {
            action: (0, jxt_1$13.attribute)('action'),
            node: (0, jxt_1$13.attribute)('node'),
            sid: (0, jxt_1$13.attribute)('sessionid'),
            status: (0, jxt_1$13.attribute)('status')
        },
        namespace: Namespaces_1$12.NS_ADHOC_COMMANDS,
        path: 'iq.command'
    },
    {
        element: 'actions',
        fields: {
            complete: (0, jxt_1$13.childBoolean)(null, 'complete'),
            execute: (0, jxt_1$13.attribute)('execute'),
            next: (0, jxt_1$13.childBoolean)(null, 'next'),
            prev: (0, jxt_1$13.childBoolean)(null, 'prev')
        },
        namespace: Namespaces_1$12.NS_ADHOC_COMMANDS,
        path: 'iq.command.availableActions'
    },
    {
        aliases: [{ path: 'iq.command.notes', multiple: true }],
        element: 'note',
        fields: {
            type: (0, jxt_1$13.attribute)('type'),
            value: (0, jxt_1$13.text)()
        },
        namespace: Namespaces_1$12.NS_ADHOC_COMMANDS
    }
];
xep0050.default = Protocol$X;

var xep0054 = {};

// ====================================================================
// XEP-0054: vcard-temp
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0054.html
// Version: 1.2 (2008-07-16)
// ====================================================================
Object.defineProperty(xep0054, "__esModule", { value: true });
const jxt_1$12 = jxt;
const Namespaces_1$11 = Namespaces;
const path$1 = 'vcardTemp.records';
function vcardField(element, type) {
    return {
        aliases: [{ multiple: true, path: path$1 }],
        element,
        fields: {
            value: (0, jxt_1$12.text)()
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type,
        typeField: 'type'
    };
}
const Protocol$W = [
    {
        aliases: [{ path: 'iq.vcard' }],
        defaultType: Namespaces_1$11.NS_VCARD_TEMP,
        element: 'vCard',
        fields: {
            fullName: (0, jxt_1$12.childText)(null, 'FN')
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        path: 'vcardTemp',
        type: Namespaces_1$11.NS_VCARD_TEMP,
        typeField: 'format'
    },
    {
        element: 'N',
        fields: {
            additional: { ...(0, jxt_1$12.childText)(null, 'MIDDLE'), order: 3 },
            family: { ...(0, jxt_1$12.childText)(null, 'FAMILY'), order: 1 },
            given: { ...(0, jxt_1$12.childText)(null, 'GIVEN'), order: 2 },
            prefix: { ...(0, jxt_1$12.childText)(null, 'PREFIX'), order: 4 },
            suffix: { ...(0, jxt_1$12.childText)(null, 'SUFFIX'), order: 5 }
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        path: 'vcardTemp.name'
    },
    vcardField('NICKNAME', 'nickname'),
    vcardField('BDAY', 'birthday'),
    vcardField('JABBERID', 'jid'),
    vcardField('TZ', 'timezone'),
    vcardField('TITLE', 'title'),
    vcardField('ROLE', 'role'),
    vcardField('URL', 'url'),
    vcardField('NOTE', 'note'),
    vcardField('SORT-STRING', 'sort'),
    vcardField('UID', 'uid'),
    vcardField('REV', 'revision'),
    vcardField('PRODID', 'productId'),
    vcardField('DESC', 'description'),
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'EMAIL',
        fields: {
            preferred: (0, jxt_1$12.childBoolean)(null, 'PREF'),
            types: (0, jxt_1$12.multipleChildEnum)(null, [
                ['home', 'HOME'],
                ['work', 'WORK'],
                ['internet', 'INTERNET']
            ]),
            value: (0, jxt_1$12.childText)(null, 'USERID')
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'email'
    },
    {
        aliases: [{ path: path$1, multiple: true }],
        element: 'ORG',
        fields: {
            units: { ...(0, jxt_1$12.multipleChildText)(null, 'ORGUNIT'), order: 2 },
            value: { ...(0, jxt_1$12.childText)(null, 'ORGNAME'), order: 1 }
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'organization',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'ADR',
        fields: {
            city: (0, jxt_1$12.childText)(null, 'LOCALITY'),
            code: (0, jxt_1$12.childText)(null, 'PCODE'),
            country: (0, jxt_1$12.childText)(null, 'CTRY'),
            pobox: (0, jxt_1$12.childText)(null, 'POBOX'),
            preferred: (0, jxt_1$12.childBoolean)(null, 'PREF'),
            region: (0, jxt_1$12.childText)(null, 'REGION'),
            street: (0, jxt_1$12.childText)(null, 'STREET'),
            street2: (0, jxt_1$12.childText)(null, 'EXTADD'),
            types: (0, jxt_1$12.multipleChildEnum)(null, [
                ['home', 'HOME'],
                ['work', 'WORK'],
                ['domestic', 'DOM'],
                ['international', 'INTL'],
                ['postal', 'POSTAL'],
                ['parcel', 'PARCEL']
            ])
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'address',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'LABEL',
        fields: {
            lines: (0, jxt_1$12.multipleChildText)(null, 'LINE'),
            preferred: (0, jxt_1$12.childBoolean)(null, 'PREF'),
            types: (0, jxt_1$12.multipleChildEnum)(null, [
                ['home', 'HOME'],
                ['work', 'WORK']
            ])
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'addressLabel',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'TEL',
        fields: {
            preferred: (0, jxt_1$12.childBoolean)(null, 'PREF'),
            types: (0, jxt_1$12.multipleChildEnum)(null, [
                ['home', 'HOME'],
                ['work', 'WORK'],
                ['cell', 'CELL'],
                ['fax', 'FAX'],
                ['voice', 'VOICE'],
                ['msg', 'MSG']
            ]),
            value: (0, jxt_1$12.childText)(null, 'NUMBER', '', true)
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'tel',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'PHOTO',
        fields: {
            data: (0, jxt_1$12.childText)(null, 'BINVAL'),
            mediaType: (0, jxt_1$12.childText)(null, 'TYPE'),
            url: (0, jxt_1$12.childText)(null, 'EXTVAL')
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'photo',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'LOGO',
        fields: {
            data: (0, jxt_1$12.childText)(null, 'BINVAL'),
            mediaType: (0, jxt_1$12.childText)(null, 'TYPE'),
            url: (0, jxt_1$12.childText)(null, 'EXTVAL')
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'logo',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: path$1 }],
        element: 'CATEGORIES',
        fields: {
            value: (0, jxt_1$12.multipleChildText)(null, 'KEYWORD')
        },
        namespace: Namespaces_1$11.NS_VCARD_TEMP,
        type: 'categories',
        typeField: 'type'
    }
];
xep0054.default = Protocol$W;

var xep0055 = {};

// ====================================================================
// XEP-0055: Jabber Search
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0055.html
// Version: 1.3 (2009-09-15)
// ====================================================================
Object.defineProperty(xep0055, "__esModule", { value: true });
const jxt_1$11 = jxt;
const Namespaces_1$10 = Namespaces;
const Protocol$V = [
    (0, jxt_1$11.addAlias)(Namespaces_1$10.NS_DATAFORM, 'x', ['iq.search.form']),
    (0, jxt_1$11.addAlias)(Namespaces_1$10.NS_RSM, 'set', ['iq.search.paging']),
    {
        element: 'query',
        fields: {
            email: (0, jxt_1$11.childText)(null, 'email'),
            familyName: (0, jxt_1$11.childText)(null, 'last'),
            givenName: (0, jxt_1$11.childText)(null, 'first'),
            instructions: (0, jxt_1$11.childText)(null, 'instructions'),
            nick: (0, jxt_1$11.childText)(null, 'nick')
        },
        namespace: Namespaces_1$10.NS_SEARCH,
        path: 'iq.search'
    },
    {
        aliases: [{ path: 'iq.search.items', multiple: true }],
        element: 'item',
        fields: {
            email: (0, jxt_1$11.childText)(null, 'email'),
            familyName: (0, jxt_1$11.childText)(null, 'last'),
            givenName: (0, jxt_1$11.childText)(null, 'first'),
            jid: (0, jxt_1$11.JIDAttribute)('jid'),
            nick: (0, jxt_1$11.childText)(null, 'nick')
        },
        namespace: Namespaces_1$10.NS_SEARCH
    }
];
xep0055.default = Protocol$V;

var xep0059 = {};

// ====================================================================
// XEP-0059: Result Set Management
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0059.html
// Version: 1.0.0 (2006-09-20)
// ====================================================================
Object.defineProperty(xep0059, "__esModule", { value: true });
const jxt_1$10 = jxt;
const Namespaces_1$$ = Namespaces;
const Protocol$U = {
    aliases: ['iq.pubsub.paging'],
    element: 'set',
    fields: {
        after: (0, jxt_1$10.childText)(null, 'after'),
        before: (0, jxt_1$10.childText)(null, 'before'),
        count: (0, jxt_1$10.childInteger)(null, 'count'),
        first: (0, jxt_1$10.childText)(null, 'first'),
        firstIndex: (0, jxt_1$10.childIntegerAttribute)(null, 'first', 'index'),
        index: (0, jxt_1$10.childInteger)(null, 'index'),
        last: (0, jxt_1$10.childText)(null, 'last'),
        max: (0, jxt_1$10.childInteger)(null, 'max')
    },
    namespace: Namespaces_1$$.NS_RSM,
    path: 'paging'
};
xep0059.default = Protocol$U;

var xep0060 = {};

// ====================================================================
// XEP-0060: Publish-Subscribe
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0060.html
// Version: 1.15.1 (2018-02-02)
// ====================================================================
Object.defineProperty(xep0060, "__esModule", { value: true });
const Constants_1$8 = Constants;
const jxt_1$$ = jxt;
const Namespaces_1$_ = Namespaces;
const dateOrPresenceAttribute = (name) => ({
    importer(xml) {
        const data = xml.getAttribute(name);
        if (data === 'presence') {
            return data;
        }
        if (data) {
            return new Date(data);
        }
    },
    exporter(xml, value) {
        let data;
        if (typeof value === 'string') {
            data = value;
        }
        else {
            data = value.toISOString();
        }
        xml.setAttribute(name, data);
    }
});
const SubscriptionFields = {
    configurable: (0, jxt_1$$.childBoolean)(null, 'subscribe-options'),
    configurationRequired: (0, jxt_1$$.deepChildBoolean)([
        { namespace: null, element: 'subscribe-options' },
        { namespace: null, element: 'required' }
    ]),
    jid: (0, jxt_1$$.JIDAttribute)('jid'),
    node: (0, jxt_1$$.attribute)('node'),
    state: (0, jxt_1$$.attribute)('subscription'),
    subid: (0, jxt_1$$.attribute)('subid')
};
const NodeOnlyField = {
    node: (0, jxt_1$$.attribute)('node')
};
const Protocol$T = [
    {
        aliases: ['pubsub', 'iq.pubsub', 'message.pubsub'],
        childrenExportOrder: {
            configure: 0,
            create: 100,
            publish: 100,
            subscribe: 100,
            subscriptionOptions: 0
        },
        defaultType: 'user',
        element: 'pubsub',
        fields: {
            publishOptions: (0, jxt_1$$.splicePath)(null, 'publish-options', 'dataform')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        type: 'user',
        typeField: 'context'
    },
    {
        aliases: ['pubsub', 'iq.pubsub', 'message.pubsub'],
        defaultType: 'user',
        element: 'pubsub',
        fields: {
            purge: (0, jxt_1$$.childAttribute)(null, 'purge', 'node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        type: 'owner',
        typeField: 'context'
    },
    (0, jxt_1$$.addAlias)(Namespaces_1$_.NS_DATAFORM, 'x', [
        'iq.pubsub.configure.form',
        'iq.pubsub.defaultConfiguration.form',
        'iq.pubsub.defaultSubscriptionOptions.form',
        'iq.pubsub.subscriptionOptions.form',
        'message.pubsub.configuration.form'
    ]),
    (0, jxt_1$$.addAlias)(Namespaces_1$_.NS_RSM, 'set', ['iq.pubsub.fetch.paging']),
    (0, jxt_1$$.extendStanzaError)({
        pubsubError: (0, jxt_1$$.childEnum)(Namespaces_1$_.NS_PUBSUB_ERRORS, Object.values(Constants_1$8.PubsubErrorCondition)),
        pubsubUnsupportedFeature: (0, jxt_1$$.childAttribute)(Namespaces_1$_.NS_PUBSUB_ERRORS, 'unsupported', 'feature')
    }),
    {
        element: 'subscribe',
        fields: {
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.subscribe'
    },
    {
        element: 'unsubscribe',
        fields: {
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node'),
            subid: (0, jxt_1$$.attribute)('subid')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.unsubscribe'
    },
    {
        element: 'options',
        fields: {
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node'),
            subid: (0, jxt_1$$.attribute)('subid')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.subscriptionOptions'
    },
    {
        aliases: [{ path: 'iq.pubsub.subscriptions', selector: 'user', impliedType: true }],
        element: 'subscriptions',
        fields: {
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        type: 'user'
    },
    {
        aliases: [{ path: 'iq.pubsub.subscriptions', selector: 'owner', impliedType: true }],
        element: 'subscriptions',
        fields: {
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        type: 'owner'
    },
    {
        aliases: [
            { path: 'iq.pubsub.subscription', selector: 'owner' },
            {
                impliedType: true,
                multiple: true,
                path: 'iq.pubsub.subscriptions.items',
                selector: 'owner'
            }
        ],
        element: 'subscription',
        fields: SubscriptionFields,
        namespace: Namespaces_1$_.NS_PUBSUB
    },
    {
        aliases: [
            { path: 'iq.pubsub.subscription', selector: 'user' },
            {
                impliedType: true,
                multiple: true,
                path: 'iq.pubsub.subscriptions.items',
                selector: 'user'
            }
        ],
        element: 'subscription',
        fields: SubscriptionFields,
        namespace: Namespaces_1$_.NS_PUBSUB,
        type: 'user'
    },
    {
        aliases: [
            {
                impliedType: true,
                multiple: true,
                path: 'iq.pubsub.subscriptions.items',
                selector: 'owner'
            }
        ],
        element: 'subscription',
        fields: SubscriptionFields,
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        type: 'owner'
    },
    {
        aliases: [
            { path: 'iq.pubsub.affiliations', selector: 'user', impliedType: true },
            { path: 'message.pubsub.affiliations', selector: 'user', impliedType: true }
        ],
        element: 'affiliations',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB,
        type: 'user'
    },
    {
        aliases: [{ path: 'iq.pubsub.affiliations', selector: 'owner', impliedType: true }],
        element: 'affiliations',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        type: 'owner'
    },
    {
        aliases: [
            {
                impliedType: true,
                multiple: true,
                path: 'iq.pubsub.affiliations.items',
                selector: 'user'
            },
            {
                impliedType: true,
                multiple: true,
                path: 'message.pubsub.affiliations.items',
                selector: 'user'
            }
        ],
        element: 'affiliation',
        fields: {
            affiliation: (0, jxt_1$$.attribute)('affiliation'),
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        type: 'user'
    },
    {
        aliases: [
            {
                impliedType: true,
                multiple: true,
                path: 'iq.pubsub.affiliations.items',
                selector: 'owner'
            }
        ],
        element: 'affiliation',
        fields: {
            affiliation: (0, jxt_1$$.attribute)('affiliation'),
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        type: 'owner'
    },
    {
        element: 'create',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.create'
    },
    {
        aliases: [{ path: 'iq.pubsub.destroy', selector: 'owner' }],
        element: 'delete',
        fields: {
            node: (0, jxt_1$$.attribute)('node'),
            redirect: (0, jxt_1$$.childAttribute)(null, 'redirect', 'uri')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER
    },
    {
        aliases: [{ path: 'iq.pubsub.configure', selector: 'owner', impliedType: true }],
        element: 'configure',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        type: 'owner'
    },
    {
        aliases: [{ path: 'iq.pubsub.configure', selector: 'user', impliedType: true }],
        element: 'configure',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB,
        type: 'user'
    },
    {
        element: 'default',
        fields: {
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.defaultSubscriptionOptions'
    },
    {
        element: 'default',
        fields: {},
        namespace: Namespaces_1$_.NS_PUBSUB_OWNER,
        path: 'iq.pubsub.defaultConfiguration'
    },
    {
        element: 'publish',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.publish'
    },
    {
        element: 'retract',
        fields: {
            id: (0, jxt_1$$.childAttribute)(null, 'item', 'id'),
            node: (0, jxt_1$$.attribute)('node'),
            notify: (0, jxt_1$$.booleanAttribute)('notify')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.retract'
    },
    {
        element: 'items',
        fields: {
            max: (0, jxt_1$$.integerAttribute)('max_items'),
            node: (0, jxt_1$$.attribute)('node')
        },
        namespace: Namespaces_1$_.NS_PUBSUB,
        path: 'iq.pubsub.fetch'
    },
    {
        aliases: [
            'pubsubitem',
            'iq.pubsub.publish.item',
            { multiple: true, path: 'iq.pubsub.fetch.items' }
        ],
        element: 'item',
        fields: {
            id: (0, jxt_1$$.attribute)('id'),
            publisher: (0, jxt_1$$.JIDAttribute)('publisher')
        },
        namespace: Namespaces_1$_.NS_PUBSUB
    },
    {
        element: 'event',
        fields: {
            eventType: (0, jxt_1$$.childEnum)(null, [
                'purge',
                'delete',
                'subscription',
                'configuration',
                'items'
            ])
        },
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        path: 'message.pubsub',
        type: 'event',
        typeField: 'context'
    },
    {
        aliases: [{ path: 'message.pubsub.items.published', multiple: true }],
        element: 'item',
        fields: {
            id: (0, jxt_1$$.attribute)('id'),
            publisher: (0, jxt_1$$.JIDAttribute)('publisher')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        path: 'pubsubeventitem'
    },
    {
        element: 'purge',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        path: 'message.pubsub.purge'
    },
    {
        element: 'delete',
        fields: {
            node: (0, jxt_1$$.attribute)('node'),
            redirect: (0, jxt_1$$.childAttribute)(null, 'redirect', 'uri')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        path: 'message.pubsub.delete'
    },
    {
        aliases: [{ path: 'message.pubsub.subscription', selector: 'event', impliedType: true }],
        element: 'subscription',
        fields: {
            expires: dateOrPresenceAttribute('expiry'),
            jid: (0, jxt_1$$.JIDAttribute)('jid'),
            node: (0, jxt_1$$.attribute)('node'),
            subid: (0, jxt_1$$.attribute)('subid'),
            type: (0, jxt_1$$.attribute)('subscription')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        type: 'event'
    },
    {
        element: 'configuration',
        fields: NodeOnlyField,
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        path: 'message.pubsub.configuration'
    },
    {
        element: 'items',
        fields: {
            node: (0, jxt_1$$.attribute)('node'),
            retracted: (0, jxt_1$$.multipleChildAttribute)(null, 'retract', 'id')
        },
        namespace: Namespaces_1$_.NS_PUBSUB_EVENT,
        path: 'message.pubsub.items'
    }
];
xep0060.default = Protocol$T;

var xep0065 = {};

// ====================================================================
// XEP-0065: SOCKS5 Bytestreams
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0065.html
// Version: 1.8.1 (2015-09-17)
// ====================================================================
Object.defineProperty(xep0065, "__esModule", { value: true });
const jxt_1$_ = jxt;
const Namespaces_1$Z = Namespaces;
const Protocol$S = [
    {
        element: 'query',
        fields: {
            activate: (0, jxt_1$_.childText)(null, 'activate'),
            address: (0, jxt_1$_.attribute)('dstaddr'),
            candidateUsed: (0, jxt_1$_.childJIDAttribute)(null, 'streamhost-used', 'jid'),
            mode: (0, jxt_1$_.attribute)('mode', 'tcp'),
            sid: (0, jxt_1$_.attribute)('sid'),
            udpSuccess: (0, jxt_1$_.childAttribute)(null, 'udpsuccess', 'dstaddr')
        },
        namespace: Namespaces_1$Z.NS_SOCKS5,
        path: 'iq.socks5'
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.socks5.candidates'
            }
        ],
        element: 'streamhost',
        fields: {
            host: (0, jxt_1$_.attribute)('host'),
            jid: (0, jxt_1$_.JIDAttribute)('jid'),
            port: (0, jxt_1$_.integerAttribute)('port'),
            uri: (0, jxt_1$_.attribute)('uri')
        },
        namespace: Namespaces_1$Z.NS_SOCKS5
    }
];
xep0065.default = Protocol$S;

var xep0066 = {};

// ====================================================================
// XEP-0066: Out of Band Data
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0066.html
// Version: 1.5 (2006-08-16)
// ====================================================================
Object.defineProperty(xep0066, "__esModule", { value: true });
const jxt_1$Z = jxt;
const Namespaces_1$Y = Namespaces;
const Protocol$R = [
    {
        aliases: [{ multiple: true, path: 'message.links' }],
        element: 'x',
        fields: {
            description: (0, jxt_1$Z.childText)(null, 'desc'),
            url: (0, jxt_1$Z.childText)(null, 'url')
        },
        namespace: Namespaces_1$Y.NS_OOB
    },
    {
        element: 'query',
        fields: {
            description: (0, jxt_1$Z.childText)(null, 'desc'),
            url: (0, jxt_1$Z.childText)(null, 'url')
        },
        namespace: Namespaces_1$Y.NS_OOB_TRANSFER,
        path: 'iq.transferLink'
    }
];
xep0066.default = Protocol$R;

var xep0071 = {};

// ====================================================================
// XEP-0071: XHTML-IM
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0071.html
// Version: 1.5.4 (2018-03-08)
// ====================================================================
Object.defineProperty(xep0071, "__esModule", { value: true });
const jxt_1$Y = jxt;
const Namespaces_1$X = Namespaces;
const Protocol$Q = {
    element: 'html',
    fields: {
        alternateLanguageBodies: (0, jxt_1$Y.childAlternateLanguageRawElement)(Namespaces_1$X.NS_XHTML, 'body', 'xhtmlim'),
        body: (0, jxt_1$Y.childLanguageRawElement)(Namespaces_1$X.NS_XHTML, 'body', 'xhtmlim')
    },
    namespace: Namespaces_1$X.NS_XHTML_IM,
    path: 'message.html'
};
xep0071.default = Protocol$Q;

var xep0077 = {};

// ====================================================================
// XEP-0077: In-Band Registration
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0077.html
// Version: 2.4 (2012-01-253)
// ====================================================================
Object.defineProperty(xep0077, "__esModule", { value: true });
const jxt_1$X = jxt;
const Namespaces_1$W = Namespaces;
const Protocol$P = [
    (0, jxt_1$X.extendStreamFeatures)({
        inbandRegistration: (0, jxt_1$X.childBoolean)(Namespaces_1$W.NS_INBAND_REGISTRATION, 'register')
    }),
    (0, jxt_1$X.addAlias)(Namespaces_1$W.NS_DATAFORM, 'x', ['iq.account.form']),
    (0, jxt_1$X.addAlias)(Namespaces_1$W.NS_OOB, 'x', ['iq.account.registrationLink']),
    {
        element: 'query',
        fields: {
            address: (0, jxt_1$X.childText)(null, 'address'),
            date: (0, jxt_1$X.childDate)(null, 'date'),
            email: (0, jxt_1$X.childText)(null, 'email'),
            familyName: (0, jxt_1$X.childText)(null, 'last'),
            fullName: (0, jxt_1$X.childText)(null, 'name'),
            givenName: (0, jxt_1$X.childText)(null, 'first'),
            instructions: (0, jxt_1$X.childText)(null, 'instructions'),
            key: (0, jxt_1$X.childText)(null, 'key'),
            locality: (0, jxt_1$X.childText)(null, 'city'),
            misc: (0, jxt_1$X.childText)(null, 'misc'),
            nick: (0, jxt_1$X.childText)(null, 'nick'),
            password: (0, jxt_1$X.childText)(null, 'password'),
            phone: (0, jxt_1$X.childText)(null, 'phone'),
            postalCode: (0, jxt_1$X.childText)(null, 'zip'),
            region: (0, jxt_1$X.childText)(null, 'state'),
            registered: (0, jxt_1$X.childBoolean)(null, 'registered'),
            remove: (0, jxt_1$X.childBoolean)(null, 'remove'),
            text: (0, jxt_1$X.childText)(null, 'text'),
            uri: (0, jxt_1$X.childText)(null, 'uri'),
            username: (0, jxt_1$X.childText)(null, 'username')
        },
        namespace: Namespaces_1$W.NS_REGISTER,
        path: 'iq.account'
    }
];
xep0077.default = Protocol$P;

var xep0080 = {};

// ====================================================================
// XEP-0080: User Location
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0080.html
// Version: 1.9 (2015-12-01)
//
// Additional:
// --------------------------------------------------------------------
// XEP-0350: Data Forms Geolocation Element
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0350.html
// Version: 0.2 (2017-09-11)
// ====================================================================
Object.defineProperty(xep0080, "__esModule", { value: true });
const jxt_1$W = jxt;
const Namespaces_1$V = Namespaces;
const Protocol$O = {
    aliases: [
        { path: 'message.geoloc', impliedType: true },
        { path: 'dataform.fields.geoloc', impliedType: true },
        ...(0, jxt_1$W.pubsubItemContentAliases)()
    ],
    element: 'geoloc',
    fields: {
        accuracy: (0, jxt_1$W.childFloat)(null, 'accuracy'),
        altitude: (0, jxt_1$W.childFloat)(null, 'alt'),
        altitudeAccuracy: (0, jxt_1$W.childFloat)(null, 'altaccuracy'),
        area: (0, jxt_1$W.childText)(null, 'area'),
        building: (0, jxt_1$W.childText)(null, 'building'),
        country: (0, jxt_1$W.childText)(null, 'country'),
        countryCode: (0, jxt_1$W.childText)(null, 'countrycode'),
        datum: (0, jxt_1$W.childText)(null, 'datum'),
        description: (0, jxt_1$W.childText)(null, 'description'),
        error: (0, jxt_1$W.childFloat)(null, 'error'),
        floor: (0, jxt_1$W.childText)(null, 'floor'),
        heading: (0, jxt_1$W.childFloat)(null, 'bearing'),
        lang: (0, jxt_1$W.languageAttribute)(),
        latitude: (0, jxt_1$W.childFloat)(null, 'lat'),
        locality: (0, jxt_1$W.childText)(null, 'locality'),
        longitude: (0, jxt_1$W.childFloat)(null, 'lon'),
        postalCode: (0, jxt_1$W.childText)(null, 'postalcode'),
        region: (0, jxt_1$W.childText)(null, 'region'),
        room: (0, jxt_1$W.childText)(null, 'room'),
        speed: (0, jxt_1$W.childFloat)(null, 'speed'),
        street: (0, jxt_1$W.childText)(null, 'street'),
        text: (0, jxt_1$W.childText)(null, 'text'),
        timestamp: (0, jxt_1$W.childDate)(null, 'timestamp'),
        tzo: (0, jxt_1$W.childTimezoneOffset)(null, 'tzo'),
        uri: (0, jxt_1$W.childText)(null, 'uri')
    },
    namespace: Namespaces_1$V.NS_GEOLOC,
    type: Namespaces_1$V.NS_GEOLOC
};
xep0080.default = Protocol$O;

var xep0084 = {};

// ====================================================================
// XEP-0084: User Avatar
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0084.html
// Version: 1.1.1 (2016-07-09)
// ====================================================================
Object.defineProperty(xep0084, "__esModule", { value: true });
const jxt_1$V = jxt;
const Namespaces_1$U = Namespaces;
const Protocol$N = [
    {
        aliases: (0, jxt_1$V.pubsubItemContentAliases)(),
        element: 'data',
        fields: {
            data: (0, jxt_1$V.textBuffer)('base64')
        },
        namespace: Namespaces_1$U.NS_AVATAR_DATA,
        path: 'avatar',
        type: Namespaces_1$U.NS_AVATAR_DATA,
        typeField: 'itemType'
    },
    {
        aliases: [{ path: 'avatar', impliedType: true }, ...(0, jxt_1$V.pubsubItemContentAliases)()],
        element: 'metadata',
        namespace: Namespaces_1$U.NS_AVATAR_METADATA,
        type: Namespaces_1$U.NS_AVATAR_METADATA,
        typeField: 'itemType',
        childrenExportOrder: {
            versions: 1,
            pointers: 2
        }
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'avatar.versions',
                selector: Namespaces_1$U.NS_AVATAR_METADATA
            }
        ],
        element: 'info',
        fields: {
            bytes: (0, jxt_1$V.integerAttribute)('bytes'),
            height: (0, jxt_1$V.integerAttribute)('height'),
            id: (0, jxt_1$V.attribute)('id'),
            mediaType: (0, jxt_1$V.attribute)('type'),
            uri: (0, jxt_1$V.attribute)('url'),
            width: (0, jxt_1$V.integerAttribute)('width')
        },
        namespace: Namespaces_1$U.NS_AVATAR_METADATA
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'avatar.pointers',
                selector: Namespaces_1$U.NS_AVATAR_METADATA
            }
        ],
        element: 'pointer',
        fields: {
            bytes: (0, jxt_1$V.integerAttribute)('bytes'),
            height: (0, jxt_1$V.integerAttribute)('height'),
            id: (0, jxt_1$V.attribute)('id'),
            mediaType: (0, jxt_1$V.attribute)('type'),
            width: (0, jxt_1$V.integerAttribute)('width')
        },
        namespace: Namespaces_1$U.NS_AVATAR_METADATA
    }
];
xep0084.default = Protocol$N;

var xep0085 = {};

// ====================================================================
// XEP-0085: Chat State Notifications
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0085.html
// Version: 2.1 (2009-09-23)
// ====================================================================
Object.defineProperty(xep0085, "__esModule", { value: true });
const Constants_1$7 = Constants;
const jxt_1$U = jxt;
const Namespaces_1$T = Namespaces;
xep0085.default = (0, jxt_1$U.extendMessage)({
    chatState: (0, jxt_1$U.childEnum)(Namespaces_1$T.NS_CHAT_STATES, Object.values(Constants_1$7.ChatState))
});

var xep0092 = {};

// ====================================================================
// XEP-0092: Software Version
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0092.html
// Version: 1.1 (2007-02-15)
// ====================================================================
Object.defineProperty(xep0092, "__esModule", { value: true });
const jxt_1$T = jxt;
const Namespaces_1$S = Namespaces;
const Protocol$M = {
    element: 'query',
    fields: {
        name: (0, jxt_1$T.childText)(null, 'name'),
        os: (0, jxt_1$T.childText)(null, 'os'),
        version: (0, jxt_1$T.childText)(null, 'version')
    },
    namespace: Namespaces_1$S.NS_VERSION,
    path: 'iq.softwareVersion'
};
xep0092.default = Protocol$M;

var xep0107 = {};

// ====================================================================
// XEP-0107: User Mood
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0107.html
// Version: 1.2.1 (2018-03-13)
// ====================================================================
Object.defineProperty(xep0107, "__esModule", { value: true });
const Constants_1$6 = Constants;
const jxt_1$S = jxt;
const Namespaces_1$R = Namespaces;
const Protocol$L = {
    aliases: [{ path: 'message.mood', impliedType: true }, ...(0, jxt_1$S.pubsubItemContentAliases)()],
    element: 'mood',
    fields: {
        alternateLanguageText: (0, jxt_1$S.childAlternateLanguageText)(null, 'text'),
        text: (0, jxt_1$S.childText)(null, 'text'),
        value: (0, jxt_1$S.childEnum)(null, Constants_1$6.USER_MOODS)
    },
    namespace: Namespaces_1$R.NS_MOOD,
    type: Namespaces_1$R.NS_MOOD
};
xep0107.default = Protocol$L;

var xep0108 = {};

// ====================================================================
// XEP-0108: User Activity
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0108.html
// Version: 1.3 (2008-10-29)
// ====================================================================
Object.defineProperty(xep0108, "__esModule", { value: true });
const Constants_1$5 = Constants;
const jxt_1$R = jxt;
const Namespaces_1$Q = Namespaces;
const Protocol$K = {
    aliases: [{ path: 'activity', impliedType: true }, ...(0, jxt_1$R.pubsubItemContentAliases)()],
    element: 'activity',
    fields: {
        activity: (0, jxt_1$R.childDoubleEnum)(null, Constants_1$5.USER_ACTIVITY_GENERAL, Constants_1$5.USER_ACTIVITY_SPECIFIC),
        alternateLanguageText: (0, jxt_1$R.childAlternateLanguageText)(null, 'text'),
        text: (0, jxt_1$R.childText)(null, 'text')
    },
    namespace: Namespaces_1$Q.NS_ACTIVITY,
    type: Namespaces_1$Q.NS_ACTIVITY
};
xep0108.default = Protocol$K;

var xep0114 = {};

// ====================================================================
// XEP-0114: Jabber Component Protocol
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0114.html
// Version: 1.6 (2012-01-25)
// ====================================================================
Object.defineProperty(xep0114, "__esModule", { value: true });
const jxt_1$Q = jxt;
const Namespaces_1$P = Namespaces;
const Protocol$J = {
    element: 'handshake',
    fields: {
        value: (0, jxt_1$Q.textBuffer)('hex')
    },
    namespace: Namespaces_1$P.NS_COMPONENT,
    path: 'handshake'
};
xep0114.default = Protocol$J;

var xep0115 = {};

// ====================================================================
// XEP-0115: Entity Capabilities
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0115.html
// Version: 1.5.1 (2016-10-06)
// ====================================================================
Object.defineProperty(xep0115, "__esModule", { value: true });
const jxt_1$P = jxt;
const Namespaces_1$O = Namespaces;
const Protocol$I = {
    aliases: [
        { path: 'presence.legacyCapabilities', multiple: true },
        { path: 'features.legacyCapabilities', multiple: true }
    ],
    element: 'c',
    fields: {
        algorithm: (0, jxt_1$P.attribute)('hash'),
        legacy: (0, jxt_1$P.staticValue)(true),
        node: (0, jxt_1$P.attribute)('node'),
        value: (0, jxt_1$P.attribute)('ver')
    },
    namespace: Namespaces_1$O.NS_DISCO_LEGACY_CAPS
};
xep0115.default = Protocol$I;

var xep0118 = {};

// ====================================================================
// XEP-0108: User Tune
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0118.html
// Version: 1.2 (2008-01-30)
// ====================================================================
Object.defineProperty(xep0118, "__esModule", { value: true });
const jxt_1$O = jxt;
const Namespaces_1$N = Namespaces;
const Protocol$H = {
    aliases: [
        {
            impliedType: true,
            path: 'tune'
        },
        ...(0, jxt_1$O.pubsubItemContentAliases)()
    ],
    element: 'tune',
    fields: {
        artist: (0, jxt_1$O.childText)(null, 'artist'),
        length: (0, jxt_1$O.childInteger)(null, 'length'),
        rating: (0, jxt_1$O.childInteger)(null, 'rating'),
        source: (0, jxt_1$O.childText)(null, 'source'),
        title: (0, jxt_1$O.childText)(null, 'title'),
        track: (0, jxt_1$O.childText)(null, 'track'),
        uri: (0, jxt_1$O.childText)(null, 'uri')
    },
    namespace: Namespaces_1$N.NS_TUNE,
    type: Namespaces_1$N.NS_TUNE
};
xep0118.default = Protocol$H;

var xep0141 = {};

// ====================================================================
// XEP-0141: Data Forms Layout
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0141.html
// Version: 1.0 (2005-05-12)
// ====================================================================
Object.defineProperty(xep0141, "__esModule", { value: true });
const jxt_1$N = jxt;
const Namespaces_1$M = Namespaces;
const aliases = [
    'dataformLayout',
    {
        multiple: true,
        path: 'dataformLayout.contents'
    },
    {
        multiple: true,
        path: 'dataform.layout.contents'
    }
];
const Protocol$G = [
    {
        aliases: [
            {
                multiple: true,
                path: 'dataform.layout'
            }
        ],
        element: 'page',
        fields: {
            label: (0, jxt_1$N.attribute)('label')
        },
        namespace: Namespaces_1$M.NS_DATAFORM_LAYOUT
    },
    {
        aliases,
        element: 'section',
        fields: {
            label: (0, jxt_1$N.attribute)('label')
        },
        namespace: Namespaces_1$M.NS_DATAFORM_LAYOUT,
        type: 'section',
        typeField: 'type'
    },
    {
        aliases,
        element: 'text',
        fields: {
            value: (0, jxt_1$N.text)()
        },
        namespace: Namespaces_1$M.NS_DATAFORM_LAYOUT,
        type: 'text',
        typeField: 'type'
    },
    {
        aliases,
        element: 'fieldref',
        fields: {
            field: (0, jxt_1$N.attribute)('var')
        },
        namespace: Namespaces_1$M.NS_DATAFORM_LAYOUT,
        type: 'fieldref',
        typeField: 'type'
    },
    {
        aliases,
        element: 'reportedref',
        namespace: Namespaces_1$M.NS_DATAFORM_LAYOUT,
        type: 'reportedref',
        typeField: 'type'
    }
];
xep0141.default = Protocol$G;

var xep0124 = {};

// ====================================================================
// XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH)
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0124.html
// Version: 1.11.1 (2016-11-16)
//
// Additional:
// --------------------------------------------------------------------
// XEP-0206: XMPP over BOSH
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0206.html
// Version: 1.4 (2014-04-09)
// ====================================================================
Object.defineProperty(xep0124, "__esModule", { value: true });
const jxt_1$M = jxt;
const Namespaces_1$L = Namespaces;
const Protocol$F = {
    element: 'body',
    fields: {
        acceptMediaTypes: (0, jxt_1$M.attribute)('accept'),
        ack: (0, jxt_1$M.integerAttribute)('ack'),
        authId: (0, jxt_1$M.attribute)('authid'),
        characterSets: (0, jxt_1$M.attribute)('charsets'),
        condition: (0, jxt_1$M.attribute)('condition'),
        from: (0, jxt_1$M.JIDAttribute)('from'),
        key: (0, jxt_1$M.attribute)('key'),
        lang: (0, jxt_1$M.languageAttribute)(),
        maxClientRequests: (0, jxt_1$M.integerAttribute)('requests'),
        maxHoldOpen: (0, jxt_1$M.integerAttribute)('hold'),
        maxInactivityTime: (0, jxt_1$M.integerAttribute)('inactivity'),
        maxSessionPause: (0, jxt_1$M.integerAttribute)('maxpause'),
        maxWaitTime: (0, jxt_1$M.integerAttribute)('wait'),
        mediaType: (0, jxt_1$M.attribute)('content'),
        minPollingInterval: (0, jxt_1$M.integerAttribute)('polling'),
        newKey: (0, jxt_1$M.attribute)('newkey'),
        pauseSession: (0, jxt_1$M.integerAttribute)('pause'),
        report: (0, jxt_1$M.integerAttribute)('report'),
        rid: (0, jxt_1$M.integerAttribute)('rid'),
        route: (0, jxt_1$M.attribute)('string'),
        seeOtherURI: (0, jxt_1$M.childText)(null, 'uri'),
        sid: (0, jxt_1$M.attribute)('sid'),
        stream: (0, jxt_1$M.attribute)('stream'),
        time: (0, jxt_1$M.integerAttribute)('time'),
        to: (0, jxt_1$M.JIDAttribute)('to'),
        type: (0, jxt_1$M.attribute)('type'),
        version: (0, jxt_1$M.attribute)('ver'),
        // XEP-0206
        xmppRestart: (0, jxt_1$M.namespacedBooleanAttribute)('xmpp', Namespaces_1$L.NS_BOSH_XMPP, 'restart', undefined, {
            writeValue: (value) => {
                return value ? 'true' : 'false';
            }
        }),
        xmppRestartLogic: (0, jxt_1$M.namespacedBooleanAttribute)('xmpp', Namespaces_1$L.NS_BOSH_XMPP, 'restartlogic', undefined, {
            writeValue: (value) => {
                return value ? 'true' : 'false';
            }
        }),
        xmppVersion: (0, jxt_1$M.namespacedAttribute)('xmpp', Namespaces_1$L.NS_BOSH_XMPP, 'version')
    },
    namespace: Namespaces_1$L.NS_BOSH,
    path: 'bosh'
};
xep0124.default = Protocol$F;

var xep0131 = {};

// ====================================================================
// XEP-0131: Stanza Headers and Internet Metadata
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0131.html
// Version: 1.2 (2006-07-12)
// ====================================================================
Object.defineProperty(xep0131, "__esModule", { value: true });
const jxt_1$L = jxt;
const Namespaces_1$K = Namespaces;
const Protocol$E = [
    (0, jxt_1$L.extendMessage)({
        headers: (0, jxt_1$L.splicePath)(Namespaces_1$K.NS_SHIM, 'headers', 'header', true)
    }),
    (0, jxt_1$L.extendPresence)({
        headers: (0, jxt_1$L.splicePath)(Namespaces_1$K.NS_SHIM, 'headers', 'header', true)
    }),
    {
        element: 'header',
        fields: {
            name: (0, jxt_1$L.attribute)('name'),
            value: (0, jxt_1$L.text)()
        },
        namespace: Namespaces_1$K.NS_SHIM,
        path: 'header'
    }
];
xep0131.default = Protocol$E;

var xep0138 = {};

// ====================================================================
// XEP-0138: Stream Compression
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0138.html
// Version: 2.0 (2009-05-27)
// ====================================================================
Object.defineProperty(xep0138, "__esModule", { value: true });
const jxt_1$K = jxt;
const Namespaces_1$J = Namespaces;
const Protocol$D = [
    {
        element: 'compression',
        fields: {
            methods: (0, jxt_1$K.multipleChildText)(null, 'method')
        },
        namespace: Namespaces_1$J.NS_COMPRESSION_FEATURE,
        path: 'features.compression'
    },
    {
        element: 'compress',
        fields: {
            method: (0, jxt_1$K.childText)(null, 'method')
        },
        namespace: Namespaces_1$J.NS_COMPRESSION,
        path: 'compression',
        type: 'start',
        typeField: 'type'
    },
    {
        aliases: ['error.compressionError'],
        element: 'failure',
        fields: {
            condition: (0, jxt_1$K.childEnum)(null, ['unsupported-method', 'setup-failed', 'processing-failed'])
        },
        namespace: Namespaces_1$J.NS_COMPRESSION,
        path: 'compression',
        type: 'failure',
        typeField: 'type'
    },
    {
        element: 'compressed',
        namespace: Namespaces_1$J.NS_COMPRESSION,
        path: 'compression',
        type: 'success',
        typeField: 'type'
    }
];
xep0138.default = Protocol$D;

var xep0144 = {};

// ====================================================================
// XEP-0144: Roster Item Exchange
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0144.html
// Version: 1.1.1 (2017-11-28)
// ====================================================================
Object.defineProperty(xep0144, "__esModule", { value: true });
const jxt_1$J = jxt;
const Namespaces_1$I = Namespaces;
const Protocol$C = [
    (0, jxt_1$J.extendMessage)({
        rosterExchange: (0, jxt_1$J.splicePath)(Namespaces_1$I.NS_ROSTER_EXCHANGE, 'x', 'rosterExchange', true)
    }),
    (0, jxt_1$J.extendIQ)({
        rosterExchange: (0, jxt_1$J.splicePath)(Namespaces_1$I.NS_ROSTER_EXCHANGE, 'x', 'rosterExchange', true)
    }),
    {
        element: 'item',
        fields: {
            action: (0, jxt_1$J.attribute)('action'),
            groups: (0, jxt_1$J.multipleChildText)(null, 'group'),
            jid: (0, jxt_1$J.JIDAttribute)('jid'),
            name: (0, jxt_1$J.attribute)('name')
        },
        namespace: Namespaces_1$I.NS_ROSTER_EXCHANGE,
        path: 'rosterExchange'
    }
];
xep0144.default = Protocol$C;

var xep0153 = {};

// ====================================================================
// XEP-0153: vCard-Based Avatars
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0153.html
// Version: 1.1 (2018-02-26)
// ====================================================================
Object.defineProperty(xep0153, "__esModule", { value: true });
const jxt_1$I = jxt;
const Namespaces_1$H = Namespaces;
xep0153.default = (0, jxt_1$I.extendPresence)({
    vcardAvatar: {
        importer(xml) {
            const update = (0, jxt_1$I.findAll)(xml, Namespaces_1$H.NS_VCARD_TEMP_UPDATE, 'x');
            if (!update.length) {
                return;
            }
            const photo = (0, jxt_1$I.findAll)(update[0], Namespaces_1$H.NS_VCARD_TEMP_UPDATE, 'photo');
            if (photo.length) {
                return photo[0].getText();
            }
            else {
                return true;
            }
        },
        exporter(xml, value) {
            const update = (0, jxt_1$I.findOrCreate)(xml, Namespaces_1$H.NS_VCARD_TEMP_UPDATE, 'x');
            if (value === '') {
                (0, jxt_1$I.findOrCreate)(update, Namespaces_1$H.NS_VCARD_TEMP_UPDATE, 'photo');
            }
            else if (value === true) {
                return;
            }
            else if (value) {
                const photo = (0, jxt_1$I.findOrCreate)(update, Namespaces_1$H.NS_VCARD_TEMP_UPDATE, 'photo');
                photo.children.push(value);
            }
        }
    }
});

var xep0158 = {};

// ====================================================================
// XEP-0158: CAPTCHA Forms
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0158.html
// Version: 1.0 (2008-09-03)
// ====================================================================
Object.defineProperty(xep0158, "__esModule", { value: true });
const jxt_1$H = jxt;
const Namespaces_1$G = Namespaces;
const Protocol$B = [
    (0, jxt_1$H.extendMessage)({
        captcha: (0, jxt_1$H.splicePath)(Namespaces_1$G.NS_CAPTCHA, 'captcha', 'dataform')
    }),
    (0, jxt_1$H.extendIQ)({
        captcha: (0, jxt_1$H.splicePath)(Namespaces_1$G.NS_CAPTCHA, 'captcha', 'dataform')
    })
];
xep0158.default = Protocol$B;

var xep0166 = {};

// ====================================================================
// XEP-0166: Jingle
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0166.html
// Version: 1.1.1 (2016-05-17)
//
// Additional:
// - Added unknown-content error
// ====================================================================
Object.defineProperty(xep0166, "__esModule", { value: true });
const Constants_1$4 = Constants;
const jxt_1$G = jxt;
const Namespaces_1$F = Namespaces;
const Protocol$A = [
    (0, jxt_1$G.extendStanzaError)({
        jingleError: (0, jxt_1$G.childEnum)(Namespaces_1$F.NS_JINGLE_ERRORS_1, Object.values(Constants_1$4.JingleErrorCondition))
    }),
    {
        element: 'jingle',
        fields: {
            action: (0, jxt_1$G.attribute)('action'),
            initiator: (0, jxt_1$G.JIDAttribute)('initiator'),
            responder: (0, jxt_1$G.JIDAttribute)('responder'),
            sid: (0, jxt_1$G.attribute)('sid')
        },
        namespace: Namespaces_1$F.NS_JINGLE_1,
        path: 'iq.jingle'
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents'
            }
        ],
        element: 'content',
        fields: {
            creator: (0, jxt_1$G.attribute)('creator'),
            disposition: (0, jxt_1$G.attribute)('disposition', 'session'),
            name: (0, jxt_1$G.attribute)('name'),
            senders: (0, jxt_1$G.attribute)('senders', 'both')
        },
        namespace: Namespaces_1$F.NS_JINGLE_1
    },
    {
        element: 'reason',
        fields: {
            alternativeSession: (0, jxt_1$G.childText)(null, 'alternative-session'),
            condition: (0, jxt_1$G.childEnum)(null, Object.values(Constants_1$4.JingleReasonCondition)),
            text: (0, jxt_1$G.childText)(null, 'text')
        },
        namespace: Namespaces_1$F.NS_JINGLE_1,
        path: 'iq.jingle.reason'
    }
];
xep0166.default = Protocol$A;

var xep0167 = {};

// ====================================================================
// XEP-0167: Jingle RTP Sessions
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0167.html
// Version: 1.1.1 (2016-07-08)
//
// Additional:
// - rtcpMux flag
// - rtcpReducedSize flag
// - media streams list
//
// --------------------------------------------------------------------
// XEP-0262: Use of ZRTP in Jingle RTP Sessions
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0262.html
// Version: 1.0 (2011-06-15)
//
// --------------------------------------------------------------------
// XEP-0293: Jingle RTP Feedback Negotiation
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0293.html
// Version: 1.0 (2015-08-11)
//
// --------------------------------------------------------------------
// XEP-0294: Jingle RTP Header Extensions Negotiation
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0294.html
// Version: 1.0 (2015-08-11)
//
// --------------------------------------------------------------------
// XEP-0339: Source-Specific Media Attributes in Jingle
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0339.html
// Version: 0.3 (2017-09-11)
// ====================================================================
Object.defineProperty(xep0167, "__esModule", { value: true });
const Constants_1$3 = Constants;
const jxt_1$F = jxt;
const Namespaces_1$E = Namespaces;
function rtcpFeedback() {
    return {
        importer(xml, context) {
            let existing = (0, jxt_1$F.findAll)(xml, Namespaces_1$E.NS_JINGLE_RTP_RTCP_FB_0, 'rtcp-fb');
            const typeImporter = (0, jxt_1$F.attribute)('type').importer;
            const subtypeImporter = (0, jxt_1$F.attribute)('subtype').importer;
            const valueImporter = (0, jxt_1$F.attribute)('value').importer;
            const result = [];
            for (const child of existing) {
                const type = typeImporter(child, context);
                const parameter = subtypeImporter(child, context);
                result.push(parameter ? { type, parameter } : { type });
            }
            existing = (0, jxt_1$F.findAll)(xml, Namespaces_1$E.NS_JINGLE_RTP_RTCP_FB_0, 'rtcp-fb-trr-int');
            for (const child of existing) {
                const parameter = valueImporter(child, context);
                result.push(parameter ? { type: 'trr-int', parameter } : { type: 'trr-int' });
            }
            return result;
        },
        exporter(xml, values, context) {
            const typeExporter = (0, jxt_1$F.attribute)('type').exporter;
            const subtypeExporter = (0, jxt_1$F.attribute)('subtype').exporter;
            const valueExporter = (0, jxt_1$F.attribute)('value').exporter;
            for (const fb of values) {
                let child;
                if (fb.type === 'trr-int') {
                    child = (0, jxt_1$F.createElement)(Namespaces_1$E.NS_JINGLE_RTP_RTCP_FB_0, 'rtcp-fb-trr-int', context.namespace, xml);
                    if (fb.parameter) {
                        valueExporter(child, fb.parameter, context);
                    }
                }
                else {
                    child = (0, jxt_1$F.createElement)(Namespaces_1$E.NS_JINGLE_RTP_RTCP_FB_0, 'rtcp-fb', context.namespace, xml);
                    typeExporter(child, fb.type, context);
                    if (fb.parameter) {
                        subtypeExporter(child, fb.parameter, context);
                    }
                }
                xml.appendChild(child);
            }
        }
    };
}
const info = 'iq.jingle.info';
const Protocol$z = [
    {
        aliases: ['iq.jingle.contents.application'],
        childrenExportOrder: {
            codecs: 4,
            encryption: 5,
            headerExtensions: 6,
            sourceGroups: 8,
            sources: 7,
            streams: 9
        },
        element: 'description',
        fields: {
            media: (0, jxt_1$F.attribute)('media'),
            rtcpFeedback: {
                ...rtcpFeedback(),
                exportOrder: 3
            },
            rtcpMux: {
                ...(0, jxt_1$F.childBoolean)(null, 'rtcp-mux'),
                exportOrder: 1
            },
            rtcpReducedSize: {
                ...(0, jxt_1$F.childBoolean)(null, 'rtcp-reduced-size'),
                exportOrder: 2
            },
            ssrc: (0, jxt_1$F.attribute)('ssrc')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_1,
        optionalNamespaces: {
            rtcpf: Namespaces_1$E.NS_JINGLE_RTP_RTCP_FB_0,
            rtph: Namespaces_1$E.NS_JINGLE_RTP_HDREXT_0
        },
        type: Namespaces_1$E.NS_JINGLE_RTP_1
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.application.headerExtensions',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            }
        ],
        element: 'rtp-hdrext',
        fields: {
            id: (0, jxt_1$F.integerAttribute)('id'),
            senders: (0, jxt_1$F.attribute)('senders'),
            uri: (0, jxt_1$F.attribute)('uri')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_HDREXT_0
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.application.codecs',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            },
            'rtpcodec'
        ],
        element: 'payload-type',
        fields: {
            channels: (0, jxt_1$F.integerAttribute)('channels'),
            clockRate: (0, jxt_1$F.integerAttribute)('clockrate'),
            id: (0, jxt_1$F.attribute)('id'),
            maxptime: (0, jxt_1$F.integerAttribute)('maxptime'),
            name: (0, jxt_1$F.attribute)('name'),
            parameters: (0, jxt_1$F.parameterMap)(Namespaces_1$E.NS_JINGLE_RTP_1, 'parameter', 'name', 'value'),
            ptime: (0, jxt_1$F.integerAttribute)('ptime'),
            rtcpFeedback: rtcpFeedback()
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_1
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.application.sources',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            }
        ],
        element: 'source',
        fields: {
            parameters: (0, jxt_1$F.parameterMap)(Namespaces_1$E.NS_JINGLE_RTP_SSMA_0, 'parameter', 'name', 'value'),
            ssrc: (0, jxt_1$F.attribute)('ssrc')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_SSMA_0
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.application.sourceGroups',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            }
        ],
        element: 'ssrc-group',
        fields: {
            semantics: (0, jxt_1$F.attribute)('semantics'),
            sources: (0, jxt_1$F.multipleChildAttribute)(null, 'source', 'ssrc')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_SSMA_0
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.application.streams',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            }
        ],
        element: 'stream',
        fields: {
            id: (0, jxt_1$F.attribute)('id'),
            track: (0, jxt_1$F.attribute)('track')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_MSID_0
    },
    {
        aliases: [{ path: 'iq.jingle.contents.application.encryption', selector: Namespaces_1$E.NS_JINGLE_RTP_1 }],
        element: 'encryption',
        fields: {
            required: (0, jxt_1$F.booleanAttribute)('required')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_1
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.application.encryption.sdes',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            }
        ],
        element: 'crypto',
        fields: {
            cryptoSuite: (0, jxt_1$F.attribute)('crypto-suite'),
            keyParameters: (0, jxt_1$F.attribute)('key-params'),
            sessionParameters: (0, jxt_1$F.attribute)('session-params'),
            tag: (0, jxt_1$F.integerAttribute)('tag')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_1
    },
    {
        aliases: [
            {
                path: 'iq.jingle.contents.application.encryption.zrtp',
                selector: Namespaces_1$E.NS_JINGLE_RTP_1
            }
        ],
        element: 'zrtp-hash',
        fields: {
            value: (0, jxt_1$F.textBuffer)('hex'),
            version: (0, jxt_1$F.attribute)('version')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_1
    },
    {
        element: 'mute',
        fields: {
            creator: (0, jxt_1$F.attribute)('creator'),
            name: (0, jxt_1$F.attribute)('name')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_INFO_1,
        path: info,
        type: Constants_1$3.JINGLE_INFO_MUTE
    },
    {
        element: 'unmute',
        fields: {
            creator: (0, jxt_1$F.attribute)('creator'),
            name: (0, jxt_1$F.attribute)('name')
        },
        namespace: Namespaces_1$E.NS_JINGLE_RTP_INFO_1,
        path: info,
        type: Constants_1$3.JINGLE_INFO_UNMUTE
    },
    {
        element: 'hold',
        namespace: Namespaces_1$E.NS_JINGLE_RTP_INFO_1,
        path: info,
        type: Constants_1$3.JINGLE_INFO_HOLD
    },
    {
        element: 'unhold',
        namespace: Namespaces_1$E.NS_JINGLE_RTP_INFO_1,
        path: info,
        type: Constants_1$3.JINGLE_INFO_UNHOLD
    },
    {
        element: 'active',
        namespace: Namespaces_1$E.NS_JINGLE_RTP_INFO_1,
        path: info,
        type: Constants_1$3.JINGLE_INFO_ACTIVE
    },
    {
        element: 'ringing',
        namespace: Namespaces_1$E.NS_JINGLE_RTP_INFO_1,
        path: info,
        type: Constants_1$3.JINGLE_INFO_RINGING
    }
];
xep0167.default = Protocol$z;

var xep0172 = {};

// ====================================================================
// XEP-0172: User Nickname
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0172.html
// Version: 1.1 (2012-03-21)
// ====================================================================
Object.defineProperty(xep0172, "__esModule", { value: true });
const jxt_1$E = jxt;
const Namespaces_1$D = Namespaces;
const Protocol$y = [
    (0, jxt_1$E.extendMessage)({
        nick: (0, jxt_1$E.childText)(Namespaces_1$D.NS_NICK, 'nick')
    }),
    (0, jxt_1$E.extendPresence)({
        nick: (0, jxt_1$E.childText)(Namespaces_1$D.NS_NICK, 'nick')
    }),
    {
        aliases: (0, jxt_1$E.pubsubItemContentAliases)(),
        element: 'nick',
        fields: {
            nick: (0, jxt_1$E.text)()
        },
        namespace: Namespaces_1$D.NS_NICK,
        type: Namespaces_1$D.NS_NICK
    }
];
xep0172.default = Protocol$y;

var xep0176 = {};

// ====================================================================
// XEP-0176: Jingle ICE-UDP Transport Method
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0176.html
// Version: 1.0 (2009-06-10)
//
// Additional:
// - tcpType candidate attribute (matching XEP-0371)
// - gatheringComplete flag (matching XEP-0371)
//
// --------------------------------------------------------------------
// XEP-0371: Jingle ICE-UDP Transport Method
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0371.html
// Version: 0.2 (2017-09-11)
// ====================================================================
Object.defineProperty(xep0176, "__esModule", { value: true });
const jxt_1$D = jxt;
const Namespaces_1$C = Namespaces;
const ice = (transportType) => [
    {
        element: 'transport',
        fields: {
            gatheringComplete: (0, jxt_1$D.childBoolean)(null, 'gathering-complete'),
            password: (0, jxt_1$D.attribute)('pwd'),
            usernameFragment: (0, jxt_1$D.attribute)('ufrag')
        },
        namespace: transportType,
        path: 'iq.jingle.contents.transport',
        type: transportType,
        typeField: 'transportType'
    },
    {
        aliases: [
            {
                impliedType: true,
                path: 'iq.jingle.contents.transport.remoteCandidate',
                selector: transportType
            }
        ],
        element: 'remote-candidate',
        fields: {
            component: (0, jxt_1$D.integerAttribute)('component'),
            ip: (0, jxt_1$D.attribute)('ip'),
            port: (0, jxt_1$D.integerAttribute)('port')
        },
        namespace: transportType,
        type: transportType,
        typeField: 'transportType'
    },
    {
        aliases: [
            {
                impliedType: true,
                multiple: true,
                path: 'iq.jingle.contents.transport.candidates',
                selector: transportType
            }
        ],
        element: 'candidate',
        fields: {
            component: (0, jxt_1$D.integerAttribute)('component'),
            foundation: (0, jxt_1$D.attribute)('foundation'),
            generation: (0, jxt_1$D.integerAttribute)('generation'),
            id: (0, jxt_1$D.attribute)('id'),
            ip: (0, jxt_1$D.attribute)('ip'),
            network: (0, jxt_1$D.integerAttribute)('network'),
            port: (0, jxt_1$D.integerAttribute)('port'),
            priority: (0, jxt_1$D.integerAttribute)('priority'),
            protocol: (0, jxt_1$D.attribute)('protocol'),
            relatedAddress: (0, jxt_1$D.attribute)('rel-addr'),
            relatedPort: (0, jxt_1$D.attribute)('rel-port'),
            tcpType: (0, jxt_1$D.attribute)('tcptype'),
            type: (0, jxt_1$D.attribute)('type')
        },
        namespace: transportType,
        type: transportType,
        typeField: 'transportType'
    }
];
const Protocol$x = [...ice(Namespaces_1$C.NS_JINGLE_ICE_0), ...ice(Namespaces_1$C.NS_JINGLE_ICE_UDP_1)];
xep0176.default = Protocol$x;

var xep0177 = {};

// ====================================================================
// XEP-0177: Jingle Raw UDP Transport Method
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0177.html
// Version: 1.1 (2009-12-23)
// ====================================================================
Object.defineProperty(xep0177, "__esModule", { value: true });
const jxt_1$C = jxt;
const Namespaces_1$B = Namespaces;
const Protocol$w = [
    {
        element: 'transport',
        fields: {
            gatheringComplete: (0, jxt_1$C.childBoolean)(null, 'gathering-complete'),
            password: (0, jxt_1$C.attribute)('pwd'),
            usernameFragment: (0, jxt_1$C.attribute)('ufrag')
        },
        namespace: Namespaces_1$B.NS_JINGLE_RAW_UDP_1,
        path: 'iq.jingle.contents.transport',
        type: Namespaces_1$B.NS_JINGLE_RAW_UDP_1,
        typeField: 'transportType'
    },
    {
        aliases: [
            {
                impliedType: true,
                multiple: true,
                path: 'iq.jingle.contents.transport.candidates',
                selector: Namespaces_1$B.NS_JINGLE_RAW_UDP_1
            }
        ],
        element: 'candidate',
        fields: {
            component: (0, jxt_1$C.integerAttribute)('component'),
            foundation: (0, jxt_1$C.attribute)('foundation'),
            generation: (0, jxt_1$C.integerAttribute)('generation'),
            id: (0, jxt_1$C.attribute)('id'),
            ip: (0, jxt_1$C.attribute)('ip'),
            port: (0, jxt_1$C.integerAttribute)('port'),
            type: (0, jxt_1$C.attribute)('type')
        },
        namespace: Namespaces_1$B.NS_JINGLE_RAW_UDP_1,
        type: Namespaces_1$B.NS_JINGLE_RAW_UDP_1,
        typeField: 'transportType'
    }
];
xep0177.default = Protocol$w;

var xep0184 = {};

// ====================================================================
// XEP-0184: Message Delivery Receipts
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0184.html
// Version: 1.2 (2011-03-01)
// ====================================================================
Object.defineProperty(xep0184, "__esModule", { value: true });
const jxt_1$B = jxt;
const Namespaces_1$A = Namespaces;
const Protocol$v = [
    {
        element: 'request',
        namespace: Namespaces_1$A.NS_RECEIPTS,
        path: 'message.receipt',
        type: 'request',
        typeField: 'type'
    },
    {
        element: 'received',
        fields: {
            id: (0, jxt_1$B.attribute)('id')
        },
        namespace: Namespaces_1$A.NS_RECEIPTS,
        path: 'message.receipt',
        type: 'received',
        typeField: 'type'
    }
];
xep0184.default = Protocol$v;

var xep0186 = {};

// ====================================================================
// XEP-0186: Invisible Command
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0186.html
// Version: 0.13 (2017-11-29)
// ====================================================================
Object.defineProperty(xep0186, "__esModule", { value: true });
const jxt_1$A = jxt;
const Namespaces_1$z = Namespaces;
const Protocol$u = [
    {
        element: 'invisible',
        fields: {
            probe: (0, jxt_1$A.booleanAttribute)('probe')
        },
        namespace: Namespaces_1$z.NS_INVISIBLE_0,
        path: 'iq.visibility',
        type: 'invisible',
        typeField: 'type'
    },
    {
        element: 'visible',
        namespace: Namespaces_1$z.NS_INVISIBLE_0,
        path: 'iq.visibility',
        type: 'visible'
    }
];
xep0186.default = Protocol$u;

var xep0191 = {};

// ====================================================================
// XEP-0191: Blocking Command
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0191.html
// Version: 1.3 (2015-03-12)
// ====================================================================
Object.defineProperty(xep0191, "__esModule", { value: true });
const jxt_1$z = jxt;
const Namespaces_1$y = Namespaces;
const Protocol$t = [
    (0, jxt_1$z.extendStanzaError)({
        blocked: (0, jxt_1$z.childBoolean)(Namespaces_1$y.NS_BLOCKING_ERRORS, 'blocked')
    }),
    {
        element: 'blocklist',
        fields: {
            jids: (0, jxt_1$z.multipleChildAttribute)(null, 'item', 'jid')
        },
        namespace: Namespaces_1$y.NS_BLOCKING,
        path: 'iq.blockList',
        type: 'list',
        typeField: 'action'
    },
    {
        element: 'block',
        fields: {
            jids: (0, jxt_1$z.multipleChildAttribute)(null, 'item', 'jid')
        },
        namespace: Namespaces_1$y.NS_BLOCKING,
        path: 'iq.blockList',
        type: 'block',
        typeField: 'action'
    },
    {
        element: 'unblock',
        fields: {
            jids: (0, jxt_1$z.multipleChildAttribute)(null, 'item', 'jid')
        },
        namespace: Namespaces_1$y.NS_BLOCKING,
        path: 'iq.blockList',
        type: 'unblock',
        typeField: 'action'
    }
];
xep0191.default = Protocol$t;

var xep0198 = {};

// ====================================================================
// XEP-0198: Stream Management
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0198.html
// Version: 1.5.2 (2016-12-08)
// ====================================================================
Object.defineProperty(xep0198, "__esModule", { value: true });
const jxt_1$y = jxt;
const Namespaces_1$x = Namespaces;
const Protocol$s = [
    (0, jxt_1$y.extendStreamFeatures)({
        streamManagement: (0, jxt_1$y.childBoolean)(Namespaces_1$x.NS_SMACKS_3, 'sm')
    }),
    {
        element: 'a',
        fields: {
            handled: (0, jxt_1$y.integerAttribute)('h')
        },
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'ack',
        typeField: 'type'
    },
    {
        element: 'r',
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'request',
        typeField: 'type'
    },
    {
        element: 'enable',
        fields: {
            allowResumption: (0, jxt_1$y.booleanAttribute)('resume')
        },
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'enable',
        typeField: 'type'
    },
    {
        element: 'enabled',
        fields: {
            id: (0, jxt_1$y.attribute)('id'),
            resume: (0, jxt_1$y.booleanAttribute)('resume')
        },
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'enabled',
        typeField: 'type'
    },
    {
        element: 'resume',
        fields: {
            handled: (0, jxt_1$y.integerAttribute)('h'),
            previousSession: (0, jxt_1$y.attribute)('previd')
        },
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'resume',
        typeField: 'type'
    },
    {
        element: 'resumed',
        fields: {
            handled: (0, jxt_1$y.integerAttribute)('h'),
            previousSession: (0, jxt_1$y.attribute)('previd')
        },
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'resumed',
        typeField: 'type'
    },
    {
        element: 'failed',
        fields: {
            handled: (0, jxt_1$y.integerAttribute)('h')
        },
        namespace: Namespaces_1$x.NS_SMACKS_3,
        path: 'sm',
        type: 'failed',
        typeField: 'type'
    }
];
xep0198.default = Protocol$s;

var xep0199 = {};

// ====================================================================
// XEP-0199: XMPP Ping
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0199.html
// Version: 2.0 (2009-06-03)
// ====================================================================
Object.defineProperty(xep0199, "__esModule", { value: true });
const jxt_1$x = jxt;
const Namespaces_1$w = Namespaces;
xep0199.default = (0, jxt_1$x.extendIQ)({
    ping: (0, jxt_1$x.childBoolean)(Namespaces_1$w.NS_PING, 'ping')
});

var xep0202 = {};

// ====================================================================
// XEP-0202: Entity Time
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0202.html
// Version: 2.0 (2009-09-15)
// ====================================================================
Object.defineProperty(xep0202, "__esModule", { value: true });
const jxt_1$w = jxt;
const Namespaces_1$v = Namespaces;
const Protocol$r = {
    element: 'time',
    fields: {
        tzo: (0, jxt_1$w.childTimezoneOffset)(null, 'tzo'),
        utc: (0, jxt_1$w.childDate)(null, 'utc')
    },
    namespace: Namespaces_1$v.NS_TIME,
    path: 'iq.time'
};
xep0202.default = Protocol$r;

var xep0203 = {};

// ====================================================================
// XEP-0203: Delayed Delivery
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0203.html
// Version: 2.0 (2009-09-15)
// ====================================================================
Object.defineProperty(xep0203, "__esModule", { value: true });
const jxt_1$v = jxt;
const Namespaces_1$u = Namespaces;
const Protocol$q = {
    aliases: ['message.delay', 'presence.delay'],
    element: 'delay',
    fields: {
        from: (0, jxt_1$v.JIDAttribute)('from'),
        reason: (0, jxt_1$v.text)(),
        timestamp: (0, jxt_1$v.dateAttribute)('stamp')
    },
    namespace: Namespaces_1$u.NS_DELAY
};
xep0203.default = Protocol$q;

var xep0215 = {};

// ====================================================================
// XEP-0215: External Service Discovery
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0215.html
// Version: 0.6 (2014-02-27)
// ====================================================================
Object.defineProperty(xep0215, "__esModule", { value: true });
const jxt_1$u = jxt;
const Namespaces_1$t = Namespaces;
const versions$1 = {
    '2': Namespaces_1$t.NS_DISCO_EXTERNAL_2,
    '1': Namespaces_1$t.NS_DISCO_EXTERNAL_1
};
const Protocol$p = [];
for (const [version, namespace] of Object.entries(versions$1)) {
    Protocol$p.push({
        aliases: ['iq.externalServiceCredentials'],
        defaultType: '2',
        element: 'credentials',
        fields: {
            expires: (0, jxt_1$u.childDateAttribute)(null, 'service', 'expires'),
            host: (0, jxt_1$u.childAttribute)(null, 'service', 'host'),
            name: (0, jxt_1$u.childAttribute)(null, 'service', 'name'),
            password: (0, jxt_1$u.childAttribute)(null, 'service', 'password'),
            port: (0, jxt_1$u.childIntegerAttribute)(null, 'service', 'port'),
            restricted: (0, jxt_1$u.childBooleanAttribute)(null, 'service', 'restricted'),
            transport: (0, jxt_1$u.childAttribute)(null, 'service', 'transport'),
            type: (0, jxt_1$u.childAttribute)(null, 'service', 'type'),
            username: (0, jxt_1$u.childAttribute)(null, 'service', 'username')
        },
        namespace,
        type: version,
        typeField: 'version'
    }, {
        aliases: ['iq.externalServices'],
        defaultType: '2',
        element: 'services',
        fields: {
            type: (0, jxt_1$u.attribute)('type')
        },
        namespace,
        type: version,
        typeField: 'version'
    }, {
        aliases: [{ path: 'iq.externalServices.services', multiple: true }],
        defaultType: '2',
        element: 'service',
        fields: {
            expires: (0, jxt_1$u.dateAttribute)('expires'),
            host: (0, jxt_1$u.attribute)('host'),
            name: (0, jxt_1$u.attribute)('name'),
            password: (0, jxt_1$u.attribute)('password'),
            port: (0, jxt_1$u.integerAttribute)('port'),
            restricted: (0, jxt_1$u.booleanAttribute)('restricted'),
            transport: (0, jxt_1$u.attribute)('transport'),
            type: (0, jxt_1$u.attribute)('type'),
            username: (0, jxt_1$u.attribute)('username')
        },
        namespace,
        type: version,
        typeField: 'version'
    });
}
xep0215.default = Protocol$p;

var xep0221 = {};

// ====================================================================
// XEP-0221: Data Forms Media Element
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0221.html
// Version: 1.0 (2008-09-03)
// ====================================================================
Object.defineProperty(xep0221, "__esModule", { value: true });
const jxt_1$t = jxt;
const Namespaces_1$s = Namespaces;
const Protocol$o = [
    {
        element: 'media',
        fields: {
            height: (0, jxt_1$t.integerAttribute)('height'),
            width: (0, jxt_1$t.integerAttribute)('width')
        },
        namespace: Namespaces_1$s.NS_DATAFORM_MEDIA,
        path: 'dataform.fields.media'
    },
    {
        aliases: [{ multiple: true, path: 'dataform.fields.media.sources' }],
        element: 'uri',
        fields: {
            mediaType: (0, jxt_1$t.attribute)('type'),
            uri: (0, jxt_1$t.text)()
        },
        namespace: Namespaces_1$s.NS_DATAFORM_MEDIA
    }
];
xep0221.default = Protocol$o;

var xep0224 = {};

// ====================================================================
// XEP-0224: Attention
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0224.html
// Version: Version 1.0 (2008-11-13)
// ====================================================================
Object.defineProperty(xep0224, "__esModule", { value: true });
const jxt_1$s = jxt;
const Namespaces_1$r = Namespaces;
xep0224.default = (0, jxt_1$s.extendMessage)({
    requestingAttention: (0, jxt_1$s.childBoolean)(Namespaces_1$r.NS_ATTENTION_0, 'attention')
});

var xep0231 = {};

// ====================================================================
// XEP-0231: Bits of Binary
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0231.html
// Version: Version 1.0 (2008-09-03)
// ====================================================================
Object.defineProperty(xep0231, "__esModule", { value: true });
const jxt_1$r = jxt;
const Namespaces_1$q = Namespaces;
const Protocol$n = {
    aliases: [
        'iq.bits',
        { path: 'message.bits', multiple: true },
        { path: 'presence.bits', multiple: true },
        { path: 'iq.jingle.bits', multiple: true }
    ],
    element: 'data',
    fields: {
        cid: (0, jxt_1$r.attribute)('cid'),
        data: (0, jxt_1$r.textBuffer)('base64'),
        maxAge: (0, jxt_1$r.integerAttribute)('max-age'),
        mediaType: (0, jxt_1$r.attribute)('type')
    },
    namespace: Namespaces_1$q.NS_BOB
};
xep0231.default = Protocol$n;

var xep0234 = {};

// ====================================================================
// XEP-0234: Jingle File Transfer
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0234.html
// Version: Version 0.18.3 (2017-08-24)
// ====================================================================
Object.defineProperty(xep0234, "__esModule", { value: true });
const jxt_1$q = jxt;
const Namespaces_1$p = Namespaces;
let Protocol$m = [
    (0, jxt_1$q.addAlias)(Namespaces_1$p.NS_HASHES_2, 'hash', [
        { path: 'file.hashes', multiple: true },
        { path: 'file.range.hashes', multiple: true }
    ]),
    (0, jxt_1$q.addAlias)(Namespaces_1$p.NS_HASHES_1, 'hash', [
        { path: 'file.hashes', multiple: true },
        { path: 'file.range.hashes', multiple: true }
    ]),
    (0, jxt_1$q.addAlias)(Namespaces_1$p.NS_HASHES_2, 'hash-used', [{ path: 'file.hashesUsed', multiple: true }]),
    (0, jxt_1$q.addAlias)(Namespaces_1$p.NS_THUMBS_1, 'thumbnail', [{ path: 'file.thumbnails', multiple: true }])
];
for (const ftVersion of [Namespaces_1$p.NS_JINGLE_FILE_TRANSFER_4, Namespaces_1$p.NS_JINGLE_FILE_TRANSFER_5]) {
    Protocol$m = Protocol$m.concat([
        {
            aliases: [
                'file',
                {
                    impliedType: true,
                    path: 'iq.jingle.contents.application.file',
                    selector: ftVersion
                },
                {
                    impliedType: true,
                    path: 'iq.jingle.info.file',
                    selector: `{${ftVersion}}checksum`
                }
            ],
            defaultType: Namespaces_1$p.NS_JINGLE_FILE_TRANSFER_5,
            element: 'file',
            fields: {
                date: (0, jxt_1$q.childDate)(null, 'date'),
                description: (0, jxt_1$q.childText)(null, 'desc'),
                mediaType: (0, jxt_1$q.childText)(null, 'media-type'),
                name: (0, jxt_1$q.childText)(null, 'name'),
                size: (0, jxt_1$q.childInteger)(null, 'size')
            },
            namespace: ftVersion,
            type: ftVersion,
            typeField: 'version'
        },
        {
            aliases: [{ impliedType: true, path: 'file.range', selector: ftVersion }],
            defaultType: Namespaces_1$p.NS_JINGLE_FILE_TRANSFER_5,
            element: 'range',
            fields: {
                length: (0, jxt_1$q.integerAttribute)('length'),
                offset: (0, jxt_1$q.integerAttribute)('offset', 0)
            },
            namespace: ftVersion,
            type: ftVersion,
            typeField: 'version'
        },
        {
            element: 'description',
            namespace: ftVersion,
            path: 'iq.jingle.contents.application',
            type: ftVersion,
            typeField: 'applicationType'
        },
        {
            element: 'received',
            fields: {
                creator: (0, jxt_1$q.attribute)('creator'),
                name: (0, jxt_1$q.attribute)('name')
            },
            namespace: ftVersion,
            path: 'iq.jingle.info',
            type: `{${ftVersion}}received`,
            typeField: 'infoType'
        },
        {
            element: 'checksum',
            fields: {
                creator: (0, jxt_1$q.attribute)('creator'),
                name: (0, jxt_1$q.attribute)('name')
            },
            namespace: ftVersion,
            path: 'iq.jingle.info',
            type: `{${ftVersion}}checksum`,
            typeField: 'infoType'
        }
    ]);
}
xep0234.default = Protocol$m;

var xep0247 = {};

// ====================================================================
// XEP-0247: Jingle XML Streams
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0247.html
// Version: 0.2 (2009-02-20)
// ====================================================================
Object.defineProperty(xep0247, "__esModule", { value: true });
const Namespaces_1$o = Namespaces;
const Protocol$l = {
    element: 'description',
    namespace: Namespaces_1$o.NS_JINGLE_XML_0,
    path: 'iq.jingle.contents.application',
    type: Namespaces_1$o.NS_JINGLE_XML_0,
    typeField: 'applicationType'
};
xep0247.default = Protocol$l;

var xep0260 = {};

// ====================================================================
// XEP-0260: Jingle SOCKS5 Bytestreams Transport Method
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0260.html
// Version: 1.0.1 (2016-05-17)
// ====================================================================
Object.defineProperty(xep0260, "__esModule", { value: true });
const jxt_1$p = jxt;
const Namespaces_1$n = Namespaces;
const Protocol$k = [
    {
        element: 'transport',
        fields: {
            activated: (0, jxt_1$p.childAttribute)(null, 'activated', 'cid'),
            address: (0, jxt_1$p.attribute)('dstaddr'),
            candidateError: (0, jxt_1$p.childBoolean)(null, 'candidate-error'),
            candidateUsed: (0, jxt_1$p.childAttribute)(null, 'candidate-used', 'cid'),
            mode: (0, jxt_1$p.attribute)('mode', 'tcp'),
            proxyError: (0, jxt_1$p.childBoolean)(null, 'proxy-error'),
            sid: (0, jxt_1$p.attribute)('sid')
        },
        namespace: Namespaces_1$n.NS_JINGLE_SOCKS5_1,
        path: 'iq.jingle.contents.transport',
        type: Namespaces_1$n.NS_JINGLE_SOCKS5_1,
        typeField: 'transportType'
    },
    {
        aliases: [
            {
                multiple: true,
                path: 'iq.jingle.contents.transport.candidates',
                selector: Namespaces_1$n.NS_JINGLE_SOCKS5_1
            }
        ],
        element: 'candidate',
        fields: {
            cid: (0, jxt_1$p.attribute)('cid'),
            host: (0, jxt_1$p.attribute)('host'),
            jid: (0, jxt_1$p.JIDAttribute)('jid'),
            port: (0, jxt_1$p.integerAttribute)('port'),
            priority: (0, jxt_1$p.integerAttribute)('priority'),
            type: (0, jxt_1$p.attribute)('type'),
            uri: (0, jxt_1$p.attribute)('uri')
        },
        namespace: Namespaces_1$n.NS_JINGLE_SOCKS5_1
    }
];
xep0260.default = Protocol$k;

var xep0261 = {};

// ====================================================================
// XEP-0261: Jingle In-Band Bytestreams Transport Method
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0047.html
// Version: 1.0 (2011-09-23)
// ====================================================================
Object.defineProperty(xep0261, "__esModule", { value: true });
const jxt_1$o = jxt;
const Namespaces_1$m = Namespaces;
const Protocol$j = {
    element: 'transport',
    fields: {
        ack: {
            importer(xml, context) {
                const stanza = (0, jxt_1$o.attribute)('stanza', 'iq').importer(xml, context);
                return stanza !== 'message';
            },
            exporter(xml, data, context) {
                if (data === false) {
                    (0, jxt_1$o.attribute)('stanza').exporter(xml, 'message', context);
                }
            }
        },
        blockSize: (0, jxt_1$o.integerAttribute)('block-size'),
        sid: (0, jxt_1$o.attribute)('sid')
    },
    namespace: Namespaces_1$m.NS_JINGLE_IBB_1,
    path: 'iq.jingle.contents.transport',
    type: Namespaces_1$m.NS_JINGLE_IBB_1,
    typeField: 'transportType'
};
xep0261.default = Protocol$j;

var xep0264 = {};

// ====================================================================
// XEP-0224: Attention
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0224.html
// Version: Version 1.0 (2008-11-13)
// ====================================================================
Object.defineProperty(xep0264, "__esModule", { value: true });
const jxt_1$n = jxt;
const Namespaces_1$l = Namespaces;
const Protocol$i = [
    (0, jxt_1$n.addAlias)(Namespaces_1$l.NS_BOB, 'data', [{ path: 'iq.jingle.bits', multiple: true }]),
    {
        element: 'thumbnail',
        fields: {
            height: (0, jxt_1$n.integerAttribute)('height'),
            mediaType: (0, jxt_1$n.attribute)('media-type'),
            uri: (0, jxt_1$n.attribute)('uri'),
            width: (0, jxt_1$n.integerAttribute)('width')
        },
        namespace: Namespaces_1$l.NS_THUMBS_1,
        path: 'thumbnail'
    }
];
xep0264.default = Protocol$i;

var xep0280 = {};

// ====================================================================
// XEP-0280: Message Carbons
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0280.html
// Version: 0.12.0 (2017-02-16)
// ====================================================================
Object.defineProperty(xep0280, "__esModule", { value: true });
const jxt_1$m = jxt;
const Namespaces_1$k = Namespaces;
const Protocol$h = [
    (0, jxt_1$m.addAlias)(Namespaces_1$k.NS_FORWARD_0, 'forwarded', ['message.carbon.forward']),
    {
        element: 'enable',
        namespace: Namespaces_1$k.NS_CARBONS_2,
        path: 'iq.carbons',
        type: 'enable',
        typeField: 'action'
    },
    {
        element: 'disable',
        namespace: Namespaces_1$k.NS_CARBONS_2,
        path: 'iq.carbons',
        type: 'disable',
        typeField: 'action'
    },
    {
        element: 'sent',
        namespace: Namespaces_1$k.NS_CARBONS_2,
        path: 'message.carbon',
        type: 'sent',
        typeField: 'type'
    },
    {
        element: 'received',
        namespace: Namespaces_1$k.NS_CARBONS_2,
        path: 'message.carbon',
        type: 'received',
        typeField: 'type'
    }
];
xep0280.default = Protocol$h;

var xep0297 = {};

// ====================================================================
// XEP-0297: Stanza Forwarding
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0297.html
// Version: 1.0 (2013-10-02)
// ====================================================================
Object.defineProperty(xep0297, "__esModule", { value: true });
const jxt_1$l = jxt;
const Constants_1$2 = Constants;
const Namespaces_1$j = Namespaces;
const Protocol$g = [
    ...Object.values(Constants_1$2.StreamType).map(streamNS => (0, jxt_1$l.addAlias)(streamNS, 'message', ['forward.message'])),
    ...Object.values(Constants_1$2.StreamType).map(streamNS => (0, jxt_1$l.addAlias)(streamNS, 'presence', ['forward.presence'])),
    ...Object.values(Constants_1$2.StreamType).map(streamNS => (0, jxt_1$l.addAlias)(streamNS, 'iq', ['forward.iq'])),
    (0, jxt_1$l.addAlias)(Namespaces_1$j.NS_DELAY, 'delay', ['forward.delay']),
    {
        aliases: ['message.forward'],
        element: 'forwarded',
        namespace: Namespaces_1$j.NS_FORWARD_0,
        path: 'forward'
    }
];
xep0297.default = Protocol$g;

var xep0300 = {};

// ====================================================================
// XEP-0300: Use of Cryptographic Hash Functions in XMPP
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0300.html
// Version: 0.5.3 (2018-02-14)
// ====================================================================
Object.defineProperty(xep0300, "__esModule", { value: true });
const jxt_1$k = jxt;
const Namespaces_1$i = Namespaces;
const Protocol$f = [
    {
        defaultType: '2',
        element: 'hash',
        fields: {
            algorithm: (0, jxt_1$k.attribute)('algo'),
            value: (0, jxt_1$k.textBuffer)('base64'),
            version: (0, jxt_1$k.staticValue)('2')
        },
        namespace: Namespaces_1$i.NS_HASHES_2,
        path: 'hash',
        type: '2',
        typeField: 'version'
    },
    {
        element: 'hash-used',
        fields: {
            algorithm: (0, jxt_1$k.attribute)('algo'),
            version: (0, jxt_1$k.staticValue)('2')
        },
        namespace: Namespaces_1$i.NS_HASHES_2,
        path: 'hashUsed'
    },
    {
        element: 'hash',
        fields: {
            algorithm: (0, jxt_1$k.attribute)('algo'),
            value: (0, jxt_1$k.textBuffer)('hex'),
            version: (0, jxt_1$k.staticValue)('1')
        },
        namespace: Namespaces_1$i.NS_HASHES_1,
        path: 'hash',
        type: '1',
        typeField: 'version'
    }
];
xep0300.default = Protocol$f;

var xep0301 = {};

// ====================================================================
// XEP-0301: In-Band Real Time Text
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0301.html
// Version: 1.0 (2013-10-082)
// ====================================================================
Object.defineProperty(xep0301, "__esModule", { value: true });
const jxt_1$j = jxt;
const Namespaces_1$h = Namespaces;
const Protocol$e = [
    {
        element: 'rtt',
        fields: {
            event: (0, jxt_1$j.attribute)('event', 'edit'),
            id: (0, jxt_1$j.attribute)('id'),
            seq: (0, jxt_1$j.integerAttribute)('seq')
        },
        namespace: Namespaces_1$h.NS_RTT_0,
        path: 'message.rtt'
    },
    {
        aliases: [{ path: 'message.rtt.actions', multiple: true }],
        element: 't',
        fields: {
            position: (0, jxt_1$j.integerAttribute)('p'),
            text: (0, jxt_1$j.text)()
        },
        namespace: Namespaces_1$h.NS_RTT_0,
        type: 'insert',
        typeField: 'type'
    },
    {
        aliases: [{ path: 'message.rtt.actions', multiple: true }],
        element: 'e',
        fields: {
            length: (0, jxt_1$j.integerAttribute)('n', 1),
            position: (0, jxt_1$j.integerAttribute)('p')
        },
        namespace: Namespaces_1$h.NS_RTT_0,
        type: 'erase',
        typeField: 'type'
    },
    {
        aliases: [{ multiple: true, path: 'message.rtt.actions' }],
        element: 'w',
        fields: {
            duration: (0, jxt_1$j.integerAttribute)('n', 0)
        },
        namespace: Namespaces_1$h.NS_RTT_0,
        type: 'wait',
        typeField: 'type'
    }
];
xep0301.default = Protocol$e;

var xep0308 = {};

// ====================================================================
// XEP-0308: Last Message Correction
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0308.html
// Version: 1.0 (2013-04-08)
// ====================================================================
Object.defineProperty(xep0308, "__esModule", { value: true });
const jxt_1$i = jxt;
const Namespaces_1$g = Namespaces;
xep0308.default = (0, jxt_1$i.extendMessage)({
    replace: (0, jxt_1$i.childAttribute)(Namespaces_1$g.NS_CORRECTION_0, 'replace', 'id')
});

var xep0313 = {};

// ====================================================================
// XEP-0313: Message Archive Management
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0313.html
// Version: 0.6.1 (2017-02-22)
// ====================================================================
Object.defineProperty(xep0313, "__esModule", { value: true });
const jxt_1$h = jxt;
const Namespaces_1$f = Namespaces;
const versions = {
    '2': Namespaces_1$f.NS_MAM_2,
    '1': Namespaces_1$f.NS_MAM_1
};
const Protocol$d = [
    (0, jxt_1$h.addAlias)(Namespaces_1$f.NS_DATAFORM, 'x', ['iq.archive.form']),
    (0, jxt_1$h.addAlias)(Namespaces_1$f.NS_FORWARD_0, 'forwarded', ['message.archive.item']),
    (0, jxt_1$h.addAlias)(Namespaces_1$f.NS_RSM, 'set', ['iq.archive.paging'])
];
for (const [version, namespace] of Object.entries(versions)) {
    Protocol$d.push({
        defaultType: 'query',
        defaultVersion: '2',
        element: 'query',
        fields: {
            node: (0, jxt_1$h.attribute)('node'),
            queryId: (0, jxt_1$h.attribute)('queryid')
        },
        namespace,
        path: 'iq.archive',
        type: 'query',
        typeField: 'type',
        version,
        versionField: 'version'
    }, {
        element: 'fin',
        fields: {
            complete: (0, jxt_1$h.booleanAttribute)('complete'),
            stable: (0, jxt_1$h.booleanAttribute)('stable')
        },
        namespace,
        path: 'iq.archive',
        type: 'result',
        version
    }, {
        element: 'prefs',
        fields: {
            default: (0, jxt_1$h.attribute)('default'),
            always: (0, jxt_1$h.deepMultipleChildText)([
                { namespace: null, element: 'always' },
                { namespace: null, element: 'jid' }
            ]),
            never: (0, jxt_1$h.deepMultipleChildText)([
                { namespace: null, element: 'never' },
                { namespace: null, element: 'jid' }
            ])
        },
        namespace,
        path: 'iq.archive',
        type: 'preferences',
        version
    }, {
        element: 'result',
        defaultType: '2',
        fields: {
            id: (0, jxt_1$h.attribute)('id'),
            queryId: (0, jxt_1$h.attribute)('queryid')
        },
        namespace,
        path: 'message.archive',
        type: version,
        typeField: 'version'
    });
}
xep0313.default = Protocol$d;

var xep0317 = {};

// ====================================================================
// XEP-0317: Hats
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0317.html
// Version: 0.1 (2013-01-03)
// ====================================================================
Object.defineProperty(xep0317, "__esModule", { value: true });
const jxt_1$g = jxt;
const Namespaces_1$e = Namespaces;
const Protocol$c = [
    (0, jxt_1$g.extendPresence)({
        hats: (0, jxt_1$g.splicePath)(Namespaces_1$e.NS_HATS_0, 'hats', 'hat', true)
    }),
    {
        element: 'hat',
        fields: {
            id: (0, jxt_1$g.attribute)('name'),
            name: (0, jxt_1$g.attribute)('displayName')
        },
        namespace: Namespaces_1$e.NS_HATS_0,
        path: 'hat'
    }
];
xep0317.default = Protocol$c;

var xep0319 = {};

// ====================================================================
// XEP-0319: Last User Interaction in Presence
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0313.html
// Version: 1.0.2 (2017-07-17)
// ====================================================================
Object.defineProperty(xep0319, "__esModule", { value: true });
const jxt_1$f = jxt;
const Namespaces_1$d = Namespaces;
xep0319.default = (0, jxt_1$f.extendPresence)({
    idleSince: (0, jxt_1$f.childDate)(Namespaces_1$d.NS_IDLE_1, 'since')
});

var xep0320 = {};

// ====================================================================
// XEP-0320: Use of DTLS-SRTP in Jingle Sessions
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0320.html
// Version: 0.3.1 (2015-10-15)
// ====================================================================
Object.defineProperty(xep0320, "__esModule", { value: true });
const jxt_1$e = jxt;
const Namespaces_1$c = Namespaces;
const Protocol$b = {
    aliases: [
        {
            multiple: true,
            path: 'iq.jingle.contents.transport.fingerprints',
            selector: Namespaces_1$c.NS_JINGLE_ICE_UDP_1
        },
        {
            multiple: true,
            path: 'iq.jingle.contents.transport.fingerprints',
            selector: Namespaces_1$c.NS_JINGLE_ICE_0
        },
        {
            multiple: true,
            path: 'iq.jingle.contents.application.encryption.dtls',
            selector: Namespaces_1$c.NS_JINGLE_RTP_1
        }
    ],
    element: 'fingerprint',
    fields: {
        algorithm: (0, jxt_1$e.attribute)('hash'),
        setup: (0, jxt_1$e.attribute)('setup'),
        value: (0, jxt_1$e.text)()
    },
    namespace: Namespaces_1$c.NS_JINGLE_DTLS_0
};
xep0320.default = Protocol$b;

var xep0333 = {};

// ====================================================================
// XEP-0333: Chat Markers
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0333.html
// Version: 0.3.0 (2017-09-11)
// ====================================================================
Object.defineProperty(xep0333, "__esModule", { value: true });
const jxt_1$d = jxt;
const Namespaces_1$b = Namespaces;
const path = 'message.marker';
const Protocol$a = [
    {
        element: 'markable',
        namespace: Namespaces_1$b.NS_CHAT_MARKERS_0,
        path,
        type: 'markable',
        typeField: 'type'
    },
    {
        element: 'received',
        fields: {
            id: (0, jxt_1$d.attribute)('id')
        },
        namespace: Namespaces_1$b.NS_CHAT_MARKERS_0,
        path,
        type: 'received'
    },
    {
        element: 'displayed',
        fields: {
            id: (0, jxt_1$d.attribute)('id')
        },
        namespace: Namespaces_1$b.NS_CHAT_MARKERS_0,
        path,
        type: 'displayed'
    },
    {
        element: 'acknowledged',
        fields: {
            id: (0, jxt_1$d.attribute)('id')
        },
        namespace: Namespaces_1$b.NS_CHAT_MARKERS_0,
        path,
        type: 'acknowledged'
    }
];
xep0333.default = Protocol$a;

var xep0334 = {};

// ====================================================================
// XEP-0334: Message Processing Hints
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0334.html
// Version: 0.3.0 (2018-01-25)
// ====================================================================
Object.defineProperty(xep0334, "__esModule", { value: true });
const jxt_1$c = jxt;
const Namespaces_1$a = Namespaces;
function processingHints() {
    return {
        importer(xml) {
            const results = {};
            let found = false;
            for (const child of xml.children) {
                /* istanbul ignore next */
                if (typeof child === 'string') {
                    continue;
                }
                if (child.getNamespace() !== Namespaces_1$a.NS_HINTS) {
                    continue;
                }
                switch (child.getName()) {
                    case 'no-copy':
                        results.noCopy = true;
                        found = true;
                        break;
                    case 'no-permanent-store':
                        results.noPermanentStore = true;
                        found = true;
                        break;
                    case 'no-store':
                        results.noStore = true;
                        found = true;
                        break;
                    case 'store':
                        results.store = true;
                        found = true;
                        break;
                }
            }
            return found ? results : undefined;
        },
        exporter(xml, value, context) {
            if (value.noCopy) {
                xml.appendChild((0, jxt_1$c.createElement)(Namespaces_1$a.NS_HINTS, 'no-copy', context.namespace, xml));
            }
            if (value.noPermanentStore) {
                xml.appendChild((0, jxt_1$c.createElement)(Namespaces_1$a.NS_HINTS, 'no-permanent-store', context.namespace, xml));
            }
            if (value.noStore) {
                xml.appendChild((0, jxt_1$c.createElement)(Namespaces_1$a.NS_HINTS, 'no-store', context.namespace, xml));
            }
            if (value.store) {
                xml.appendChild((0, jxt_1$c.createElement)(Namespaces_1$a.NS_HINTS, 'store', context.namespace, xml));
            }
        }
    };
}
xep0334.default = (0, jxt_1$c.extendMessage)({
    processingHints: processingHints()
});

var xep0335 = {};

// ====================================================================
// XEP-0335: JSON Containers
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0335.html
// Version: 0.1 (2013-10-25)
//
// --------------------------------------------------------------------
// XEP-0432: Simple JSON Messaging
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0432.html
// Version: 0.1.0 (2020-02-25)
// ====================================================================
Object.defineProperty(xep0335, "__esModule", { value: true });
const jxt_1$b = jxt;
const Namespaces_1$9 = Namespaces;
const Protocol$9 = [
    (0, jxt_1$b.extendMessage)({
        json: (0, jxt_1$b.childJSON)(Namespaces_1$9.NS_JSON_0, 'json')
    }),
    {
        aliases: (0, jxt_1$b.pubsubItemContentAliases)(),
        element: 'json',
        fields: {
            json: (0, jxt_1$b.textJSON)()
        },
        namespace: Namespaces_1$9.NS_JSON_0,
        type: Namespaces_1$9.NS_JSON_0
    },
    {
        aliases: [{ path: 'message.jsonPayloads', multiple: true }],
        element: 'payload',
        fields: {
            type: (0, jxt_1$b.attribute)('datatype'),
            data: (0, jxt_1$b.childJSON)(Namespaces_1$9.NS_JSON_0, 'json')
        },
        namespace: Namespaces_1$9.NS_JSON_MESSAGE_0
    }
];
xep0335.default = Protocol$9;

var xep0338 = {};

// ====================================================================
// XEP-0338: Jingle Grouping Framework
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0338.html
// Version: 0.2 (2017-09-11)
// ====================================================================
Object.defineProperty(xep0338, "__esModule", { value: true });
const jxt_1$a = jxt;
const Namespaces_1$8 = Namespaces;
const Protocol$8 = [
    {
        aliases: [{ path: 'iq.jingle.groups', multiple: true }],
        element: 'group',
        fields: {
            contents: (0, jxt_1$a.multipleChildAttribute)(null, 'content', 'name'),
            semantics: (0, jxt_1$a.attribute)('semantics')
        },
        namespace: Namespaces_1$8.NS_JINGLE_GROUPING_0
    }
];
xep0338.default = Protocol$8;

var xep0343 = {};

// ====================================================================
// XEP-0343: Signaling WebRTC datachannels in Jingle
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0343.html
// Version: 0.3 (2017-09-11)
// ====================================================================
Object.defineProperty(xep0343, "__esModule", { value: true });
const jxt_1$9 = jxt;
const Namespaces_1$7 = Namespaces;
const Protocol$7 = {
    aliases: [
        {
            path: 'iq.jingle.contents.transport.sctp',
            selector: Namespaces_1$7.NS_JINGLE_ICE_UDP_1
        },
        {
            path: 'iq.jingle.contents.transport.sctp',
            selector: Namespaces_1$7.NS_JINGLE_ICE_0
        }
    ],
    element: 'sctpmap',
    fields: {
        port: (0, jxt_1$9.integerAttribute)('number'),
        protocol: (0, jxt_1$9.attribute)('protocol'),
        streams: (0, jxt_1$9.attribute)('streams')
    },
    namespace: Namespaces_1$7.NS_JINGLE_DTLS_SCTP_1
};
xep0343.default = Protocol$7;

var xep0352 = {};

// ====================================================================
// XEP-0352: Client State Indication
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0352.html
// Version: 0.2.1 (2017-02-18)
// ====================================================================
Object.defineProperty(xep0352, "__esModule", { value: true });
const Namespaces_1$6 = Namespaces;
const Protocol$6 = [
    {
        element: 'active',
        namespace: Namespaces_1$6.NS_CSI_0,
        path: 'csi',
        type: 'active',
        typeField: 'state'
    },
    {
        element: 'inactive',
        namespace: Namespaces_1$6.NS_CSI_0,
        path: 'csi',
        type: 'inactive',
        typeField: 'state'
    }
];
xep0352.default = Protocol$6;

var xep0357 = {};

// ====================================================================
// XEP-0357: Push Notifications
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0357.html
// Version: 0.3 (2017-08-24)
// ====================================================================
Object.defineProperty(xep0357, "__esModule", { value: true });
const jxt_1$8 = jxt;
const Namespaces_1$5 = Namespaces;
const Protocol$5 = [
    (0, jxt_1$8.addAlias)(Namespaces_1$5.NS_DATAFORM, 'x', ['iq.push.form', 'pushNotification.form']),
    {
        element: 'enable',
        fields: {
            jid: (0, jxt_1$8.JIDAttribute)('jid'),
            node: (0, jxt_1$8.attribute)('node')
        },
        namespace: Namespaces_1$5.NS_PUSH_0,
        path: 'iq.push',
        type: 'enable',
        typeField: 'action'
    },
    {
        element: 'disable',
        fields: {
            jid: (0, jxt_1$8.JIDAttribute)('jid'),
            node: (0, jxt_1$8.attribute)('node')
        },
        namespace: Namespaces_1$5.NS_PUSH_0,
        path: 'iq.push',
        type: 'disable',
        typeField: 'action'
    },
    {
        aliases: (0, jxt_1$8.pubsubItemContentAliases)(),
        element: 'notification',
        namespace: Namespaces_1$5.NS_PUSH_0,
        path: 'pushNotification',
        type: Namespaces_1$5.NS_PUSH_0,
        typeField: 'itemType'
    }
];
xep0357.default = Protocol$5;

var xep0359 = {};

// ====================================================================
// XEP-0359: Unique and Stable Stanza IDs
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0359.html
// Version: 0.5.0 (2017-08-23)
// ====================================================================
Object.defineProperty(xep0359, "__esModule", { value: true });
const jxt_1$7 = jxt;
const Namespaces_1$4 = Namespaces;
const Protocol$4 = [
    (0, jxt_1$7.extendMessage)({
        originId: (0, jxt_1$7.childAttribute)(Namespaces_1$4.NS_SID_0, 'origin-id', 'id')
    }),
    {
        aliases: [{ path: 'message.stanzaIds', multiple: true }],
        element: 'stanza-id',
        fields: {
            by: (0, jxt_1$7.JIDAttribute)('by'),
            id: (0, jxt_1$7.attribute)('id')
        },
        namespace: Namespaces_1$4.NS_SID_0
    }
];
xep0359.default = Protocol$4;

var xep0363 = {};

// ====================================================================
// XEP-0363: HTTP File Upload
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0363.html
// Version: 0.5.0 (2018-02-15)
// ====================================================================
Object.defineProperty(xep0363, "__esModule", { value: true });
const jxt_1$6 = jxt;
const Namespaces_1$3 = Namespaces;
const Protocol$3 = [
    (0, jxt_1$6.extendStanzaError)({
        httpUploadError: (0, jxt_1$6.childEnum)(Namespaces_1$3.NS_HTTP_UPLOAD_0, ['file-too-large', 'retry']),
        httpUploadMaxFileSize: (0, jxt_1$6.deepChildInteger)([
            { namespace: Namespaces_1$3.NS_HTTP_UPLOAD_0, element: 'file-too-large' },
            { namespace: Namespaces_1$3.NS_HTTP_UPLOAD_0, element: 'max-file-size' }
        ]),
        httpUploadRetry: (0, jxt_1$6.childDateAttribute)(Namespaces_1$3.NS_HTTP_UPLOAD_0, 'retry', 'stamp')
    }),
    {
        element: 'request',
        fields: {
            mediaType: (0, jxt_1$6.attribute)('content-type'),
            name: (0, jxt_1$6.attribute)('filename'),
            size: (0, jxt_1$6.integerAttribute)('size')
        },
        namespace: Namespaces_1$3.NS_HTTP_UPLOAD_0,
        path: 'iq.httpUpload',
        type: 'request',
        typeField: 'type'
    },
    {
        element: 'slot',
        fields: {
            download: (0, jxt_1$6.childAttribute)(null, 'get', 'url')
        },
        namespace: Namespaces_1$3.NS_HTTP_UPLOAD_0,
        path: 'iq.httpUpload',
        type: 'slot'
    },
    {
        aliases: [{ path: 'iq.httpUpload.upload', selector: 'slot' }],
        element: 'put',
        fields: {
            url: (0, jxt_1$6.attribute)('url')
        },
        namespace: Namespaces_1$3.NS_HTTP_UPLOAD_0
    },
    {
        aliases: [{ path: 'iq.httpUpload.upload.headers', multiple: true }],
        element: 'header',
        fields: {
            name: (0, jxt_1$6.attribute)('name'),
            value: (0, jxt_1$6.text)()
        },
        namespace: Namespaces_1$3.NS_HTTP_UPLOAD_0
    }
];
xep0363.default = Protocol$3;

var xep0380 = {};

// ====================================================================
// XEP-0380: Explicit Message Encryption
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0380.html
// Version: 0.2.0 (2018-01-25)
// ====================================================================
Object.defineProperty(xep0380, "__esModule", { value: true });
const jxt_1$5 = jxt;
const Namespaces_1$2 = Namespaces;
const Protocol$2 = {
    element: 'encryption',
    fields: {
        id: (0, jxt_1$5.attribute)('namespace'),
        name: (0, jxt_1$5.attribute)('name')
    },
    namespace: Namespaces_1$2.NS_EME_0,
    path: 'message.encryptionMethod'
};
xep0380.default = Protocol$2;

var xep0384 = {};

// ====================================================================
// XEP-0384: OMEMO Encryption
// --------------------------------------------------------------------
// Source: https://xmpp.org/extensions/xep-0384.html
// Version: 0.3.0 (2018-07-31)
// ====================================================================
Object.defineProperty(xep0384, "__esModule", { value: true });
const jxt_1$4 = jxt;
const Namespaces_1$1 = Namespaces;
const Protocol$1 = [
    {
        aliases: ['message.omemo'],
        element: 'encrypted',
        fields: {
            payload: (0, jxt_1$4.childTextBuffer)(null, 'payload', 'base64')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL,
        path: 'omemo'
    },
    {
        element: 'header',
        fields: {
            iv: (0, jxt_1$4.childTextBuffer)(null, 'iv', 'base64'),
            sid: (0, jxt_1$4.integerAttribute)('sid')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL,
        path: 'omemo.header'
    },
    {
        aliases: [{ path: 'omemo.header.keys', multiple: true }],
        element: 'key',
        fields: {
            preKey: (0, jxt_1$4.booleanAttribute)('prekey'),
            rid: (0, jxt_1$4.integerAttribute)('rid'),
            value: (0, jxt_1$4.textBuffer)('base64')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL
    },
    {
        aliases: (0, jxt_1$4.pubsubItemContentAliases)(),
        element: 'list',
        fields: {
            devices: (0, jxt_1$4.multipleChildIntegerAttribute)(null, 'device', 'id')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL,
        type: Namespaces_1$1.NS_OMEMO_AXOLOTL_DEVICELIST,
        typeField: 'itemType'
    },
    {
        element: 'preKeyPublic',
        fields: {
            id: (0, jxt_1$4.integerAttribute)('preKeyId'),
            value: (0, jxt_1$4.textBuffer)('base64')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL,
        path: 'omemoPreKey'
    },
    {
        element: 'signedPreKeyPublic',
        fields: {
            id: (0, jxt_1$4.integerAttribute)('signedPreKeyId'),
            value: (0, jxt_1$4.textBuffer)('base64')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL,
        path: 'omemoDevice.signedPreKeyPublic'
    },
    {
        aliases: (0, jxt_1$4.pubsubItemContentAliases)(),
        element: 'bundle',
        fields: {
            identityKey: (0, jxt_1$4.childTextBuffer)(null, 'identityKey', 'base64'),
            preKeys: (0, jxt_1$4.splicePath)(null, 'prekeys', 'omemoPreKey', true),
            signedPreKeySignature: (0, jxt_1$4.childTextBuffer)(null, 'signedPreKeySignature', 'base64')
        },
        namespace: Namespaces_1$1.NS_OMEMO_AXOLOTL,
        path: 'omemoDevice',
        type: Namespaces_1$1.NS_OMEMO_AXOLOTL_BUNDLES,
        typeField: 'itemType'
    }
];
xep0384.default = Protocol$1;

var xrd = {};

// ====================================================================
// Extensible Resource Descriptor (XRD)
// --------------------------------------------------------------------
// Source: http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html
// Version: 1.0
// ====================================================================
Object.defineProperty(xrd, "__esModule", { value: true });
const jxt_1$3 = jxt;
const Namespaces_1 = Namespaces;
const Protocol = [
    {
        element: 'XRD',
        fields: {
            subject: (0, jxt_1$3.childText)(null, 'Subject')
        },
        namespace: Namespaces_1.NS_XRD,
        path: 'xrd'
    },
    {
        aliases: [{ path: 'xrd.links', multiple: true }],
        element: 'Link',
        fields: {
            href: (0, jxt_1$3.attribute)('href'),
            rel: (0, jxt_1$3.attribute)('rel'),
            type: (0, jxt_1$3.attribute)('type')
        },
        namespace: Namespaces_1.NS_XRD
    }
];
xrd.default = Protocol;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const tslib_1 = require$$0;
	// ====================================================================
	(0, tslib_1.__exportStar)(rfc3921, exports);
	(0, tslib_1.__exportStar)(rfc4287, exports);
	(0, tslib_1.__exportStar)(rfc6120, exports);
	(0, tslib_1.__exportStar)(rfc6121, exports);
	(0, tslib_1.__exportStar)(rfc7395, exports);
	(0, tslib_1.__exportStar)(xep0004, exports);
	(0, tslib_1.__exportStar)(xep0012, exports);
	(0, tslib_1.__exportStar)(xep0016, exports);
	(0, tslib_1.__exportStar)(xep0030, exports);
	(0, tslib_1.__exportStar)(xep0033, exports);
	(0, tslib_1.__exportStar)(xep0045, exports);
	(0, tslib_1.__exportStar)(xep0047, exports);
	(0, tslib_1.__exportStar)(xep0048, exports);
	(0, tslib_1.__exportStar)(xep0049, exports);
	(0, tslib_1.__exportStar)(xep0050, exports);
	(0, tslib_1.__exportStar)(xep0054, exports);
	(0, tslib_1.__exportStar)(xep0055, exports);
	(0, tslib_1.__exportStar)(xep0059, exports);
	(0, tslib_1.__exportStar)(xep0060, exports);
	(0, tslib_1.__exportStar)(xep0065, exports);
	(0, tslib_1.__exportStar)(xep0066, exports);
	(0, tslib_1.__exportStar)(xep0071, exports);
	(0, tslib_1.__exportStar)(xep0077, exports);
	(0, tslib_1.__exportStar)(xep0080, exports);
	(0, tslib_1.__exportStar)(xep0084, exports);
	(0, tslib_1.__exportStar)(xep0085, exports);
	(0, tslib_1.__exportStar)(xep0092, exports);
	(0, tslib_1.__exportStar)(xep0107, exports);
	(0, tslib_1.__exportStar)(xep0108, exports);
	(0, tslib_1.__exportStar)(xep0114, exports);
	(0, tslib_1.__exportStar)(xep0115, exports);
	(0, tslib_1.__exportStar)(xep0118, exports);
	(0, tslib_1.__exportStar)(xep0141, exports);
	(0, tslib_1.__exportStar)(xep0124, exports);
	(0, tslib_1.__exportStar)(xep0131, exports);
	(0, tslib_1.__exportStar)(xep0138, exports);
	(0, tslib_1.__exportStar)(xep0144, exports);
	(0, tslib_1.__exportStar)(xep0153, exports);
	(0, tslib_1.__exportStar)(xep0158, exports);
	(0, tslib_1.__exportStar)(xep0166, exports);
	(0, tslib_1.__exportStar)(xep0167, exports);
	(0, tslib_1.__exportStar)(xep0172, exports);
	(0, tslib_1.__exportStar)(xep0176, exports);
	(0, tslib_1.__exportStar)(xep0177, exports);
	(0, tslib_1.__exportStar)(xep0184, exports);
	(0, tslib_1.__exportStar)(xep0186, exports);
	(0, tslib_1.__exportStar)(xep0191, exports);
	(0, tslib_1.__exportStar)(xep0198, exports);
	(0, tslib_1.__exportStar)(xep0199, exports);
	(0, tslib_1.__exportStar)(xep0202, exports);
	(0, tslib_1.__exportStar)(xep0203, exports);
	(0, tslib_1.__exportStar)(xep0215, exports);
	(0, tslib_1.__exportStar)(xep0221, exports);
	(0, tslib_1.__exportStar)(xep0224, exports);
	(0, tslib_1.__exportStar)(xep0231, exports);
	(0, tslib_1.__exportStar)(xep0234, exports);
	(0, tslib_1.__exportStar)(xep0247, exports);
	(0, tslib_1.__exportStar)(xep0260, exports);
	(0, tslib_1.__exportStar)(xep0261, exports);
	(0, tslib_1.__exportStar)(xep0264, exports);
	(0, tslib_1.__exportStar)(xep0280, exports);
	(0, tslib_1.__exportStar)(xep0297, exports);
	(0, tslib_1.__exportStar)(xep0300, exports);
	(0, tslib_1.__exportStar)(xep0301, exports);
	(0, tslib_1.__exportStar)(xep0308, exports);
	(0, tslib_1.__exportStar)(xep0313, exports);
	(0, tslib_1.__exportStar)(xep0317, exports);
	(0, tslib_1.__exportStar)(xep0319, exports);
	(0, tslib_1.__exportStar)(xep0320, exports);
	(0, tslib_1.__exportStar)(xep0333, exports);
	(0, tslib_1.__exportStar)(xep0334, exports);
	(0, tslib_1.__exportStar)(xep0335, exports);
	(0, tslib_1.__exportStar)(xep0338, exports);
	(0, tslib_1.__exportStar)(xep0343, exports);
	(0, tslib_1.__exportStar)(xep0352, exports);
	(0, tslib_1.__exportStar)(xep0357, exports);
	(0, tslib_1.__exportStar)(xep0359, exports);
	(0, tslib_1.__exportStar)(xep0363, exports);
	(0, tslib_1.__exportStar)(xep0380, exports);
	(0, tslib_1.__exportStar)(xep0384, exports);
	(0, tslib_1.__exportStar)(xrd, exports);
	const rfc3921_1 = (0, tslib_1.__importDefault)(rfc3921);
	const rfc4287_1 = (0, tslib_1.__importDefault)(rfc4287);
	const rfc6120_1 = (0, tslib_1.__importDefault)(rfc6120);
	const rfc6121_1 = (0, tslib_1.__importDefault)(rfc6121);
	const rfc7395_1 = (0, tslib_1.__importDefault)(rfc7395);
	const xep0004_1 = (0, tslib_1.__importDefault)(xep0004);
	const xep0012_1 = (0, tslib_1.__importDefault)(xep0012);
	const xep0016_1 = (0, tslib_1.__importDefault)(xep0016);
	const xep0030_1 = (0, tslib_1.__importDefault)(xep0030);
	const xep0033_1 = (0, tslib_1.__importDefault)(xep0033);
	const xep0045_1 = (0, tslib_1.__importDefault)(xep0045);
	const xep0047_1 = (0, tslib_1.__importDefault)(xep0047);
	const xep0048_1 = (0, tslib_1.__importDefault)(xep0048);
	const xep0049_1 = (0, tslib_1.__importDefault)(xep0049);
	const xep0050_1 = (0, tslib_1.__importDefault)(xep0050);
	const xep0054_1 = (0, tslib_1.__importDefault)(xep0054);
	const xep0055_1 = (0, tslib_1.__importDefault)(xep0055);
	const xep0059_1 = (0, tslib_1.__importDefault)(xep0059);
	const xep0060_1 = (0, tslib_1.__importDefault)(xep0060);
	const xep0065_1 = (0, tslib_1.__importDefault)(xep0065);
	const xep0066_1 = (0, tslib_1.__importDefault)(xep0066);
	const xep0071_1 = (0, tslib_1.__importDefault)(xep0071);
	const xep0077_1 = (0, tslib_1.__importDefault)(xep0077);
	const xep0080_1 = (0, tslib_1.__importDefault)(xep0080);
	const xep0084_1 = (0, tslib_1.__importDefault)(xep0084);
	const xep0085_1 = (0, tslib_1.__importDefault)(xep0085);
	const xep0092_1 = (0, tslib_1.__importDefault)(xep0092);
	const xep0107_1 = (0, tslib_1.__importDefault)(xep0107);
	const xep0108_1 = (0, tslib_1.__importDefault)(xep0108);
	const xep0114_1 = (0, tslib_1.__importDefault)(xep0114);
	const xep0115_1 = (0, tslib_1.__importDefault)(xep0115);
	const xep0118_1 = (0, tslib_1.__importDefault)(xep0118);
	const xep0124_1 = (0, tslib_1.__importDefault)(xep0124);
	const xep0131_1 = (0, tslib_1.__importDefault)(xep0131);
	const xep0138_1 = (0, tslib_1.__importDefault)(xep0138);
	const xep0141_1 = (0, tslib_1.__importDefault)(xep0141);
	const xep0144_1 = (0, tslib_1.__importDefault)(xep0144);
	const xep0153_1 = (0, tslib_1.__importDefault)(xep0153);
	const xep0158_1 = (0, tslib_1.__importDefault)(xep0158);
	const xep0166_1 = (0, tslib_1.__importDefault)(xep0166);
	const xep0167_1 = (0, tslib_1.__importDefault)(xep0167);
	const xep0172_1 = (0, tslib_1.__importDefault)(xep0172);
	const xep0176_1 = (0, tslib_1.__importDefault)(xep0176);
	const xep0177_1 = (0, tslib_1.__importDefault)(xep0177);
	const xep0184_1 = (0, tslib_1.__importDefault)(xep0184);
	const xep0186_1 = (0, tslib_1.__importDefault)(xep0186);
	const xep0191_1 = (0, tslib_1.__importDefault)(xep0191);
	const xep0198_1 = (0, tslib_1.__importDefault)(xep0198);
	const xep0199_1 = (0, tslib_1.__importDefault)(xep0199);
	const xep0202_1 = (0, tslib_1.__importDefault)(xep0202);
	const xep0203_1 = (0, tslib_1.__importDefault)(xep0203);
	const xep0215_1 = (0, tslib_1.__importDefault)(xep0215);
	const xep0221_1 = (0, tslib_1.__importDefault)(xep0221);
	const xep0224_1 = (0, tslib_1.__importDefault)(xep0224);
	const xep0231_1 = (0, tslib_1.__importDefault)(xep0231);
	const xep0234_1 = (0, tslib_1.__importDefault)(xep0234);
	const xep0247_1 = (0, tslib_1.__importDefault)(xep0247);
	const xep0260_1 = (0, tslib_1.__importDefault)(xep0260);
	const xep0261_1 = (0, tslib_1.__importDefault)(xep0261);
	const xep0264_1 = (0, tslib_1.__importDefault)(xep0264);
	const xep0280_1 = (0, tslib_1.__importDefault)(xep0280);
	const xep0297_1 = (0, tslib_1.__importDefault)(xep0297);
	const xep0300_1 = (0, tslib_1.__importDefault)(xep0300);
	const xep0301_1 = (0, tslib_1.__importDefault)(xep0301);
	const xep0308_1 = (0, tslib_1.__importDefault)(xep0308);
	const xep0313_1 = (0, tslib_1.__importDefault)(xep0313);
	const xep0317_1 = (0, tslib_1.__importDefault)(xep0317);
	const xep0319_1 = (0, tslib_1.__importDefault)(xep0319);
	const xep0320_1 = (0, tslib_1.__importDefault)(xep0320);
	const xep0333_1 = (0, tslib_1.__importDefault)(xep0333);
	const xep0334_1 = (0, tslib_1.__importDefault)(xep0334);
	const xep0335_1 = (0, tslib_1.__importDefault)(xep0335);
	const xep0338_1 = (0, tslib_1.__importDefault)(xep0338);
	const xep0343_1 = (0, tslib_1.__importDefault)(xep0343);
	const xep0352_1 = (0, tslib_1.__importDefault)(xep0352);
	const xep0357_1 = (0, tslib_1.__importDefault)(xep0357);
	const xep0359_1 = (0, tslib_1.__importDefault)(xep0359);
	const xep0363_1 = (0, tslib_1.__importDefault)(xep0363);
	const xep0380_1 = (0, tslib_1.__importDefault)(xep0380);
	const xep0384_1 = (0, tslib_1.__importDefault)(xep0384);
	const xrd_1 = (0, tslib_1.__importDefault)(xrd);
	const Protocol = [
	    rfc3921_1.default,
	    rfc4287_1.default,
	    rfc6120_1.default,
	    rfc6121_1.default,
	    rfc7395_1.default,
	    xep0004_1.default,
	    xep0012_1.default,
	    xep0016_1.default,
	    xep0030_1.default,
	    xep0033_1.default,
	    xep0045_1.default,
	    xep0047_1.default,
	    xep0048_1.default,
	    xep0049_1.default,
	    xep0050_1.default,
	    xep0054_1.default,
	    xep0055_1.default,
	    xep0059_1.default,
	    xep0060_1.default,
	    xep0065_1.default,
	    xep0066_1.default,
	    xep0071_1.default,
	    xep0077_1.default,
	    xep0080_1.default,
	    xep0084_1.default,
	    xep0085_1.default,
	    xep0092_1.default,
	    xep0107_1.default,
	    xep0108_1.default,
	    xep0114_1.default,
	    xep0115_1.default,
	    xep0118_1.default,
	    xep0124_1.default,
	    xep0131_1.default,
	    xep0138_1.default,
	    xep0141_1.default,
	    xep0144_1.default,
	    xep0153_1.default,
	    xep0158_1.default,
	    xep0166_1.default,
	    xep0167_1.default,
	    xep0172_1.default,
	    xep0176_1.default,
	    xep0177_1.default,
	    xep0184_1.default,
	    xep0186_1.default,
	    xep0191_1.default,
	    xep0198_1.default,
	    xep0199_1.default,
	    xep0202_1.default,
	    xep0203_1.default,
	    xep0215_1.default,
	    xep0221_1.default,
	    xep0224_1.default,
	    xep0231_1.default,
	    xep0234_1.default,
	    xep0247_1.default,
	    xep0260_1.default,
	    xep0261_1.default,
	    xep0264_1.default,
	    xep0280_1.default,
	    xep0297_1.default,
	    xep0300_1.default,
	    xep0301_1.default,
	    xep0308_1.default,
	    xep0313_1.default,
	    xep0317_1.default,
	    xep0319_1.default,
	    xep0320_1.default,
	    xep0333_1.default,
	    xep0334_1.default,
	    xep0335_1.default,
	    xep0338_1.default,
	    xep0343_1.default,
	    xep0352_1.default,
	    xep0357_1.default,
	    xep0359_1.default,
	    xep0363_1.default,
	    xep0380_1.default,
	    xep0384_1.default,
	    xrd_1.default
	];
	exports.default = Protocol;
} (protocol));

var bosh = {};

Object.defineProperty(bosh, "__esModule", { value: true });
const Constants_1$1 = Constants;
const platform_1$2 = browser;
const jxt_1$2 = jxt;
const Utils_1$2 = Utils;
class RequestChannel {
    constructor(stream) {
        this.active = false;
        this.maxRetries = 5;
        this.stream = stream;
        this.maxTimeout = 1000 * 1.1 * this.stream.maxWaitTime;
    }
    async send(rid, body) {
        this.rid = rid;
        this.active = true;
        let attempts = 0;
        while (attempts <= this.maxRetries) {
            attempts += 1;
            try {
                const res = await (0, Utils_1$2.timeoutPromise)((0, platform_1$2.fetch)(this.stream.url, {
                    body,
                    headers: {
                        'Content-Type': this.stream.contentType
                    },
                    method: 'POST'
                }), this.maxTimeout, () => new Error('Request timed out'));
                if (!res.ok) {
                    throw new Error('HTTP Status Error: ' + res.status);
                }
                const result = await res.text();
                this.active = false;
                return result;
            }
            catch (err) {
                if (attempts === 1) {
                    continue;
                }
                else if (attempts < this.maxRetries) {
                    const backoff = Math.min(this.maxTimeout, Math.pow(attempts, 2) * 1000);
                    await (0, Utils_1$2.sleep)(backoff + Math.random() * 1000);
                    continue;
                }
                else {
                    this.active = false;
                    throw err;
                }
            }
        }
        throw new Error('Request failed');
    }
}
class BOSH extends platform_1$2.Duplex {
    constructor(client, sm, stanzas) {
        super({
            objectMode: true
        });
        this.rid = Math.floor(Math.random() * 0xffffffff);
        this.sid = '';
        this.maxHoldOpen = 2;
        this.maxWaitTime = 30;
        this.contentType = 'text/xml; charset=utf-8';
        this.channels = [new RequestChannel(this), new RequestChannel(this)];
        this.activeChannelID = 0;
        this.queue = [];
        this.isEnded = false;
        this.client = client;
        this.sm = sm;
        this.stanzas = stanzas;
        this.on('data', e => {
            this.client.emit('stream:data', e.stanza, e.kind);
        });
        this.on('end', () => {
            this.isEnded = true;
            clearTimeout(this.idleTimeout);
            if (this.client.transport === this) {
                this.client.emit('--transport-disconnected');
            }
        });
    }
    _write(chunk, encoding, done) {
        this.queue.push([chunk, done]);
        this.scheduleRequests();
    }
    _writev(chunks, done) {
        this.queue.push([chunks.map(c => c.chunk).join(''), done]);
        this.scheduleRequests();
    }
    _read() {
        return;
    }
    process(result) {
        const parser = new jxt_1$2.StreamParser({
            acceptLanguages: this.config.acceptLanguages,
            allowComments: false,
            lang: this.config.lang,
            registry: this.stanzas,
            rootKey: 'bosh',
            wrappedStream: true
        });
        parser.on('error', (err) => {
            const streamError = {
                condition: Constants_1$1.StreamErrorCondition.InvalidXML
            };
            this.client.emit('stream:error', streamError, err);
            this.send('error', streamError);
            return this.disconnect();
        });
        parser.on('data', (e) => {
            if (e.event === 'stream-start') {
                this.stream = e.stanza;
                if (e.stanza.type === 'terminate') {
                    this.hasStream = false;
                    this.rid = undefined;
                    this.sid = undefined;
                    if (!this.isEnded) {
                        this.isEnded = true;
                        this.client.emit('bosh:terminate', e.stanza);
                        this.client.emit('stream:end');
                        this.push(null);
                    }
                }
                else if (!this.hasStream) {
                    this.hasStream = true;
                    this.stream = e.stanza;
                    this.sid = e.stanza.sid || this.sid;
                    this.maxWaitTime = e.stanza.maxWaitTime || this.maxWaitTime;
                    this.client.emit('stream:start', e.stanza);
                }
                return;
            }
            if (!e.event) {
                this.push({ kind: e.kind, stanza: e.stanza });
            }
        });
        this.client.emit('raw', 'incoming', result);
        parser.write(result);
        this.scheduleRequests();
    }
    connect(opts) {
        this.config = opts;
        this.url = opts.url;
        if (opts.rid) {
            this.rid = opts.rid;
        }
        if (opts.sid) {
            this.sid = opts.sid;
        }
        if (opts.wait) {
            this.maxWaitTime = opts.wait;
        }
        if (opts.maxHoldOpen) {
            this.maxHoldOpen = opts.maxHoldOpen;
        }
        if (this.sid) {
            this.hasStream = true;
            this.stream = {};
            this.client.emit('connected');
            this.client.emit('session:prebind', this.config.jid);
            this.client.emit('session:started');
            return;
        }
        this._send({
            lang: opts.lang,
            maxHoldOpen: this.maxHoldOpen,
            maxWaitTime: this.maxWaitTime,
            to: opts.server,
            version: '1.6',
            xmppVersion: '1.0'
        });
    }
    restart() {
        this.hasStream = false;
        this._send({
            to: this.config.server,
            xmppRestart: true
        });
    }
    disconnect(clean = true) {
        if (this.hasStream && clean) {
            this._send({
                type: 'terminate'
            });
        }
        else {
            this.stream = undefined;
            this.sid = undefined;
            this.rid = undefined;
            this.client.emit('--transport-disconnected');
        }
    }
    async send(dataOrName, data) {
        var _a;
        let output;
        if (data) {
            output = (_a = this.stanzas.export(dataOrName, data)) === null || _a === void 0 ? void 0 : _a.toString();
        }
        if (!output) {
            return;
        }
        return new Promise((resolve, reject) => {
            this.write(output, 'utf8', err => (err ? reject(err) : resolve()));
        });
    }
    get sendingChannel() {
        return this.channels[this.activeChannelID];
    }
    get pollingChannel() {
        return this.channels[this.activeChannelID === 0 ? 1 : 0];
    }
    toggleChannel() {
        this.activeChannelID = this.activeChannelID === 0 ? 1 : 0;
    }
    async _send(boshData, payload = '') {
        if (this.isEnded) {
            return;
        }
        const rid = this.rid++;
        const header = this.stanzas.export('bosh', {
            ...boshData,
            rid,
            sid: this.sid
        });
        let body;
        if (payload) {
            body = [header.openTag(), payload, header.closeTag()].join('');
        }
        else {
            body = header.toString();
        }
        this.client.emit('raw', 'outgoing', body);
        this.sendingChannel
            .send(rid, body)
            .then(result => {
            this.process(result);
        })
            .catch(err => {
            this.end(err);
        });
        this.toggleChannel();
    }
    async _poll() {
        if (this.isEnded) {
            return;
        }
        const rid = this.rid++;
        const body = this.stanzas
            .export('bosh', {
            rid,
            sid: this.sid
        })
            .toString();
        this.client.emit('raw', 'outgoing', body);
        this.pollingChannel
            .send(rid, body)
            .then(result => {
            this.process(result);
        })
            .catch(err => {
            this.end(err);
        });
    }
    scheduleRequests() {
        clearTimeout(this.idleTimeout);
        this.idleTimeout = setTimeout(() => {
            this.fireRequests();
        }, 10);
    }
    fireRequests() {
        if (this.isEnded) {
            return;
        }
        if (this.queue.length) {
            if (!this.sendingChannel.active) {
                const [data, done] = this.queue.shift();
                this._send({}, data);
                done();
            }
            else {
                this.scheduleRequests();
            }
            return;
        }
        if (this.authenticated && !(this.channels[0].active || this.channels[1].active)) {
            this._poll();
        }
    }
}
bosh.default = BOSH;

var websocket = {};

Object.defineProperty(websocket, "__esModule", { value: true });
const Constants_1 = Constants;
const jxt_1$1 = jxt;
const platform_1$1 = browser;
const WS_OPEN = 1;
class WSConnection extends platform_1$1.Duplex {
    constructor(client, sm, stanzas) {
        super({ objectMode: true });
        this.sm = sm;
        this.stanzas = stanzas;
        this.closing = false;
        this.client = client;
        this.on('data', e => {
            this.client.emit('stream:data', e.stanza, e.kind);
        });
        this.on('error', () => {
            this.end();
        });
        this.on('end', () => {
            if (this.client.transport === this) {
                this.client.emit('--transport-disconnected');
            }
        });
    }
    _read() {
        return;
    }
    _write(chunk, encoding, done) {
        if (!this.socket || this.socket.readyState !== WS_OPEN) {
            return done(new Error('Socket closed'));
        }
        const data = platform_1$1.Buffer.from(chunk, 'utf8').toString();
        this.client.emit('raw', 'outgoing', data);
        this.socket.send(data);
        done();
    }
    connect(opts) {
        this.config = opts;
        this.hasStream = false;
        this.closing = false;
        this.parser = new jxt_1$1.StreamParser({
            acceptLanguages: this.config.acceptLanguages,
            allowComments: false,
            lang: this.config.lang,
            registry: this.stanzas,
            wrappedStream: false
        });
        this.parser.on('data', (e) => {
            const name = e.kind;
            const stanzaObj = e.stanza;
            if (name === 'stream') {
                if (stanzaObj.action === 'open') {
                    this.hasStream = true;
                    this.stream = stanzaObj;
                    return this.client.emit('stream:start', stanzaObj);
                }
                if (stanzaObj.action === 'close') {
                    this.client.emit('stream:end');
                    return this.disconnect();
                }
            }
            this.push({ kind: e.kind, stanza: e.stanza });
        });
        this.parser.on('error', (err) => {
            const streamError = {
                condition: Constants_1.StreamErrorCondition.InvalidXML
            };
            this.client.emit('stream:error', streamError, err);
            this.write(this.stanzas.export('error', streamError).toString());
            return this.disconnect();
        });
        this.socket = new platform_1$1.WebSocket(opts.url, 'xmpp');
        this.socket.onopen = () => {
            this.emit('connect');
            this.sm.started = false;
            this.client.emit('connected');
            this.write(this.startHeader());
        };
        this.socket.onmessage = wsMsg => {
            const data = platform_1$1.Buffer.from(wsMsg.data, 'utf8').toString();
            this.client.emit('raw', 'incoming', data);
            if (this.parser) {
                this.parser.write(data);
            }
        };
        this.socket.onclose = () => {
            this.push(null);
        };
        this.socket.onerror = err => {
            console.error(err);
            this.push(null);
        };
    }
    disconnect(clean = true) {
        if (this.socket && !this.closing && this.hasStream && clean) {
            this.closing = true;
            this.write(this.closeHeader());
        }
        else {
            this.hasStream = false;
            this.stream = undefined;
            if (this.socket) {
                this.end();
                this.socket.close();
                if (this.client.transport === this) {
                    this.client.emit('--transport-disconnected');
                }
            }
            this.socket = undefined;
        }
    }
    async send(dataOrName, data) {
        var _a;
        let output;
        if (data) {
            output = (_a = this.stanzas.export(dataOrName, data)) === null || _a === void 0 ? void 0 : _a.toString();
        }
        if (!output) {
            return;
        }
        return new Promise((resolve, reject) => {
            this.write(output, 'utf8', err => (err ? reject(err) : resolve()));
        });
    }
    restart() {
        this.hasStream = false;
        this.write(this.startHeader());
    }
    startHeader() {
        const header = this.stanzas.export('stream', {
            action: 'open',
            lang: this.config.lang,
            to: this.config.server,
            version: '1.0'
        });
        return header.toString();
    }
    closeHeader() {
        const header = this.stanzas.export('stream', {
            action: 'close'
        });
        return header.toString();
    }
}
websocket.default = WSConnection;

var NetworkDiscovery$1 = {};

Object.defineProperty(NetworkDiscovery$1, "__esModule", { value: true });
const tslib_1$2 = require$$0;
const platform_1 = browser;
const Utils_1$1 = Utils;
const jxt_1 = jxt;
const xrd_1 = (0, tslib_1$2.__importDefault)(xrd);
class NetworkDiscovery {
    constructor() {
        this.hostMetaCache = new Map();
        this.hostMetaTTL = 30000;
        this.resolver = (0, platform_1.createResolver)();
        this.registry = new jxt_1.Registry();
        this.registry.define(xrd_1.default);
    }
    async getHostMeta(domain) {
        const cached = this.hostMetaCache.get(domain);
        if (cached) {
            if (cached.created + this.hostMetaTTL < Date.now()) {
                return cached.hostmeta;
            }
            else {
                this.hostMetaCache.delete(domain);
            }
        }
        const hostmeta = (0, Utils_1$1.promiseAny)([
            (0, platform_1.fetch)(`https://${domain}/.well-known/host-meta.json`).then(async (res) => {
                if (!res.ok) {
                    throw new Error('could-not-fetch-json');
                }
                return res.json();
            }),
            (0, platform_1.fetch)(`https://${domain}/.well-known/host-meta`).then(async (res) => {
                if (!res.ok) {
                    throw new Error('could-not-fetch-xml');
                }
                const data = await res.text();
                const xml = (0, jxt_1.parse)(data);
                if (xml) {
                    return this.registry.import(xml);
                }
                else {
                    throw new Error('could-not-import-xml');
                }
            })
        ]);
        this.hostMetaCache.set(domain, { created: Date.now(), hostmeta });
        hostmeta.catch(() => {
            this.hostMetaCache.delete(domain);
        });
        return hostmeta;
    }
    async resolveTXT(domain) {
        var _a, _b;
        return (_b = (_a = this.resolver) === null || _a === void 0 ? void 0 : _a.resolveTxt(domain)) !== null && _b !== void 0 ? _b : [];
    }
    async resolve(domain, defaultPort, opts = {}) {
        if (!this.resolver) {
            return [];
        }
        let candidates = [];
        let allowFallback = true;
        if (opts.srvType) {
            const srvResults = await this.resolveWeightedSRV(domain, opts.srvType, opts.srvTypeSecure);
            allowFallback = srvResults.allowFallback;
            candidates = srvResults.records.map(record => ({
                host: record.name,
                port: record.port,
                secure: record.secure
            }));
        }
        if (allowFallback) {
            candidates.push({ host: domain, port: defaultPort });
        }
        return candidates;
    }
    async resolveWeightedSRV(domain, srvType, srvTypeSecure) {
        const [records, secureRecords] = await Promise.all([
            this.resolveSRV(domain, srvType),
            srvTypeSecure
                ? this.resolveSRV(domain, srvTypeSecure, true)
                : Promise.resolve({ records: [], allowFallback: false })
        ]);
        const allRecords = [...records.records, ...secureRecords.records];
        const priorities = new Map();
        let id = 0;
        for (const record of allRecords) {
            record.id = id++;
            record.runningSum = 0;
            if (!priorities.has(record.priority)) {
                priorities.set(record.priority, []);
            }
            const priorityGroup = priorities.get(record.priority);
            priorityGroup.push(record);
        }
        const weightRecords = (unweightedRecords) => {
            const sorted = [];
            while (sorted.length < unweightedRecords.length) {
                const ordered = (0, Utils_1$1.shuffle)(unweightedRecords.filter(record => record.weight === 0 && !record.used));
                const unordered = (0, Utils_1$1.shuffle)(unweightedRecords.filter(record => {
                    return record.weight !== 0 && !record.used;
                }));
                let weightSum = 0;
                for (const record of unordered) {
                    weightSum += record.weight;
                    record.runningSum = weightSum;
                    ordered.push(record);
                }
                const selector = Math.floor(Math.random() * (weightSum + 1));
                for (const record of ordered) {
                    if (record.runningSum >= selector) {
                        record.used = true;
                        sorted.push(record);
                        break;
                    }
                }
            }
            return sorted;
        };
        let sortedRecords = [];
        for (const priority of Array.from(priorities.keys()).sort((a, b) => a < b ? -1 : a > b ? 1 : 0)) {
            const priorityGroup = priorities.get(priority);
            sortedRecords = sortedRecords.concat(weightRecords(priorityGroup));
        }
        return {
            records: sortedRecords,
            allowFallback: records.allowFallback
        };
    }
    async resolveSRV(domain, srvType, secure) {
        var _a, _b;
        try {
            const records = (_b = (await ((_a = this.resolver) === null || _a === void 0 ? void 0 : _a.resolveSrv(`${srvType}.${domain}`)))) !== null && _b !== void 0 ? _b : [];
            if (records.length === 1 && (records[0].name === '.' || records[0].name === '')) {
                return { records: [], allowFallback: false };
            }
            return {
                records: records
                    .map(record => ({ secure, ...record }))
                    .filter(record => record.name !== '' && record.name !== '.'),
                allowFallback: false
            };
        }
        catch (_c) {
            return {
                records: [],
                allowFallback: true
            };
        }
    }
}
NetworkDiscovery$1.default = NetworkDiscovery;

Object.defineProperty(Client$2, "__esModule", { value: true });
const tslib_1$1 = require$$0;
const async_1$1 = require$$1;
const events_1 = require$$2;
const StreamManagement_1 = (0, tslib_1$1.__importDefault)(StreamManagement$1);
const JID = (0, tslib_1$1.__importStar)(JID$8);
const JXT = (0, tslib_1$1.__importStar)(jxt);
const SASL = (0, tslib_1$1.__importStar)(sasl$1);
const plugins_1 = plugins;
const protocol_1 = (0, tslib_1$1.__importDefault)(protocol);
const bosh_1 = (0, tslib_1$1.__importDefault)(bosh);
const websocket_1 = (0, tslib_1$1.__importDefault)(websocket);
const Utils_1 = Utils;
const NetworkDiscovery_1 = (0, tslib_1$1.__importDefault)(NetworkDiscovery$1);
class Client$1 extends events_1.EventEmitter {
    constructor(opts = {}) {
        super();
        this.reconnectAttempts = 0;
        this.setMaxListeners(100);
        // Some EventEmitter shims don't include off()
        this.off = this.removeListener;
        this.updateConfig(opts);
        this.jid = '';
        this.sasl = new SASL.Factory();
        this.sasl.register('EXTERNAL', SASL.EXTERNAL, 1000);
        this.sasl.register('SCRAM-SHA-256-PLUS', SASL.SCRAM, 350);
        this.sasl.register('SCRAM-SHA-256', SASL.SCRAM, 300);
        this.sasl.register('SCRAM-SHA-1-PLUS', SASL.SCRAM, 250);
        this.sasl.register('SCRAM-SHA-1', SASL.SCRAM, 200);
        this.sasl.register('DIGEST-MD5', SASL.DIGEST, 100);
        this.sasl.register('OAUTHBEARER', SASL.OAUTH, 100);
        this.sasl.register('X-OAUTH2', SASL.PLAIN, 50);
        this.sasl.register('PLAIN', SASL.PLAIN, 1);
        this.sasl.register('ANONYMOUS', SASL.ANONYMOUS, 0);
        this.stanzas = new JXT.Registry();
        this.stanzas.define(protocol_1.default);
        this.resolver = new NetworkDiscovery_1.default();
        this.use(plugins_1.core);
        this.sm = new StreamManagement_1.default();
        if (this.config.allowResumption !== undefined) {
            this.sm.allowResume = this.config.allowResumption;
        }
        this.sm.on('prebound', jid => {
            this.jid = jid;
            this.emit('session:bound', jid);
        });
        this.on('session:bound', jid => this.sm.bind(jid));
        this.sm.on('send', sm => this.send('sm', sm));
        this.sm.on('acked', acked => this.emit('stanza:acked', acked));
        this.sm.on('failed', failed => this.emit('stanza:failed', failed));
        this.sm.on('hibernated', data => this.emit('stanza:hibernated', data));
        // We disable outgoing processing while stanza resends are queued up
        // to prevent any interleaving.
        this.sm.on('begin-resend', () => this.outgoingDataQueue.pause());
        this.sm.on('resend', ({ kind, stanza }) => this.send(kind, stanza, true));
        this.sm.on('end-resend', () => this.outgoingDataQueue.resume());
        // Create message:* flavors of stanza:* SM events
        for (const type of ['acked', 'hibernated', 'failed']) {
            this.on(`stanza:${type}`, (data) => {
                if (data.kind === 'message') {
                    this.emit(`message:${type}`, data.stanza);
                }
            });
        }
        this.transports = {
            bosh: bosh_1.default,
            websocket: websocket_1.default
        };
        this.incomingDataQueue = (0, async_1$1.priorityQueue)(async (task, done) => {
            const { kind, stanza } = task;
            this.emit(kind, stanza);
            if (stanza.id) {
                this.emit((kind + ':id:' + stanza.id), stanza);
            }
            if (kind === 'message' || kind === 'presence' || kind === 'iq') {
                this.emit('stanza', stanza);
                await this.sm.handle();
            }
            else if (kind === 'sm') {
                if (stanza.type === 'ack') {
                    await this.sm.process(stanza);
                    this.emit('stream:management:ack', stanza);
                }
                if (stanza.type === 'request') {
                    this.sm.ack();
                }
            }
            if (done) {
                done();
            }
        }, 1);
        const handleFailedSend = (kind, stanza) => {
            if (['message', 'presence', 'iq'].includes(kind)) {
                if (!this.sm.started || !this.sm.resumable) {
                    this.emit('stanza:failed', {
                        kind,
                        stanza
                    });
                }
                else if (this.sm.resumable && !this.transport) {
                    this.emit('stanza:hibernated', {
                        kind,
                        stanza
                    });
                }
            }
        };
        this.outgoingDataQueue = (0, async_1$1.priorityQueue)(async (task, done) => {
            var _a;
            const { kind, stanza, replay } = task;
            const ackRequest = replay || (await this.sm.track(kind, stanza));
            if (kind === 'message') {
                if (replay) {
                    this.emit('message:retry', stanza);
                }
                else {
                    this.emit('message:sent', stanza, false);
                }
            }
            if (this.transport) {
                try {
                    await this.transport.send(kind, stanza);
                    if (ackRequest) {
                        (_a = this.transport) === null || _a === void 0 ? void 0 : _a.send('sm', { type: 'request' });
                    }
                }
                catch (err) {
                    console.error(err);
                    handleFailedSend(kind, stanza);
                }
            }
            else {
                handleFailedSend(kind, stanza);
            }
            if (done) {
                done();
            }
        }, 1);
        this.on('stream:data', (json, kind) => {
            this.incomingDataQueue.push({
                kind,
                stanza: json
            }, 0);
        });
        this.on('--transport-disconnected', async () => {
            const drains = [];
            if (!this.incomingDataQueue.idle()) {
                drains.push(this.incomingDataQueue.drain());
            }
            if (!this.outgoingDataQueue.idle()) {
                drains.push(this.outgoingDataQueue.drain());
            }
            await Promise.all(drains);
            await this.sm.hibernate();
            if (this.transport) {
                delete this.transport;
            }
            this.emit('--reset-stream-features');
            if (!this.sessionTerminating && this.config.autoReconnect) {
                this.reconnectAttempts += 1;
                clearTimeout(this.reconnectTimer);
                this.reconnectTimer = setTimeout(() => {
                    this.connect();
                }, 1000 * Math.min(Math.pow(2, this.reconnectAttempts) + Math.random(), this.config.maxReconnectBackoff || 32));
            }
            this.emit('disconnected');
        });
        this.on('iq', (iq) => {
            const iqType = iq.type;
            const payloadType = iq.payloadType;
            const iqEvent = 'iq:' + iqType + ':' + payloadType;
            if (iqType === 'get' || iqType === 'set') {
                if (payloadType === 'invalid-payload-count') {
                    return this.sendIQError(iq, {
                        error: {
                            condition: 'bad-request',
                            type: 'modify'
                        }
                    });
                }
                if (payloadType === 'unknown-payload' || this.listenerCount(iqEvent) === 0) {
                    return this.sendIQError(iq, {
                        error: {
                            condition: 'service-unavailable',
                            type: 'cancel'
                        }
                    });
                }
                this.emit(iqEvent, iq);
            }
        });
        this.on('message', msg => {
            const isChat = (msg.alternateLanguageBodies && msg.alternateLanguageBodies.length) ||
                (msg.links && msg.links.length);
            const isMarker = msg.marker && msg.marker.type !== 'markable';
            if (isChat && !isMarker) {
                if (msg.type === 'chat' || msg.type === 'normal') {
                    this.emit('chat', msg);
                }
                else if (msg.type === 'groupchat') {
                    this.emit('groupchat', msg);
                }
            }
            if (msg.type === 'error') {
                this.emit('message:error', msg);
            }
        });
        this.on('presence', (pres) => {
            let presType = pres.type || 'available';
            if (presType === 'error') {
                presType = 'presence:error';
            }
            this.emit(presType, pres);
        });
        this.on('session:started', () => {
            this.sessionStarting = false;
            this.reconnectAttempts = 0;
            if (this.reconnectTimer) {
                clearTimeout(this.reconnectTimer);
            }
        });
    }
    updateConfig(opts = {}) {
        var _a;
        const currConfig = this.config || {};
        this.config = {
            allowResumption: true,
            jid: '',
            transports: {
                bosh: true,
                websocket: true
            },
            useStreamManagement: true,
            transportPreferenceOrder: ['websocket', 'bosh'],
            ...currConfig,
            ...opts
        };
        if (!this.config.server) {
            this.config.server = JID.getDomain(this.config.jid);
        }
        if (this.config.password) {
            this.config.credentials = this.config.credentials || {};
            this.config.credentials.password = this.config.password;
            delete this.config.password;
        }
        if (!this.config.transportPreferenceOrder) {
            this.config.transportPreferenceOrder = Object.keys((_a = this.config.transports) !== null && _a !== void 0 ? _a : {});
        }
    }
    get stream() {
        return this.transport ? this.transport.stream : undefined;
    }
    emit(name, ...args) {
        // Continue supporting the most common and useful wildcard events
        const res = super.emit(name, ...args);
        if (name === 'raw') {
            super.emit(`raw:${args[0]}`, args[1]);
            super.emit('raw:*', `raw:${args[0]}`, args[1]);
            super.emit('*', `raw:${args[0]}`, args[1]);
        }
        else {
            super.emit('*', name, ...args);
        }
        return res;
    }
    use(pluginInit) {
        if (typeof pluginInit !== 'function') {
            return;
        }
        pluginInit(this, this.stanzas, this.config);
    }
    nextId() {
        return (0, Utils_1.uuid)();
    }
    async getCredentials() {
        return this._getConfiguredCredentials();
    }
    async connect() {
        var _a, _b, _c;
        this.sessionTerminating = false;
        this.sessionStarting = true;
        this.emit('--reset-stream-features');
        if (this.transport) {
            this.transport.disconnect(false);
        }
        const transportPref = (_a = this.config.transportPreferenceOrder) !== null && _a !== void 0 ? _a : [];
        let endpoints;
        for (const name of transportPref) {
            const settings = this.config.transports[name];
            if (!settings || !this.transports[name]) {
                continue;
            }
            let config = {
                acceptLanguages: this.config.acceptLanguages || [(_b = this.config.lang) !== null && _b !== void 0 ? _b : 'en'],
                jid: this.config.jid,
                lang: (_c = this.config.lang) !== null && _c !== void 0 ? _c : 'en',
                server: this.config.server
            };
            const transport = new this.transports[name](this, this.sm, this.stanzas);
            if (typeof settings === 'string') {
                config.url = settings;
            }
            else if (settings == true) {
                if (transport.discoverBindings) {
                    const discovered = await transport.discoverBindings(this.config.server);
                    if (!discovered) {
                        continue;
                    }
                    config = {
                        ...config,
                        ...discovered
                    };
                }
                else {
                    if (!endpoints) {
                        try {
                            endpoints = await this.discoverBindings(this.config.server);
                        }
                        catch (err) {
                            console.error(err);
                            continue;
                        }
                    }
                    endpoints[name] = (endpoints[name] || []).filter(url => url.startsWith('wss:') || url.startsWith('https:'));
                    if (!endpoints[name] || !endpoints[name].length) {
                        continue;
                    }
                    config.url = endpoints[name][0];
                }
            }
            this.transport = transport;
            this.transport.connect(config);
            return;
        }
        console.error('No endpoints found for the requested transports.');
        this.emit('--transport-disconnected');
    }
    async disconnect() {
        this.sessionTerminating = true;
        clearTimeout(this.reconnectTimer);
        this.outgoingDataQueue.pause();
        if (this.sessionStarted && !this.sm.started) {
            // Only emit session:end if we had a session, and we aren't using
            // stream management to keep the session alive.
            this.emit('session:end');
        }
        this.emit('--reset-stream-features');
        this.sessionStarted = false;
        if (this.transport) {
            this.transport.disconnect();
        }
        else {
            this.emit('--transport-disconnected');
        }
        this.outgoingDataQueue.resume();
        if (!this.outgoingDataQueue.idle()) {
            await this.outgoingDataQueue.drain();
        }
        await this.sm.shutdown();
    }
    async send(kind, stanza, replay = false) {
        return new Promise((resolve, reject) => {
            this.outgoingDataQueue.push({ kind, stanza, replay }, replay ? 0 : 1, err => err ? reject(err) : resolve());
        });
    }
    sendMessage(data) {
        const id = data.id || this.nextId();
        const msg = {
            id,
            originId: id,
            ...data
        };
        this.send('message', msg);
        return msg.id;
    }
    sendPresence(data = {}) {
        const pres = {
            id: this.nextId(),
            ...data
        };
        this.send('presence', pres);
        return pres.id;
    }
    sendIQ(data) {
        const iq = {
            id: this.nextId(),
            ...data
        };
        const allowed = JID.allowedResponders(this.jid, data.to);
        const respEvent = 'iq:id:' + iq.id;
        const request = new Promise((resolve, reject) => {
            const handler = (res) => {
                // Only process result from the correct responder
                if (!allowed.has(res.from)) {
                    return;
                }
                // Only process result or error responses, if the responder
                // happened to send us a request using the same ID value at
                // the same time.
                if (res.type !== 'result' && res.type !== 'error') {
                    return;
                }
                this.off(respEvent, handler);
                if (res.type === 'result') {
                    resolve(res);
                }
                else {
                    reject(res);
                }
            };
            this.on(respEvent, handler);
        });
        this.send('iq', iq);
        const timeout = this.config.timeout || 15;
        return (0, Utils_1.timeoutPromise)(request, timeout * 1000, () => ({
            ...iq,
            to: undefined,
            from: undefined,
            error: {
                condition: 'timeout',
                text: `Request timed out after ${timeout} seconds.`
            },
            id: iq.id,
            type: 'error'
        }));
    }
    sendIQResult(original, reply) {
        this.send('iq', {
            ...reply,
            id: original.id,
            to: original.from,
            type: 'result'
        });
    }
    sendIQError(original, error) {
        this.send('iq', {
            ...error,
            id: original.id,
            to: original.from,
            type: 'error'
        });
    }
    sendStreamError(error) {
        this.emit('stream:error', error);
        this.send('error', error);
        this.disconnect();
    }
    _getConfiguredCredentials() {
        const creds = this.config.credentials || {};
        const requestedJID = JID.parse(this.config.jid || '');
        const username = creds.username || requestedJID.local;
        const server = creds.host || requestedJID.domain;
        return {
            host: server,
            password: this.config.password,
            realm: server,
            serviceName: server,
            serviceType: 'xmpp',
            username,
            ...creds
        };
    }
}
Client$2.default = Client$1;

var RTT = {};

Object.defineProperty(RTT, "__esModule", { value: true });
RTT.InputBuffer = RTT.DisplayBuffer = RTT.diff = void 0;
const tslib_1 = require$$0;
const async_1 = require$$1;
const punycode_1 = (0, tslib_1.__importDefault)(require$$2$1);
/**
 * Calculate the erase and insert actions needed to describe the user's edit operation.
 *
 * Based on the code point buffers before and after the edit, we find the single erase
 * and insert actions needed to describe the full change. We are minimizing the number
 * of deltas, not minimizing the number of affected code points.
 *
 * @param oldText The original buffer of Unicode code points before the user's edit action.
 * @param newText The new buffer of Unicode code points after the user's edit action.
 */
function diff(oldText, newText) {
    const oldLen = oldText.length;
    const newLen = newText.length;
    const searchLen = Math.min(oldLen, newLen);
    let prefixSize = 0;
    for (prefixSize = 0; prefixSize < searchLen; prefixSize++) {
        if (oldText[prefixSize] !== newText[prefixSize]) {
            break;
        }
    }
    let suffixSize = 0;
    for (suffixSize = 0; suffixSize < searchLen - prefixSize; suffixSize++) {
        if (oldText[oldLen - suffixSize - 1] !== newText[newLen - suffixSize - 1]) {
            break;
        }
    }
    const matchedSize = prefixSize + suffixSize;
    const events = [];
    if (matchedSize < oldLen) {
        events.push({
            length: oldLen - matchedSize,
            position: oldLen - suffixSize,
            type: 'erase'
        });
    }
    if (matchedSize < newLen) {
        const insertedText = newText.slice(prefixSize, prefixSize + newLen - matchedSize);
        events.push({
            position: prefixSize,
            text: punycode_1.default.ucs2.encode(insertedText),
            type: 'insert'
        });
    }
    return events;
}
RTT.diff = diff;
/**
 * Class for processing RTT events and providing a renderable string of the resulting text.
 */
class DisplayBuffer {
    constructor(onStateChange, ignoreWaits = false) {
        this.synced = false;
        this.cursorPosition = 0;
        this.ignoreWaits = false;
        this.timeDeficit = 0;
        this.sequenceNumber = 0;
        this.onStateChange =
            onStateChange ||
                function noop() {
                    return;
                };
        this.ignoreWaits = ignoreWaits;
        this.buffer = [];
        this.resetActionQueue();
    }
    /**
     * The encoded Unicode string to display.
     */
    get text() {
        return punycode_1.default.ucs2.encode(this.buffer.slice());
    }
    /**
     * Mark the RTT message as completed and reset state.
     */
    commit() {
        this.resetActionQueue();
    }
    /**
     * Accept an RTT event for processing.
     *
     * A single event can contain multiple edit actions, including
     * wait pauses.
     *
     * Events must be processed in order of their `seq` value in order
     * to stay in sync.
     *
     * @param event {RTTEvent} The RTT event to process.
     */
    process(event) {
        if (event.event === 'cancel' || event.event === 'init') {
            this.resetActionQueue();
            return;
        }
        else if (event.event === 'reset' || event.event === 'new') {
            this.resetActionQueue();
            if (event.seq !== undefined) {
                this.sequenceNumber = event.seq;
            }
        }
        else if (event.seq !== this.sequenceNumber) {
            this.synced = false;
        }
        if (event.actions) {
            const baseTime = Date.now();
            let accumulatedWait = 0;
            for (const action of event.actions) {
                action.baseTime = baseTime + accumulatedWait;
                if (action.type === 'wait') {
                    accumulatedWait += action.duration;
                }
                this.actionQueue.push(action, 0);
            }
        }
        this.sequenceNumber = this.sequenceNumber + 1;
    }
    /**
     * Insert text into the Unicode code point buffer
     *
     * By default, the insertion position is the end of the buffer.
     *
     * @param text The raw text to insert
     * @param position The position to start the insertion
     */
    insert(text = '', position = this.buffer.length) {
        text = text.normalize('NFC');
        const insertedText = punycode_1.default.ucs2.decode(text);
        this.buffer.splice(position, 0, ...insertedText);
        this.cursorPosition = position + insertedText.length;
        this.emitState();
    }
    /**
     * Erase text from the Unicode code point buffer
     *
     * By default, the erased text length is `1`, and the position is the end of the buffer.
     *
     * @param length The number of code points to erase from the buffer, starting at {position} and erasing to the left.
     * @param position The position to start erasing code points. Erasing continues to the left.
     */
    erase(length = 1, position = this.buffer.length) {
        position = Math.max(Math.min(position, this.buffer.length), 0);
        length = Math.max(Math.min(length, this.text.length), 0);
        this.buffer.splice(Math.max(position - length, 0), length);
        this.cursorPosition = Math.max(position - length, 0);
        this.emitState();
    }
    emitState(additional = {}) {
        this.onStateChange({
            cursorPosition: this.cursorPosition,
            synced: this.synced,
            text: this.text,
            ...additional
        });
    }
    /**
     * Reset the processing state and queue.
     *
     * Used when 'init', 'new', 'reset', and 'cancel' RTT events are processed.
     */
    resetActionQueue() {
        if (this.actionQueue) {
            this.actionQueue.kill();
        }
        this.sequenceNumber = 0;
        this.synced = true;
        this.buffer = [];
        this.timeDeficit = 0;
        this.actionQueue = (0, async_1.priorityQueue)((action, done) => {
            const currentTime = Date.now();
            if (action.type === 'insert') {
                this.insert(action.text, action.position);
                return done();
            }
            else if (action.type === 'erase') {
                this.erase(action.length, action.position);
                return done();
            }
            else if (action.type === 'wait') {
                if (this.ignoreWaits) {
                    return done();
                }
                if (action.duration > 700) {
                    action.duration = 700;
                }
                const waitTime = action.duration - (currentTime - action.baseTime) + this.timeDeficit;
                if (waitTime <= 0) {
                    this.timeDeficit = waitTime;
                    return done();
                }
                else {
                    this.timeDeficit = 0;
                    setTimeout(() => done(), waitTime);
                }
            }
            else {
                return done();
            }
        }, 1);
        this.emitState();
    }
}
RTT.DisplayBuffer = DisplayBuffer;
/**
 * Class for tracking changes in a source text, and generating RTT events based on those changes.
 */
class InputBuffer {
    constructor(onStateChange, ignoreWaits = false) {
        this.resetInterval = 10000;
        this.ignoreWaits = false;
        this.isStarting = false;
        this.isReset = false;
        this.changedBetweenResets = false;
        this.onStateChange =
            onStateChange ||
                function noop() {
                    return;
                };
        this.ignoreWaits = ignoreWaits;
        this.buffer = [];
        this.actionQueue = [];
        this.sequenceNumber = 0;
    }
    get text() {
        return punycode_1.default.ucs2.encode(this.buffer.slice());
    }
    /**
     * Generate action deltas based on the new full state of the source text.
     *
     * The text provided here is the _entire_ source text, not a diff.
     *
     * @param text The new state of the user's text.
     */
    update(text) {
        let actions = [];
        if (text !== undefined) {
            text = text.normalize('NFC');
            const newBuffer = punycode_1.default.ucs2.decode(text);
            actions = diff(this.buffer, newBuffer.slice());
            this.buffer = newBuffer;
            this.emitState();
        }
        const now = Date.now();
        if (this.changedBetweenResets && now - this.lastResetTime > this.resetInterval) {
            this.actionQueue = [];
            this.actionQueue.push({
                position: 0,
                text: this.text,
                type: 'insert'
            });
            this.isReset = true;
            this.lastActionTime = now;
            this.lastResetTime = now;
            this.changedBetweenResets = false;
        }
        else if (actions.length) {
            const wait = now - (this.lastActionTime || now);
            if (wait > 0 && !this.ignoreWaits) {
                this.actionQueue.push({
                    duration: wait,
                    type: 'wait'
                });
            }
            for (const action of actions) {
                this.actionQueue.push(action);
            }
            this.lastActionTime = now;
            this.changedBetweenResets = true;
        }
        else {
            this.lastActionTime = now;
        }
    }
    /**
     * Formally start an RTT session.
     *
     * Generates a random starting event sequence number.
     *
     * @param resetInterval {Milliseconds} Time to wait between using RTT reset events during editing.
     */
    start(resetInterval = this.resetInterval) {
        this.commit();
        this.isStarting = true;
        this.resetInterval = resetInterval;
        this.sequenceNumber = Math.floor(Math.random() * 10000 + 1);
        return {
            event: 'init'
        };
    }
    /**
     * Formally stops the RTT session.
     */
    stop() {
        this.commit();
        return {
            event: 'cancel'
        };
    }
    /**
     * Generate an RTT event based on queued edit actions.
     *
     * The edit actions included in the event are all those made since the last
     * time a diff was requested.
     */
    diff() {
        this.update();
        if (!this.actionQueue.length) {
            return null;
        }
        const event = {
            actions: this.actionQueue,
            seq: this.sequenceNumber++
        };
        if (this.isStarting) {
            event.event = 'new';
            this.isStarting = false;
            this.lastResetTime = Date.now();
        }
        else if (this.isReset) {
            event.event = 'reset';
            this.isReset = false;
        }
        this.actionQueue = [];
        return event;
    }
    /**
     * Reset the RTT session state to prepare for a new message text.
     */
    commit() {
        this.sequenceNumber = 0;
        this.lastActionTime = 0;
        this.actionQueue = [];
        this.buffer = [];
    }
    emitState() {
        this.onStateChange({
            text: this.text
        });
    }
}
RTT.InputBuffer = InputBuffer;

var RSM = {};

Object.defineProperty(RSM, "__esModule", { value: true });
RSM.createPager = RSM.ResultSetPager = void 0;
class ResultSetPager {
    constructor(opts) {
        var _a, _b, _c;
        this.resultComplete = false;
        this.fetchedCount = 0;
        this.yieldedCount = 0;
        this.cursor = { first: opts.before, last: opts.after };
        this.query = opts.query;
        this.direction = (_a = opts.direction) !== null && _a !== void 0 ? _a : 'forward';
        this.reverse = (_b = opts.reverse) !== null && _b !== void 0 ? _b : this.direction === 'backward';
        this.pageSize = (_c = opts.pageSize) !== null && _c !== void 0 ? _c : 20;
    }
    async *[Symbol.asyncIterator]() {
        let currentResults = [];
        do {
            currentResults = await this.fetchPage();
            for (const item of currentResults) {
                this.yieldedCount += 1;
                yield item;
            }
        } while (currentResults.length > 0);
    }
    async size() {
        if (this.resultCount !== undefined) {
            return this.resultCount;
        }
        const { paging } = await this.query({ max: 0 });
        this.resultCount = paging.count;
        return paging.count;
    }
    queryCompleted() {
        return this.resultComplete;
    }
    finished() {
        return this.resultComplete && this.yieldedCount === this.fetchedCount;
    }
    async fetchPage() {
        var _a;
        const { results, paging } = await this.query({
            before: this.direction === 'backward' ? (_a = this.cursor.first) !== null && _a !== void 0 ? _a : '' : undefined,
            after: this.direction === 'forward' ? this.cursor.last : undefined,
            max: this.pageSize
        });
        this.cursor = paging;
        this.resultCount = paging.count;
        this.fetchedCount += results.length;
        if ((this.pageSize && results.length < this.pageSize) ||
            (this.resultCount && this.fetchedCount === this.resultCount)) {
            this.resultComplete = true;
        }
        if (this.reverse) {
            results.reverse();
        }
        return results;
    }
}
RSM.ResultSetPager = ResultSetPager;
function createPager(opts) {
    return new ResultSetPager(opts);
}
RSM.createPager = createPager;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createClient = exports.VERSION = exports.Platform = exports.SASL = exports.RTT = exports.RSM = exports.Utils = exports.Jingle = exports.Stanzas = exports.Namespaces = exports.JID = exports.JXT = exports.DataForms = exports.Constants = exports.Client = void 0;
	const tslib_1 = require$$0;
	const Client_1 = (0, tslib_1.__importDefault)(Client$2);
	exports.Client = Client_1.default;
	const Constants$1 = (0, tslib_1.__importStar)(Constants);
	exports.Constants = Constants$1;
	const RTT$1 = (0, tslib_1.__importStar)(RTT);
	exports.RTT = RTT$1;
	const JID = (0, tslib_1.__importStar)(JID$8);
	exports.JID = JID;
	const Jingle = (0, tslib_1.__importStar)(jingle$1);
	exports.Jingle = Jingle;
	const JXT = (0, tslib_1.__importStar)(jxt);
	exports.JXT = JXT;
	const LibSASL = (0, tslib_1.__importStar)(sasl$1);
	exports.SASL = LibSASL;
	const Namespaces$1 = (0, tslib_1.__importStar)(Namespaces);
	exports.Namespaces = Namespaces$1;
	const Stanzas = (0, tslib_1.__importStar)(protocol);
	exports.Stanzas = Stanzas;
	const Utils$1 = (0, tslib_1.__importStar)(Utils);
	exports.Utils = Utils$1;
	const Platform = (0, tslib_1.__importStar)(browser);
	exports.Platform = Platform;
	(0, tslib_1.__exportStar)(StreamManagement$1, exports);
	const RSM$1 = (0, tslib_1.__importStar)(RSM);
	exports.RSM = RSM$1;
	const DataForms$1 = (0, tslib_1.__importStar)(DataForms);
	exports.DataForms = DataForms$1;
	exports.VERSION = Constants$1.VERSION;
	const plugins_1 = (0, tslib_1.__importDefault)(plugins);
	(0, tslib_1.__exportStar)(plugins, exports);
	function createClient(opts) {
	    const client = new Client_1.default(opts);
	    client.use(plugins_1.default);
	    return client;
	}
	exports.createClient = createClient;
} (stanza));

class SaslError extends Error {
    constructor(condition, channelId, stanzaInstanceId) {
        super();
        this.condition = condition;
        this.channelId = channelId;
        this.stanzaInstanceId = stanzaInstanceId;
        this.name = 'SaslError';
    }
}

// so the idea here is any time stanza gets disconnected, we are effectively going to kill that instance of
class ConnectionManager {
    constructor(logger, config) {
        this.logger = logger;
        this.config = config;
    }
    setConfig(config) {
        this.config = config;
    }
    getNewStanzaConnection() {
        return __awaiter$5(this, void 0, void 0, function* () {
            const options = this.getStanzaOptions();
            const stanza$1 = stanza.createClient({});
            // this is a hack because stanza messes up the auth mechanism priority.
            stanza$1.sasl.mechanisms.find(mech => mech.name === 'ANONYMOUS').priority = 0;
            stanza$1.sasl.mechanisms = stanza$1.sasl.mechanisms.sort((a, b) => b.priority - a.priority);
            // we are going to give the stanza instance an id for tracking and logging purposes
            stanza$1.id = v4();
            const channelId = stanza$1.channelId = this.config.channelId;
            let boundCheckForErrorStanza;
            let boundSessionStarted;
            let boundSessionSasl;
            let boundSessionDisconnected;
            const connectionAttemptPromise = timeoutPromise$1((resolve, reject) => {
                boundCheckForErrorStanza = this.checkForErrorStanza.bind(this, stanza$1);
                stanza$1.on('raw:incoming', boundCheckForErrorStanza);
                boundSessionStarted = this.handleSessionStarted.bind(this, stanza$1, resolve);
                stanza$1.on('session:started', boundSessionStarted);
                boundSessionSasl = this.handleSessionSasl.bind(this, stanza$1, reject);
                stanza$1.on('sasl', boundSessionSasl);
                boundSessionDisconnected = this.handleSessionDisconnected.bind(this, stanza$1, reject);
                stanza$1.on('disconnected', boundSessionDisconnected);
                stanza$1.updateConfig(options);
                stanza$1.connect();
            }, 15 * 1000, 'connecting to streaming service', { channelId, stanzaInstanceId: stanza$1.id });
            connectionAttemptPromise.catch(() => stanza$1.disconnect());
            return connectionAttemptPromise.finally(() => {
                stanza$1.off('raw:incoming', boundCheckForErrorStanza);
                stanza$1.off('session:started', boundSessionStarted);
                stanza$1.off('sasl', boundSessionSasl);
                stanza$1.off('disconnected', boundSessionDisconnected);
            });
        });
    }
    handleSessionStarted(stanza, resolve) {
        this.logger.info('new stanza instance connected', { stanzaInstanceId: stanza.id, channelId: stanza.channelId });
        resolve(stanza);
    }
    handleSessionSasl(stanza, reject, sasl) {
        if (sasl.type === 'failure') {
            reject(new SaslError(sasl.condition, stanza.channelId, stanza.id));
        }
    }
    handleSessionDisconnected(stanza, reject) {
        this.logger.error('stanza disconnected', { stanzaInstanceId: stanza.id, channelId: stanza.channelId });
        reject();
    }
    checkForErrorStanza(stanza, rawStanza) {
        if (rawStanza.includes('error')) {
            this.logger.error('Received a stanza during setup that tripped the error filter', { rawStanza, stanzaInstanceId: stanza.id, channelId: stanza.channelId });
        }
    }
    getStanzaOptions() {
        if (this.config.jwt) {
            return this.getJwtOptions();
        }
        return this.getStandardOptions();
    }
    getJwtOptions() {
        const config = this.config;
        const jwt = parseJwt(config.jwt);
        let jidDomain;
        try {
            jidDomain = jwt.data.jid.split('@')[1].replace('conference.', '');
        }
        catch (e) {
            throw new Error('failed to parse jid');
        }
        let wsHost = config.host.replace(/\/$/, '');
        return {
            resource: config.jidResource,
            transports: {
                websocket: `${wsHost}/stream/jwt/${config.jwt}`
            },
            server: jidDomain
        };
    }
    getStandardOptions() {
        const config = this.config;
        let wsHost = config.host.replace(/\/$/, '');
        return {
            jid: config.jid,
            resource: config.jidResource,
            credentials: {
                username: config.jid,
                password: `authKey:${config.authToken}`
            },
            transports: {
                websocket: `${wsHost}/stream/channels/${config.channelId}`
            }
        };
    }
}

class OfflineError extends Error {
}

// src/MemoryLeakError.ts
var MemoryLeakError = class extends Error {
  constructor(emitter, type, count) {
    super(
      `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`
    );
    this.emitter = emitter;
    this.type = type;
    this.count = count;
    this.name = "MaxListenersExceededWarning";
  }
};

// src/Emitter.ts
var _Emitter = class {
  static listenerCount(emitter, eventName) {
    return emitter.listenerCount(eventName);
  }
  constructor() {
    this.events = /* @__PURE__ */ new Map();
    this.maxListeners = _Emitter.defaultMaxListeners;
    this.hasWarnedAboutPotentialMemoryLeak = false;
  }
  _emitInternalEvent(internalEventName, eventName, listener) {
    this.emit(
      internalEventName,
      ...[eventName, listener]
    );
  }
  _getListeners(eventName) {
    return this.events.get(eventName) || [];
  }
  _removeListener(listeners, listener) {
    const index = listeners.indexOf(listener);
    if (index > -1) {
      listeners.splice(index, 1);
    }
    return [];
  }
  _wrapOnceListener(eventName, listener) {
    const onceListener = (...data) => {
      this.removeListener(eventName, onceListener);
      listener.apply(this, data);
    };
    return onceListener;
  }
  setMaxListeners(maxListeners) {
    this.maxListeners = maxListeners;
    return this;
  }
  /**
   * Returns the current max listener value for the `Emitter` which is
   * either set by `emitter.setMaxListeners(n)` or defaults to
   * `Emitter.defaultMaxListeners`.
   */
  getMaxListeners() {
    return this.maxListeners;
  }
  /**
   * Returns an array listing the events for which the emitter has registered listeners.
   * The values in the array will be strings or Symbols.
   */
  eventNames() {
    return Array.from(this.events.keys());
  }
  /**
   * Synchronously calls each of the listeners registered for the event named `eventName`,
   * in the order they were registered, passing the supplied arguments to each.
   * Returns `true` if the event has listeners, `false` otherwise.
   *
   * @example
   * const emitter = new Emitter<{ hello: [string] }>()
   * emitter.emit('hello', 'John')
   */
  emit(eventName, ...data) {
    const listeners = this._getListeners(eventName);
    listeners.forEach((listener) => {
      listener.apply(this, data);
    });
    return listeners.length > 0;
  }
  addListener(eventName, listener) {
    this._emitInternalEvent("newListener", eventName, listener);
    const nextListeners = this._getListeners(eventName).concat(listener);
    this.events.set(eventName, nextListeners);
    if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {
      this.hasWarnedAboutPotentialMemoryLeak = true;
      const memoryLeakWarning = new MemoryLeakError(
        this,
        eventName,
        this.listenerCount(eventName)
      );
      console.warn(memoryLeakWarning);
    }
    return this;
  }
  on(eventName, listener) {
    return this.addListener(eventName, listener);
  }
  once(eventName, listener) {
    return this.addListener(
      eventName,
      this._wrapOnceListener(eventName, listener)
    );
  }
  prependListener(eventName, listener) {
    const listeners = this._getListeners(eventName);
    if (listeners.length > 0) {
      const nextListeners = [listener].concat(listeners);
      this.events.set(eventName, nextListeners);
    } else {
      this.events.set(eventName, listeners.concat(listener));
    }
    return this;
  }
  prependOnceListener(eventName, listener) {
    return this.prependListener(
      eventName,
      this._wrapOnceListener(eventName, listener)
    );
  }
  removeListener(eventName, listener) {
    const listeners = this._getListeners(eventName);
    if (listeners.length > 0) {
      this._removeListener(listeners, listener);
      this.events.set(eventName, listeners);
      this._emitInternalEvent("removeListener", eventName, listener);
    }
    return this;
  }
  /**
   * Alias for `emitter.removeListener()`.
   *
   * @example
   * emitter.off('hello', listener)
   */
  off(eventName, listener) {
    return this.removeListener(eventName, listener);
  }
  removeAllListeners(eventName) {
    if (eventName) {
      this.events.delete(eventName);
    } else {
      this.events.clear();
    }
    return this;
  }
  /**
   * Returns a copy of the array of listeners for the event named `eventName`.
   */
  listeners(eventName) {
    return Array.from(this._getListeners(eventName));
  }
  /**
   * Returns the number of listeners listening to the event named `eventName`.
   */
  listenerCount(eventName) {
    return this._getListeners(eventName).length;
  }
  rawListeners(eventName) {
    return this.listeners(eventName);
  }
};
var Emitter = _Emitter;
Emitter.defaultMaxListeners = 10;

class MessengerExtension extends Emitter {
    constructor(client, stanzaInstance) {
        super();
        this.client = client;
        this.stanzaInstance = stanzaInstance;
    }
    get bareJid() {
        return toBare_1(this.stanzaInstance.jid);
    }
    handleStanzaInstanceChange(stanzaInstance) {
        this.stanzaInstance = stanzaInstance;
    }
    isMediaMessage(msg) {
        return !!msg.mediaMessage;
    }
    handleMessage(msg) {
        if (!this.isMediaMessage(msg)) {
            return;
        }
        const fromMyClient = msg.from === this.stanzaInstance.jid;
        const fromMyUser = toBare_1(msg.from) === this.bareJid;
        this.emit('mediaMessage', Object.assign(Object.assign({}, msg), { fromMyClient, fromMyUser }));
    }
    /**
     * @param msg
     * @returns Promise<messageId>
     */
    broadcastMessage(msg) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const id = v4();
            msg.id = id;
            msg.from = this.stanzaInstance.jid;
            if (!msg.to) {
                msg.to = this.bareJid;
            }
            yield this.stanzaInstance.send('message', msg);
            return id;
        });
    }
    get expose() {
        return {
            broadcastMessage: this.broadcastMessage.bind(this),
            on: this.on.bind(this),
            once: this.once.bind(this),
            off: this.off.bind(this),
            removeListener: this.removeListener.bind(this),
            addListener: this.addListener.bind(this),
        };
    }
}

let extensions = {
    notifications: Notifications,
    webrtcSessions: WebrtcExtension,
    messenger: MessengerExtension
};
const STANZA_DISCONNECTED = 'stanzaDisconnected';
const NO_LONGER_SUBSCRIBED = 'notify:no_longer_subscribed';
const DUPLICATE_ID = 'notify:duplicate_id';
const MAX_CHANNEL_REUSES = 10;
const SESSION_STORE_KEY = 'sc_connectionData';
const BACKOFF_DECREASE_DELAY_MULTIPLIER = 5;
const INITIAL_DELAY = 2000;
class Client extends EventEmitter {
    constructor(options) {
        super();
        this.connected = false;
        this.connecting = false;
        this.hardReconnectRequired = true;
        this.isGuest = false;
        this.backgroundAssistantMode = false;
        this.autoReconnect = true;
        this.extensions = [];
        this.channelReuses = 0;
        this.hasMadeInitialAttempt = false;
        this.http = new HttpClient();
        this.reconnectOnNoLongerSubscribed = options.reconnectOnNoLongerSubscribed !== false;
        this.useServerSidePings = options.useServerSidePings !== false;
        this.config = {
            host: options.host,
            apiHost: options.apiHost || options.host.replace('wss://streaming.', ''),
            authToken: options.authToken,
            jwt: options.jwt,
            jid: options.jid,
            jidResource: options.jidResource,
            channelId: null,
            appName: options.appName,
            appVersion: options.appVersion,
            appId: options.appId,
            customHeaders: options.customHeaders
        };
        this.backgroundAssistantMode = this.checkIsBackgroundAssistant();
        this.isGuest = !this.backgroundAssistantMode && !options.authToken;
        let loggerAccessToken = options.authToken || '';
        let loggerUrl = `https://api.${this.config.apiHost}/api/v2/diagnostics/trace`;
        if (this.backgroundAssistantMode) {
            loggerAccessToken = options.jwt;
            loggerUrl += '/backgroundassistant';
        }
        this.logger = new Logger({
            accessToken: loggerAccessToken,
            url: loggerUrl,
            uploadDebounceTime: 1000,
            initializeServerLogging: !this.isGuest && !options.optOutOfWebrtcStatsTelemetry,
            /* streaming-client logging info */
            appVersion: Client.version,
            appName: 'streaming-client',
            logLevel: this.config.logLevel || 'info',
            logger: options.logger || console,
            formatters: options.logFormatters,
            /* secondary/parent app info */
            originAppName: options.appName,
            originAppVersion: options.appVersion,
            originAppId: options.appId,
            customHeaders: options.customHeaders
        });
        this.connectionManager = new ConnectionManager(this.logger, this.config);
        Object.keys(extensions).forEach((extensionName) => {
            const extension = new extensions[extensionName](this, options);
            this.extensions.push(extension);
            if (!extension.tokenBucket) {
                // default rate limit
                // 20 stanzas per 1000 ms,
                // adding up to 25 stanzas over the course of the 1000ms
                // starting with 20 stanzas
                // = 45 stanzas max per 1000 ms
                // = 70 stanzas max per 2000 ms
                extension.tokenBucket = new TokenBucket(20, 25, 1000);
                extension.tokenBucket.content = 25;
            }
            if (typeof extension.on === 'function') {
                extension.on('send', this.handleSendEventFromExtension.bind(this, extension));
            }
            this[extensionName] = extension.expose;
            this[`_${extensionName}`] = extension;
        });
    }
    handleSendEventFromExtension(extension, data, message = false) {
        return extension.tokenBucket.removeTokens(1, () => {
            const stanza = this.activeStanzaInstance;
            if (!stanza) {
                return this.logger.warn('cannot send message, no active stanza client', { data, message }, { skipServer: true });
            }
            if (message === true) {
                return stanza.sendMessage(data);
            }
            return stanza.sendIQ(data);
        });
    }
    checkIsBackgroundAssistant() {
        if (this.config.jwt) {
            const jwt = parseJwt(this.config.jwt);
            return jwt && jwt.iss === 'urn:purecloud:screenrecording';
        }
        return false;
    }
    addInateEventHandlers(stanza) {
        // make sure we don't stack event handlers. There should only ever be *at most* one handler
        this.removeStanzaBoundEventHandlers();
        this.boundStanzaDisconnect = this.handleStanzaDisconnectedEvent.bind(this, stanza);
        this.boundStanzaNoLongerSubscribed = this.handleNoLongerSubscribed.bind(this, stanza);
        this.boundStanzaDuplicateId = this.handleDuplicateId.bind(this, stanza);
        this.on(STANZA_DISCONNECTED, this.boundStanzaDisconnect);
        this.on(NO_LONGER_SUBSCRIBED, this.boundStanzaNoLongerSubscribed);
        this.on(DUPLICATE_ID, this.boundStanzaDuplicateId);
        this.extensions.forEach(extension => {
            if (typeof extension.handleIq === 'function') {
                stanza.on('iq', extension.handleIq.bind(extension));
            }
            if (typeof extension.handleMessage === 'function') {
                stanza.on('message', extension.handleMessage.bind(extension));
            }
        });
    }
    removeStanzaBoundEventHandlers() {
        if (this.boundStanzaDisconnect) {
            this.off(STANZA_DISCONNECTED, this.boundStanzaDisconnect);
            this.boundStanzaDisconnect = undefined;
        }
        if (this.boundStanzaNoLongerSubscribed) {
            this.off(NO_LONGER_SUBSCRIBED, this.boundStanzaNoLongerSubscribed);
            this.boundStanzaNoLongerSubscribed = undefined;
        }
        if (this.boundStanzaDuplicateId) {
            this.off(DUPLICATE_ID, this.boundStanzaDuplicateId);
            this.boundStanzaDuplicateId = undefined;
        }
    }
    proxyStanzaEvents(stanza) {
        stanza.originalEmitter = stanza.emit;
        stanza.emit = (eventName, ...args) => {
            const hasListeners = stanza.originalEmitter(eventName, ...args);
            // there are a few events that need to be handled specially. stanza emits a `connected` event
            // which means the web socket connected but that doesn't mean it's not going to immediately close.
            // For this reason, we are going to equate the `session:started` event as "connected" which
            // essentially means the websocket connection is stable.
            //
            // we are also going to let streaming client control its own connected and disconnected state so
            // we will emit those events separately "when we are ready".
            // as per block comment, we'll ignore the connected event
            if (eventName === 'connected') {
                return hasListeners;
            }
            else if (eventName === 'disconnected') {
                eventName = STANZA_DISCONNECTED;
            }
            return this.emit(eventName, ...args);
        };
    }
    handleStanzaDisconnectedEvent(disconnectedInstance) {
        var _a, _b;
        return __awaiter$5(this, void 0, void 0, function* () {
            this.logger.info('stanzaDisconnected event received', { stanzaInstanceId: disconnectedInstance.id, channelId: disconnectedInstance.channelId });
            this.connected = false;
            this.connecting = false;
            (_a = disconnectedInstance.pinger) === null || _a === void 0 ? void 0 : _a.stop();
            (_b = disconnectedInstance.serverMonitor) === null || _b === void 0 ? void 0 : _b.stop();
            this.removeAllListeners(STANZA_DISCONNECTED);
            this.removeAllListeners(NO_LONGER_SUBSCRIBED);
            // unproxy events
            if (disconnectedInstance.originalEmitter) {
                disconnectedInstance.emit = disconnectedInstance.originalEmitter;
            }
            this.activeStanzaInstance = undefined;
            this.emit('disconnected', { reconnecting: this.autoReconnect });
            if (this.autoReconnect) {
                return this.connect({ keepTryingOnFailure: true });
            }
        });
    }
    handleNoLongerSubscribed(stanzaInstance) {
        var _a, _b;
        this.logger.warn('noLongerSubscribed event received', { stanzaInstanceId: stanzaInstance.id, channelId: stanzaInstance.channelId });
        (_a = stanzaInstance.pinger) === null || _a === void 0 ? void 0 : _a.stop();
        (_b = stanzaInstance.serverMonitor) === null || _b === void 0 ? void 0 : _b.stop();
        this.hardReconnectRequired = true;
        if (!this.reconnectOnNoLongerSubscribed) {
            this.autoReconnect = false;
        }
    }
    handleDuplicateId(stanzaInstance) {
        var _a, _b;
        this.logger.warn('duplicate_id event received, forcing hard reconnect', { stanzaInstanceId: stanzaInstance.id, channelId: stanzaInstance.channelId });
        (_a = stanzaInstance.pinger) === null || _a === void 0 ? void 0 : _a.stop();
        (_b = stanzaInstance.serverMonitor) === null || _b === void 0 ? void 0 : _b.stop();
        this.hardReconnectRequired = true;
    }
    disconnect() {
        return __awaiter$5(this, void 0, void 0, function* () {
            this.logger.info('streamingClient.disconnect was called');
            if (!this.activeStanzaInstance) {
                return;
            }
            return timeoutPromise$1(resolve => {
                this.autoReconnect = false;
                this.http.stopAllRetries();
                return this.activeStanzaInstance.disconnect()
                    .then(resolve);
            }, 5000, 'disconnecting streaming service');
        });
    }
    getSessionStoreKey() {
        const differentiator = this.config.appName || this.logger.clientId;
        return `${SESSION_STORE_KEY}_${differentiator}`;
    }
    getConnectionData() {
        const connectionDataStr = sessionStorage.getItem(this.getSessionStoreKey());
        const defaultValue = {
            currentDelayMs: 0,
        };
        if (connectionDataStr) {
            try {
                return JSON.parse(connectionDataStr);
            }
            catch (e) {
                this.logger.warn('failed to parse streaming client connection data');
                return defaultValue;
            }
        }
        return defaultValue;
    }
    setConnectionData(data) {
        sessionStorage.setItem(this.getSessionStoreKey(), JSON.stringify(data));
    }
    increaseBackoff() {
        const connectionData = this.getConnectionData();
        const currentDelay = Math.max(connectionData.currentDelayMs * 2, INITIAL_DELAY * 2);
        const newConnectionData = {
            currentDelayMs: currentDelay,
            delayMsAfterNextReduction: currentDelay / 2,
            nextDelayReductionTime: new Date().getTime() + (currentDelay * BACKOFF_DECREASE_DELAY_MULTIPLIER),
            timeOfTotalReset: new Date().getTime() + 1000 * 60 * 60 // one hour in the future
        };
        this.setConnectionData(newConnectionData);
        return newConnectionData;
    }
    decreaseBackoff(newAmountMs) {
        const data = this.getConnectionData();
        const msUntilNextReduction = newAmountMs * BACKOFF_DECREASE_DELAY_MULTIPLIER;
        const newConnectionData = {
            currentDelayMs: newAmountMs,
            delayMsAfterNextReduction: newAmountMs / 2,
            nextDelayReductionTime: new Date().getTime() + (msUntilNextReduction),
            timeOfTotalReset: data.timeOfTotalReset
        };
        // if we are past the total reset time, do that instead
        if (data.timeOfTotalReset && data.timeOfTotalReset < new Date().getTime() || newAmountMs < INITIAL_DELAY) {
            this.logger.debug('decreaseBackoff() called, but timeOfTotalReset has elasped or next delay is below 2s. Resetting backoff');
            return this.setConnectionData({
                currentDelayMs: 0
            });
        }
        this.setConnectionData(newConnectionData);
        clearTimeout(this.backoffReductionTimer);
        this.logger.debug('Setting timer for next backoff reduction since we haven\'t reached total reset', { msUntilReduction: msUntilNextReduction, delayMsAfterNextReduction: newConnectionData.delayMsAfterNextReduction });
        this.backoffReductionTimer = setTimeout(() => this.decreaseBackoff(newConnectionData.delayMsAfterNextReduction), msUntilNextReduction);
    }
    getStartingDelay(connectionData, maxDelay) {
        // we don't want the delay to ever be less than 2 seconds
        const minDelay = Math.max(connectionData.currentDelayMs, INITIAL_DELAY);
        if (connectionData.timeOfTotalReset && connectionData.timeOfTotalReset < new Date().getTime()) {
            return INITIAL_DELAY;
        }
        return Math.min(minDelay, maxDelay);
    }
    connect(connectOpts) {
        var _a;
        return __awaiter$5(this, void 0, void 0, function* () {
            if (this.connecting) {
                const error = new Error('Already trying to connect streaming client');
                return this.logger.warn(error);
            }
            this.connecting = true;
            const maxDelay = (connectOpts === null || connectOpts === void 0 ? void 0 : connectOpts.maxDelayBetweenConnectionAttempts) || 90000;
            let maxAttempts = (connectOpts === null || connectOpts === void 0 ? void 0 : connectOpts.maxConnectionAttempts) || 1;
            // tslint:disable-next-line
            if (connectOpts === null || connectOpts === void 0 ? void 0 : connectOpts.keepTryingOnFailure) {
                // this maintains the previous functionality
                maxAttempts = Infinity;
            }
            clearTimeout(this.backoffReductionTimer);
            const connectionData = this.getConnectionData();
            const startingDelay = this.getStartingDelay(connectionData, maxDelay);
            const delayFirstAttempt = this.hasMadeInitialAttempt;
            this.hasMadeInitialAttempt = true;
            if (connectionData.currentDelayMs) {
                this.logger.debug('streamingClient.connect was called, but backoff is remembered', { currentDelayMs: connectionData.currentDelayMs, delayingThisAttempt: delayFirstAttempt, clientId: this.logger.clientId, appName: this.config.appName });
            }
            try {
                yield backOff_1(() => __awaiter$5(this, void 0, void 0, function* () {
                    const connectionData = this.getConnectionData();
                    yield this.makeConnectionAttempt();
                    if (connectionData.nextDelayReductionTime) {
                        const msUntilReduction = connectionData.nextDelayReductionTime - new Date().getTime();
                        this.logger.debug('Setting timer for next backoff reduction', { msUntilReduction, delayMsAfterNextReduction: connectionData.delayMsAfterNextReduction });
                        this.backoffReductionTimer = setTimeout(() => this.decreaseBackoff(connectionData.delayMsAfterNextReduction || 0), msUntilReduction);
                    }
                }), {
                    jitter: 'none',
                    maxDelay,
                    numOfAttempts: maxAttempts,
                    startingDelay,
                    delayFirstAttempt,
                    retry: this.backoffConnectRetryHandler.bind(this, {
                        maxConnectionAttempts: maxAttempts,
                    }),
                });
            }
            catch (err) {
                let error = err;
                if (!err) {
                    error = new Error('Streaming client connection attempted received and undefined error');
                }
                else if (err.name === 'AxiosError') {
                    const axiosError = err;
                    const config = axiosError.config || { url: undefined, method: undefined };
                    // sanitized error for logging
                    error = {
                        config: {
                            url: config.url,
                            method: config.method
                        },
                        status: (_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status,
                        code: axiosError.code,
                        name: axiosError.name,
                        message: axiosError.message
                    };
                }
                this.logger.error('Failed to connect streaming client', { error });
                if (!err) {
                    throw error;
                }
                throw err;
            }
        });
    }
    backoffConnectRetryHandler(connectOpts, err, connectionAttempt) {
        var _a, _b, _c, _d, _e;
        return __awaiter$5(this, void 0, void 0, function* () {
            // if we exceed the `numOfAttempts` in the backoff config it still calls this retry fn and just ignores the result
            // if that's the case, we just want to bail out and ignore all the extra logging here.
            if (connectionAttempt >= connectOpts.maxConnectionAttempts) {
                return false;
            }
            const additionalErrorDetails = { connectionAttempt, error: err };
            if (!err) {
                additionalErrorDetails.error = new Error('streaming client backoff handler received undefined error');
            }
            else if (err.name === 'AxiosError') {
                const axiosError = err;
                const config = axiosError.config || { url: undefined, method: undefined };
                let sanitizedError = {
                    config: {
                        url: config.url,
                        method: config.method
                    },
                    status: (_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status,
                    code: axiosError.code,
                    name: axiosError.name,
                    message: axiosError.message
                };
                additionalErrorDetails.error = sanitizedError;
                if ([401, 403].includes(((_b = err.response) === null || _b === void 0 ? void 0 : _b.status) || 0)) {
                    this.logger.error('Streaming client received an error that it can\'t recover from and will not attempt to reconnect', additionalErrorDetails);
                    return false;
                }
            }
            // if we get a sasl error, that means we made it all the way to the point of trying to open a websocket and
            // it was rejected for some reason. At this point we should do a hard reconnect then try again.
            if (err instanceof SaslError) {
                this.logger.info('hardReconnectRequired set to true due to sasl error');
                this.hardReconnectRequired = true;
                Object.assign(additionalErrorDetails, { channelId: err.channelId, stanzaInstanceId: err.stanzaInstanceId });
            }
            // we don't need to log the stack for a timeout message
            if (err instanceof TimeoutError) {
                additionalErrorDetails.error = err.message;
                const details = err.details;
                if (details) {
                    additionalErrorDetails.details = details;
                }
            }
            if (err === null || err === void 0 ? void 0 : err.response) {
                // This *should* be an axios error according to typings, but it appears this could be an AxiosError *or* and XmlHttpRequest
                // we'll check both to be safe
                const retryAfter = ((_c = err.response.headers) === null || _c === void 0 ? void 0 : _c['retry-after']) || ((_e = (_d = err.response).getResponseHeader) === null || _e === void 0 ? void 0 : _e.call(_d, 'retry-after'));
                if (retryAfter) {
                    // retry after comes in seconds, we need to return milliseconds
                    let retryDelay = parseInt(retryAfter, 10) * 1000;
                    additionalErrorDetails.retryDelay = retryDelay;
                    this.logger.error('Failed streaming client connection attempt, respecting retry-after header and will retry afterwards.', additionalErrorDetails, { skipServer: err instanceof OfflineError });
                    yield delay(retryDelay);
                    this.logger.debug('finished waiting for retry-after');
                    return true;
                }
            }
            const connectionData = this.increaseBackoff();
            this.logger.error('Failed streaming client connection attempt, retrying', additionalErrorDetails, { skipServer: err instanceof OfflineError });
            this.logger.debug('debug: retry info', { expectedRetryInMs: connectionData.currentDelayMs, appName: this.config.appName, clientId: this.logger.clientId });
            return true;
        });
    }
    makeConnectionAttempt() {
        var _a, _b;
        return __awaiter$5(this, void 0, void 0, function* () {
            if (!navigator.onLine) {
                throw new OfflineError('Browser is offline, skipping connection attempt');
            }
            let stanzaInstance;
            let previousConnectingState = this.connecting;
            try {
                yield this.prepareForConnect();
                stanzaInstance = yield this.connectionManager.getNewStanzaConnection();
                this.connected = true;
                this.connecting = false;
                this.addInateEventHandlers(stanzaInstance);
                this.proxyStanzaEvents(stanzaInstance);
                // handle any extension configuration
                for (const extension of this.extensions) {
                    if (extension.configureNewStanzaInstance) {
                        yield extension.configureNewStanzaInstance(stanzaInstance);
                    }
                }
                for (const extension of this.extensions) {
                    extension.handleStanzaInstanceChange(stanzaInstance);
                }
                this.activeStanzaInstance = stanzaInstance;
                yield this.setupConnectionMonitoring(stanzaInstance);
                this.emit('connected');
            }
            catch (err) {
                if (stanzaInstance) {
                    this.logger.error('Error occurred in connection attempt, but after websocket connected. Cleaning up connection so backoff is respected', { stanzaInstanceId: stanzaInstance.id, channelId: stanzaInstance.channelId });
                    this.removeStanzaBoundEventHandlers();
                    (_a = stanzaInstance.pinger) === null || _a === void 0 ? void 0 : _a.stop();
                    (_b = stanzaInstance.serverMonitor) === null || _b === void 0 ? void 0 : _b.stop();
                    yield stanzaInstance.disconnect();
                    this.connected = false;
                    this.connecting = previousConnectingState;
                }
                throw err;
            }
        });
    }
    setupConnectionMonitoring(stanzaInstance) {
        return __awaiter$5(this, void 0, void 0, function* () {
            const setupClientPinger = (message) => {
                const logMessage = `${message}, falling back to client-side pinging`;
                this.logger.warn(logMessage, { stanzaInstanceId: stanzaInstance.id, channelId: stanzaInstance.channelId });
                stanzaInstance.pinger = new Ping(this, stanzaInstance);
            };
            if (this.useServerSidePings) {
                try {
                    // if this fails, then hawk doesn't support serverside pinging and we need to do client side pings
                    yield stanzaInstance.subscribeToNode(this._notifications.pubsubHost, 'enable.server.side.pings');
                    stanzaInstance.serverMonitor = new ServerMonitor(this, stanzaInstance);
                }
                catch (err) {
                    setupClientPinger('failed to establish server-side pinging');
                }
            }
            else {
                setupClientPinger('client configured to not use server-side pinging');
            }
        });
    }
    prepareForConnect() {
        return __awaiter$5(this, void 0, void 0, function* () {
            if (this.config.jwt) {
                this.hardReconnectRequired = false;
                return this.connectionManager.setConfig(this.config);
            }
            if (!this.hardReconnectRequired) {
                this.channelReuses++;
                if (this.channelReuses >= MAX_CHANNEL_REUSES) {
                    this.logger.warn('Forcing a hard reconnect due to max channel reuses', { channelId: this.config.channelId, channelReuses: this.channelReuses });
                    this.channelReuses = 0;
                    this.hardReconnectRequired = true;
                }
            }
            if (this.hardReconnectRequired) {
                let jidPromise;
                if (this.config.jid) {
                    jidPromise = Promise.resolve(this.config.jid);
                }
                else {
                    const jidRequestOpts = {
                        method: 'get',
                        host: this.config.apiHost,
                        authToken: this.config.authToken,
                        logger: this.logger,
                        customHeaders: this.config.customHeaders
                    };
                    jidPromise = this.http.requestApi('users/me', jidRequestOpts)
                        .then(res => res.data.chat.jabberId);
                }
                const channelRequestOpts = {
                    method: 'post',
                    host: this.config.apiHost,
                    authToken: this.config.authToken,
                    logger: this.logger,
                    customHeaders: this.config.customHeaders
                };
                const channelPromise = this.http.requestApi('notifications/channels?connectionType=streaming', channelRequestOpts)
                    .then(res => res.data.id);
                const [jid, channelId] = yield Promise.all([jidPromise, channelPromise]);
                this.config.jid = jid;
                this.config.channelId = channelId;
                this.autoReconnect = true;
                this.logger.info('attempting to connect streaming client on channel', { channelId });
                this.connectionManager.setConfig(this.config);
                this.hardReconnectRequired = false;
            }
        });
    }
    stopServerLogging() {
        /* flush all pending logs – then turn off the logger */
        this.logger.sendAllLogsInstantly();
        this.logger.stopServerLogging();
    }
    startServerLogging() {
        this.logger.startServerLogging();
    }
    setAccessToken(token) {
        this.config.authToken = token;
        this.logger.setAccessToken(token);
    }
    static extend(namespace, extension) {
        if (extensions[namespace]) {
            throw new Error(`Cannot register already existing namespace ${namespace}`);
        }
        extensions[namespace] = extension;
    }
    get version() {
        return Client.version;
    }
    static get version() {
        return '17.2.7';
    }
}

/// <reference path="types/libs.ts" />

export { GenesysCloudMediaSession, HttpClient, MessengerExtension, SessionTypes, StanzaMediaSession, Client as default, parseJwt };
